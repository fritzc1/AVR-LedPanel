
PC-2812-LED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000026c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003f  00800100  00800100  000002e0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002e0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000310  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000350  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008f1  00000000  00000000  00000398  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000072c  00000000  00000000  00000c89  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005fe  00000000  00000000  000013b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000040  00000000  00000000  000019b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003ea  00000000  00000000  000019f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000215  00000000  00000000  00001dde  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001ff3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 91 00 	jmp	0x122	; 0x122 <__vector_1>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	af 33       	cpi	r26, 0x3F	; 63
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 9b 00 	call	0x136	; 0x136 <main>
  88:	0c 94 34 01 	jmp	0x268	; 0x268 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <output_grb_c2>:
 .equ      OUTBIT,   2


 .global output_grb_c2
 output_grb_c2:
 movw   r26, r24      ;r26:27 = X = p_buf
  90:	dc 01       	movw	r26, r24
 movw   r24, r22      ;r24:25 = count
  92:	cb 01       	movw	r24, r22
 in     r22, SREG     ;save SREG (global int state)
  94:	6f b7       	in	r22, 0x3f	; 63
 cli                  ;no interrupts from here on, we're cycle-counting
  96:	f8 94       	cli
 in     r20, PORTC
  98:	48 b1       	in	r20, 0x08	; 8
 nop
  9a:	00 00       	nop
 ori    r20, (1<<OUTBIT)         ;our '1' output
  9c:	44 60       	ori	r20, 0x04	; 4
 nop
  9e:	00 00       	nop
 in     r21, PORTC
  a0:	58 b1       	in	r21, 0x08	; 8
 nop
  a2:	00 00       	nop
 andi   r21, ~(1<<OUTBIT)        ;our '0' output
  a4:	5b 7f       	andi	r21, 0xFB	; 251
 nop
  a6:	00 00       	nop
 ldi    r19, 7        ;7 bit counter (8th bit is different)
  a8:	37 e0       	ldi	r19, 0x07	; 7
 nop
  aa:	00 00       	nop
 ld     r18,X+        ;get first data byte
  ac:	2d 91       	ld	r18, X+
	...

000000b0 <loop1>:
 nop
 loop1:
 out    PORTC, r20    ; 1   +0 start of a bit pulse
  b0:	48 b9       	out	0x08, r20	; 8
 nop
  b2:	00 00       	nop
 lsl    r18           ; 1   +1 next bit into C, MSB first
  b4:	22 0f       	add	r18, r18
 nop
  b6:	00 00       	nop
 brcs   L1            ; 1/2 +2 branch if 1
  b8:	68 f0       	brcs	.+26     	; 0xd4 <L1>
 nop
  ba:	00 00       	nop
 out    PORTC, r21    ; 1   +3 end hi for '0' bit (3 clocks hi)
  bc:	58 b9       	out	0x08, r21	; 8
 nop
  be:	00 00       	nop
 nop                  ; 1   +4
  c0:	00 00       	nop
 nop
  c2:	00 00       	nop
 bst    r18, 7        ; 1   +5 save last bit of data for fast branching
  c4:	27 fb       	bst	r18, 7
 nop
  c6:	00 00       	nop
 subi   r19, 1        ; 1   +6 how many more bits for this byte?
  c8:	31 50       	subi	r19, 0x01	; 1
 nop
  ca:	00 00       	nop
 breq   bit8          ; 1/2 +7 last bit, do differently
  cc:	69 f0       	breq	.+26     	; 0xe8 <bit8>
 nop
  ce:	00 00       	nop
 rjmp   loop1         ; 2   +8, 10 total for 0 bit
  d0:	ef cf       	rjmp	.-34     	; 0xb0 <loop1>
	...

000000d4 <L1>:
 nop
 L1:
 nop                  ; 1   +4
  d4:	00 00       	nop
 nop
  d6:	00 00       	nop
 bst    r18, 7        ; 1   +5 save last bit of data for fast branching
  d8:	27 fb       	bst	r18, 7
 nop
  da:	00 00       	nop
 subi   r19, 1        ; 1   +6 how many more bits for this byte
  dc:	31 50       	subi	r19, 0x01	; 1
 nop
  de:	00 00       	nop
 out    PORTC, r21    ; 1   +7 end hi for '1' bit (7 clocks hi)
  e0:	58 b9       	out	0x08, r21	; 8
 nop
  e2:	00 00       	nop
 brne   loop1         ; 2/1 +8 10 total for 1 bit (fall thru if last bit)
  e4:	29 f7       	brne	.-54     	; 0xb0 <loop1>
	...

000000e8 <bit8>:
 nop
 bit8:
 ldi    r19, 7        ; 1   +9 bit count for next byte
  e8:	37 e0       	ldi	r19, 0x07	; 7
 nop
  ea:	00 00       	nop
 out    PORTC, r20    ; 1   +0 start of a bit pulse
  ec:	48 b9       	out	0x08, r20	; 8
 nop
  ee:	00 00       	nop
 brts   L2            ; 1/2 +1 branch if last bit is a 1
  f0:	76 f0       	brts	.+28     	; 0x10e <L2>
 nop
  f2:	00 00       	nop
 nop                  ; 1   +2
  f4:	00 00       	nop
 nop
  f6:	00 00       	nop
 out    PORTC, r21    ; 1   +3 end hi for '0' bit (3 clocks hi)
  f8:	58 b9       	out	0x08, r21	; 8
 nop
  fa:	00 00       	nop
 ld     r18, X+       ; 2   +4 fetch next byte
  fc:	2d 91       	ld	r18, X+
 nop
  fe:	00 00       	nop
 sbiw   r24, 1        ; 2   +6 dec byte counter
 100:	01 97       	sbiw	r24, 0x01	; 1
 nop
 102:	00 00       	nop
 brne   loop1         ; 2   +8 loop back or return
 104:	a9 f6       	brne	.-86     	; 0xb0 <loop1>
 nop
 106:	00 00       	nop
 out    SREG, r22     ; restore global int flag
 108:	6f bf       	out	0x3f, r22	; 63
 nop
 10a:	00 00       	nop
 ret
 10c:	08 95       	ret

0000010e <L2>:
 L2:
 ld     r18, X+       ; 2   +3 fetch next byte
 10e:	2d 91       	ld	r18, X+
 nop
 110:	00 00       	nop
 sbiw   r24, 1        ; 2   +5 dec byte counter
 112:	01 97       	sbiw	r24, 0x01	; 1
 nop
 114:	00 00       	nop
 out    PORTC, r21    ; 1   +7 end hi for '1' bit (7 clocks hi)
 116:	58 b9       	out	0x08, r21	; 8
 nop
 118:	00 00       	nop
 brne   loop1         ; 2   +8 loop back or return
 11a:	51 f6       	brne	.-108    	; 0xb0 <loop1>
 nop
 11c:	00 00       	nop
 out    SREG, r22     ; restore global int flag
 11e:	6f bf       	out	0x3f, r22	; 63
 120:	08 95       	ret

00000122 <__vector_1>:

void Function1();
extern void Function2();
u16 translatebuffer(u16);
ISR(INT0_vect)
{
 122:	1f 92       	push	r1
 124:	0f 92       	push	r0
 126:	0f b6       	in	r0, 0x3f	; 63
 128:	0f 92       	push	r0
 12a:	11 24       	eor	r1, r1
	
}
 12c:	0f 90       	pop	r0
 12e:	0f be       	out	0x3f, r0	; 63
 130:	0f 90       	pop	r0
 132:	1f 90       	pop	r1
 134:	18 95       	reti

00000136 <main>:
	u8 Gsw;
	u8 Bsw; // count up 1 or down 0
	u8 Rdiv = 4;
	u8 Gdiv = 8;
	u8 Bdiv = 8;
	DDRC |= (1 << DDC2); // set PD3 to OUTPUT
 136:	3a 9a       	sbi	0x07, 2	; 7
	Gval=0x00;
	Bval=0x00;
	//Start all colors idle
	Rsw=1;
	Gsw=1;
	Bsw=1;
 138:	bb 24       	eor	r11, r11
 13a:	b3 94       	inc	r11
	Rval=0xFF;
	Gval=0x00;
	Bval=0x00;
	//Start all colors idle
	Rsw=1;
	Gsw=1;
 13c:	cc 24       	eor	r12, r12
 13e:	c3 94       	inc	r12
	//Start 100% blue
	Rval=0xFF;
	Gval=0x00;
	Bval=0x00;
	//Start all colors idle
	Rsw=1;
 140:	aa 24       	eor	r10, r10
 142:	a3 94       	inc	r10
	DDRC |= (1 << DDC2); // set PD3 to OUTPUT

	//Start 100% blue
	Rval=0xFF;
	Gval=0x00;
	Bval=0x00;
 144:	e1 2c       	mov	r14, r1
	u8 Bdiv = 8;
	DDRC |= (1 << DDC2); // set PD3 to OUTPUT

	//Start 100% blue
	Rval=0xFF;
	Gval=0x00;
 146:	d1 2c       	mov	r13, r1
	u8 Gdiv = 8;
	u8 Bdiv = 8;
	DDRC |= (1 << DDC2); // set PD3 to OUTPUT

	//Start 100% blue
	Rval=0xFF;
 148:	ff 24       	eor	r15, r15
 14a:	fa 94       	dec	r15
 14c:	cf e3       	ldi	r28, 0x3F	; 63
 14e:	d1 e0       	ldi	r29, 0x01	; 1
		// ramp green dn if: red 0 blue full
		if (Rval==0x00 && Bval == 0xFF) {Gsw = 0;};
		// ramp blue up if: green full red 0
		if (Gval==0xFF && Rval == 0x00) {Bsw = 2;};
		// ramp blue dn if: red full green 0
		if (Rval==0xFF && Gval == 0x00) {Bsw = 0;};
 150:	81 2c       	mov	r8, r1
		// ramp green up if: red full blue 0
		if (Rval==0xFF && Bval == 0x00) {Gsw = 2;};
		// ramp green dn if: red 0 blue full
		if (Rval==0x00 && Bval == 0xFF) {Gsw = 0;};
		// ramp blue up if: green full red 0
		if (Gval==0xFF && Rval == 0x00) {Bsw = 2;};
 152:	68 94       	set
 154:	99 24       	eor	r9, r9
 156:	91 f8       	bld	r9, 1
 158:	0c e3       	ldi	r16, 0x3C	; 60
 15a:	10 e0       	ldi	r17, 0x00	; 0
 15c:	a3 e0       	ldi	r26, 0x03	; 3
 15e:	b1 e0       	ldi	r27, 0x01	; 1
	u8 Gdiv = 8;
	u8 Bdiv = 8;
	DDRC |= (1 << DDC2); // set PD3 to OUTPUT

	//Start 100% blue
	Rval=0xFF;
 160:	fd 01       	movw	r30, r26
	while (1) {
		
		/* Build buffer from color data */
	
		for (i=0;i<NUM_LEDS;i++)
			buf[i]=0;
 162:	11 92       	st	Z+, r1
	Bsw=1;
	while (1) {
		
		/* Build buffer from color data */
	
		for (i=0;i<NUM_LEDS;i++)
 164:	ce 17       	cp	r28, r30
 166:	df 07       	cpc	r29, r31
 168:	e1 f7       	brne	.-8      	; 0x162 <main+0x2c>
			buf[i]=0;
		
		// determine values based on current values and flags
		
		// ramp red up if: blue is full green is 0
		if (Bval==0xFF && Gval == 0x00) {Rsw = 2;};
 16a:	8f ef       	ldi	r24, 0xFF	; 255
 16c:	e8 12       	cpse	r14, r24
 16e:	04 c0       	rjmp	.+8      	; 0x178 <main+0x42>
 170:	d1 10       	cpse	r13, r1
 172:	6b c0       	rjmp	.+214    	; 0x24a <main+0x114>
 174:	a9 2c       	mov	r10, r9
 176:	69 c0       	rjmp	.+210    	; 0x24a <main+0x114>
		// ramp red dn if: blue 0 green full
		if (Bval==0x00 && Gval == 0xFF) {Rsw = 0;};
 178:	e1 10       	cpse	r14, r1
 17a:	67 c0       	rjmp	.+206    	; 0x24a <main+0x114>
 17c:	9f ef       	ldi	r25, 0xFF	; 255
 17e:	d9 12       	cpse	r13, r25
 180:	60 c0       	rjmp	.+192    	; 0x242 <main+0x10c>
 182:	5e c0       	rjmp	.+188    	; 0x240 <main+0x10a>
		// ramp green up if: red full blue 0
		if (Rval==0xFF && Bval == 0x00) {Gsw = 2;};
		// ramp green dn if: red 0 blue full
		if (Rval==0x00 && Bval == 0xFF) {Gsw = 0;};
 184:	f1 10       	cpse	r15, r1
 186:	58 c0       	rjmp	.+176    	; 0x238 <main+0x102>
 188:	8f ef       	ldi	r24, 0xFF	; 255
 18a:	e8 12       	cpse	r14, r24
 18c:	01 c0       	rjmp	.+2      	; 0x190 <main+0x5a>
 18e:	c8 2c       	mov	r12, r8
		// ramp blue up if: green full red 0
		if (Gval==0xFF && Rval == 0x00) {Bsw = 2;};
 190:	9f ef       	ldi	r25, 0xFF	; 255
 192:	d9 12       	cpse	r13, r25
 194:	03 c0       	rjmp	.+6      	; 0x19c <main+0x66>
 196:	ff 20       	and	r15, r15
 198:	09 f4       	brne	.+2      	; 0x19c <main+0x66>
 19a:	5b c0       	rjmp	.+182    	; 0x252 <main+0x11c>
		// ramp blue dn if: red full green 0
		if (Rval==0xFF && Gval == 0x00) {Bsw = 0;};
 19c:	8f ef       	ldi	r24, 0xFF	; 255
 19e:	f8 12       	cpse	r15, r24
 1a0:	4b c0       	rjmp	.+150    	; 0x238 <main+0x102>
 1a2:	dd 20       	and	r13, r13
 1a4:	09 f4       	brne	.+2      	; 0x1a8 <main+0x72>
 1a6:	5b c0       	rjmp	.+182    	; 0x25e <main+0x128>
 1a8:	5b c0       	rjmp	.+182    	; 0x260 <main+0x12a>
		// ramp green up if: red full blue 0
		if (Rval==0xFF && Bval == 0x00) {Gsw = 2;};
		// ramp green dn if: red 0 blue full
		if (Rval==0x00 && Bval == 0xFF) {Gsw = 0;};
		// ramp blue up if: green full red 0
		if (Gval==0xFF && Rval == 0x00) {Bsw = 2;};
 1aa:	b9 2c       	mov	r11, r9
		
			
		// increment decrement or leave the same:
		// switch key: 0 dec, 1 leave same, 2 inc
		if (Rsw == 2 && Rval != 0xFF)
			{Rval = Rval+1;};
 1ac:	f3 94       	inc	r15
 1ae:	04 c0       	rjmp	.+8      	; 0x1b8 <main+0x82>
		if (Rsw == 0 && Rval != 0x00)
 1b0:	a1 10       	cpse	r10, r1
 1b2:	02 c0       	rjmp	.+4      	; 0x1b8 <main+0x82>
 1b4:	f1 10       	cpse	r15, r1
			{Rval = Rval-1;};
 1b6:	fa 94       	dec	r15
		if (Gsw == 2 && Gval != 0xFF)
 1b8:	92 e0       	ldi	r25, 0x02	; 2
 1ba:	c9 12       	cpse	r12, r25
 1bc:	05 c0       	rjmp	.+10     	; 0x1c8 <main+0x92>
 1be:	8f ef       	ldi	r24, 0xFF	; 255
 1c0:	d8 16       	cp	r13, r24
 1c2:	31 f0       	breq	.+12     	; 0x1d0 <main+0x9a>
			{Gval = Gval+1;};
 1c4:	d3 94       	inc	r13
 1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <main+0x9a>
		if (Gsw == 0 && Gval != 0x00)
 1c8:	c1 10       	cpse	r12, r1
 1ca:	02 c0       	rjmp	.+4      	; 0x1d0 <main+0x9a>
 1cc:	d1 10       	cpse	r13, r1
			{Gval = Gval-1;};
 1ce:	da 94       	dec	r13
		if (Bsw == 2 && Bval != 0xFF)
 1d0:	92 e0       	ldi	r25, 0x02	; 2
 1d2:	b9 12       	cpse	r11, r25
 1d4:	05 c0       	rjmp	.+10     	; 0x1e0 <main+0xaa>
 1d6:	8f ef       	ldi	r24, 0xFF	; 255
 1d8:	e8 16       	cp	r14, r24
 1da:	31 f0       	breq	.+12     	; 0x1e8 <main+0xb2>
			{Bval = Bval+1;};
 1dc:	e3 94       	inc	r14
 1de:	04 c0       	rjmp	.+8      	; 0x1e8 <main+0xb2>
		if (Bsw == 0 && Bval != 0x00)
 1e0:	b1 10       	cpse	r11, r1
 1e2:	02 c0       	rjmp	.+4      	; 0x1e8 <main+0xb2>
 1e4:	e1 10       	cpse	r14, r1
			{Bval = Bval-1;};
 1e6:	ea 94       	dec	r14
			
		bufindex = 0;
		for (y=0;y<NUM_WS2812;y++)
		{
			tempR = Rval/Rdiv;
 1e8:	2f 2d       	mov	r18, r15
 1ea:	26 95       	lsr	r18
 1ec:	26 95       	lsr	r18
			tempG = Gval/Gdiv;
 1ee:	9d 2d       	mov	r25, r13
 1f0:	96 95       	lsr	r25
 1f2:	96 95       	lsr	r25
 1f4:	96 95       	lsr	r25
			tempB = Bval/Bdiv;
 1f6:	8e 2d       	mov	r24, r14
 1f8:	86 95       	lsr	r24
 1fa:	86 95       	lsr	r24
 1fc:	86 95       	lsr	r24
			
			buf[bufindex] = tempG;
 1fe:	9c 93       	st	X, r25
			bufindex++;
			buf[bufindex] = tempR;
 200:	11 96       	adiw	r26, 0x01	; 1
 202:	2c 93       	st	X, r18
 204:	11 97       	sbiw	r26, 0x01	; 1
			bufindex++;
			buf[bufindex] = tempB;
 206:	12 96       	adiw	r26, 0x02	; 2
 208:	8c 93       	st	X, r24
 20a:	12 97       	sbiw	r26, 0x02	; 2
 20c:	13 96       	adiw	r26, 0x03	; 3
			{Bval = Bval+1;};
		if (Bsw == 0 && Bval != 0x00)
			{Bval = Bval-1;};
			
		bufindex = 0;
		for (y=0;y<NUM_WS2812;y++)
 20e:	ac 17       	cp	r26, r28
 210:	bd 07       	cpc	r27, r29
 212:	a9 f7       	brne	.-22     	; 0x1fe <main+0xc8>
 214:	10 93 02 01 	sts	0x0102, r17	; 0x800102 <bufindex+0x1>
 218:	00 93 01 01 	sts	0x0101, r16	; 0x800101 <bufindex>
			bufindex++;
			buf[bufindex] = tempB;
			bufindex++;
			
		}
		output_grb_c2(buf, sizeof(buf));
 21c:	b8 01       	movw	r22, r16
 21e:	83 e0       	ldi	r24, 0x03	; 3
 220:	91 e0       	ldi	r25, 0x01	; 1
 222:	0e 94 48 00 	call	0x90	; 0x90 <output_grb_c2>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 226:	8f e3       	ldi	r24, 0x3F	; 63
 228:	9c e9       	ldi	r25, 0x9C	; 156
 22a:	01 97       	sbiw	r24, 0x01	; 1
 22c:	f1 f7       	brne	.-4      	; 0x22a <main+0xf4>
 22e:	00 c0       	rjmp	.+0      	; 0x230 <main+0xfa>
 230:	00 00       	nop
 232:	94 cf       	rjmp	.-216    	; 0x15c <main+0x26>
		// ramp red up if: blue is full green is 0
		if (Bval==0xFF && Gval == 0x00) {Rsw = 2;};
		// ramp red dn if: blue 0 green full
		if (Bval==0x00 && Gval == 0xFF) {Rsw = 0;};
		// ramp green up if: red full blue 0
		if (Rval==0xFF && Bval == 0x00) {Gsw = 2;};
 234:	c9 2c       	mov	r12, r9
 236:	ac cf       	rjmp	.-168    	; 0x190 <main+0x5a>
		if (Rval==0xFF && Gval == 0x00) {Bsw = 0;};
		
			
		// increment decrement or leave the same:
		// switch key: 0 dec, 1 leave same, 2 inc
		if (Rsw == 2 && Rval != 0xFF)
 238:	92 e0       	ldi	r25, 0x02	; 2
 23a:	a9 12       	cpse	r10, r25
 23c:	b9 cf       	rjmp	.-142    	; 0x1b0 <main+0x7a>
 23e:	b6 cf       	rjmp	.-148    	; 0x1ac <main+0x76>
		// determine values based on current values and flags
		
		// ramp red up if: blue is full green is 0
		if (Bval==0xFF && Gval == 0x00) {Rsw = 2;};
		// ramp red dn if: blue 0 green full
		if (Bval==0x00 && Gval == 0xFF) {Rsw = 0;};
 240:	a8 2c       	mov	r10, r8
		// ramp green up if: red full blue 0
		if (Rval==0xFF && Bval == 0x00) {Gsw = 2;};
 242:	8f ef       	ldi	r24, 0xFF	; 255
 244:	f8 12       	cpse	r15, r24
 246:	9e cf       	rjmp	.-196    	; 0x184 <main+0x4e>
 248:	f5 cf       	rjmp	.-22     	; 0x234 <main+0xfe>
 24a:	9f ef       	ldi	r25, 0xFF	; 255
 24c:	f9 12       	cpse	r15, r25
 24e:	9a cf       	rjmp	.-204    	; 0x184 <main+0x4e>
 250:	9f cf       	rjmp	.-194    	; 0x190 <main+0x5a>
		if (Rval==0xFF && Gval == 0x00) {Bsw = 0;};
		
			
		// increment decrement or leave the same:
		// switch key: 0 dec, 1 leave same, 2 inc
		if (Rsw == 2 && Rval != 0xFF)
 252:	82 e0       	ldi	r24, 0x02	; 2
 254:	a8 16       	cp	r10, r24
 256:	09 f4       	brne	.+2      	; 0x25a <main+0x124>
 258:	a8 cf       	rjmp	.-176    	; 0x1aa <main+0x74>
		// ramp green up if: red full blue 0
		if (Rval==0xFF && Bval == 0x00) {Gsw = 2;};
		// ramp green dn if: red 0 blue full
		if (Rval==0x00 && Bval == 0xFF) {Gsw = 0;};
		// ramp blue up if: green full red 0
		if (Gval==0xFF && Rval == 0x00) {Bsw = 2;};
 25a:	b9 2c       	mov	r11, r9
 25c:	a9 cf       	rjmp	.-174    	; 0x1b0 <main+0x7a>
		// ramp blue dn if: red full green 0
		if (Rval==0xFF && Gval == 0x00) {Bsw = 0;};
 25e:	b8 2c       	mov	r11, r8
		
			
		// increment decrement or leave the same:
		// switch key: 0 dec, 1 leave same, 2 inc
		if (Rsw == 2 && Rval != 0xFF)
 260:	92 e0       	ldi	r25, 0x02	; 2
 262:	a9 12       	cpse	r10, r25
 264:	a5 cf       	rjmp	.-182    	; 0x1b0 <main+0x7a>
 266:	a8 cf       	rjmp	.-176    	; 0x1b8 <main+0x82>

00000268 <_exit>:
 268:	f8 94       	cli

0000026a <__stop_program>:
 26a:	ff cf       	rjmp	.-2      	; 0x26a <__stop_program>
