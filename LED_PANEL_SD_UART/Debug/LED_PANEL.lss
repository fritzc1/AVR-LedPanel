
LED_PANEL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000198  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001e  00800100  00800100  0000020c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000023c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000280  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000081e  00000000  00000000  000002d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006d6  00000000  00000000  00000aee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000426  00000000  00000000  000011c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000050  00000000  00000000  000015ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000389  00000000  00000000  0000163c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000005b  00000000  00000000  000019c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001a20  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__vector_1>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	ae 31       	cpi	r26, 0x1E	; 30
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 a6 00 	call	0x14c	; 0x14c <main>
  88:	0c 94 ca 00 	jmp	0x194	; 0x194 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <output_grb>:
 .equ      OUTBIT,   3


 .global output_grb
 output_grb:
 movw   r26, r24      ;r26:27 = X = p_buf
  90:	dc 01       	movw	r26, r24
 movw   r24, r22      ;r24:25 = count
  92:	cb 01       	movw	r24, r22
 in     r22, SREG     ;save SREG (global int state)
  94:	6f b7       	in	r22, 0x3f	; 63
 cli                  ;no interrupts from here on, we're cycle-counting
  96:	f8 94       	cli
 in     r20, PORTD
  98:	4b b1       	in	r20, 0x0b	; 11
 ori    r20, (1<<OUTBIT)         ;our '1' output
  9a:	48 60       	ori	r20, 0x08	; 8
 in     r21, PORTD
  9c:	5b b1       	in	r21, 0x0b	; 11
 andi   r21, ~(1<<OUTBIT)        ;our '0' output
  9e:	57 7f       	andi	r21, 0xF7	; 247
 ldi    r19, 7        ;7 bit counter (8th bit is different)
  a0:	37 e0       	ldi	r19, 0x07	; 7
 ld     r18,X+        ;get first data byte
  a2:	2d 91       	ld	r18, X+

000000a4 <loop1>:
 loop1:
 out    PORTD, r20    ; 1   +0 start of a bit pulse
  a4:	4b b9       	out	0x0b, r20	; 11
 nop
  a6:	00 00       	nop
 lsl    r18           ; 1   +1 next bit into C, MSB first
  a8:	22 0f       	add	r18, r18
 nop
  aa:	00 00       	nop
 brcs   L1            ; 1/2 +2 branch if 1
  ac:	68 f0       	brcs	.+26     	; 0xc8 <L1>
 nop
  ae:	00 00       	nop
 out    PORTD, r21    ; 1   +3 end hi for '0' bit (3 clocks hi)
  b0:	5b b9       	out	0x0b, r21	; 11
 nop
  b2:	00 00       	nop
 nop                  ; 1   +4
  b4:	00 00       	nop
 nop
  b6:	00 00       	nop
 bst    r18, 7        ; 1   +5 save last bit of data for fast branching
  b8:	27 fb       	bst	r18, 7
 nop
  ba:	00 00       	nop
 subi   r19, 1        ; 1   +6 how many more bits for this byte?
  bc:	31 50       	subi	r19, 0x01	; 1
 nop
  be:	00 00       	nop
 breq   bit8          ; 1/2 +7 last bit, do differently
  c0:	69 f0       	breq	.+26     	; 0xdc <bit8>
 nop
  c2:	00 00       	nop
 rjmp   loop1         ; 2   +8, 10 total for 0 bit
  c4:	ef cf       	rjmp	.-34     	; 0xa4 <loop1>
	...

000000c8 <L1>:
 nop
 L1:
 nop                  ; 1   +4
  c8:	00 00       	nop
 nop
  ca:	00 00       	nop
 bst    r18, 7        ; 1   +5 save last bit of data for fast branching
  cc:	27 fb       	bst	r18, 7
 nop
  ce:	00 00       	nop
 subi   r19, 1        ; 1   +6 how many more bits for this byte
  d0:	31 50       	subi	r19, 0x01	; 1
 nop
  d2:	00 00       	nop
 out    PORTD, r21    ; 1   +7 end hi for '1' bit (7 clocks hi)
  d4:	5b b9       	out	0x0b, r21	; 11
 nop
  d6:	00 00       	nop
 brne   loop1         ; 2/1 +8 10 total for 1 bit (fall thru if last bit)
  d8:	29 f7       	brne	.-54     	; 0xa4 <loop1>
	...

000000dc <bit8>:
 nop
 bit8:
 ldi    r19, 7        ; 1   +9 bit count for next byte
  dc:	37 e0       	ldi	r19, 0x07	; 7
 nop
  de:	00 00       	nop
 out    PORTD, r20    ; 1   +0 start of a bit pulse
  e0:	4b b9       	out	0x0b, r20	; 11
 nop
  e2:	00 00       	nop
 brts   L2            ; 1/2 +1 branch if last bit is a 1
  e4:	7e f0       	brts	.+30     	; 0x104 <L2>
 nop
  e6:	00 00       	nop
 nop                  ; 1   +2
  e8:	00 00       	nop
 nop
  ea:	00 00       	nop
 out    PORTD, r21    ; 1   +3 end hi for '0' bit (3 clocks hi)
  ec:	5b b9       	out	0x0b, r21	; 11
 nop
  ee:	00 00       	nop
 ld     r18, X+       ; 2   +4 fetch next byte
  f0:	2d 91       	ld	r18, X+
 nop
  f2:	00 00       	nop
 sbiw   r24, 1        ; 2   +6 dec byte counter
  f4:	01 97       	sbiw	r24, 0x01	; 1
 nop
  f6:	00 00       	nop
 brne   loop1         ; 2   +8 loop back or return
  f8:	a9 f6       	brne	.-86     	; 0xa4 <loop1>
 nop
  fa:	00 00       	nop
 out    SREG, r22     ; restore global int flag
  fc:	6f bf       	out	0x3f, r22	; 63
 sei                  ; re-enable interrupts CF ADD
  fe:	78 94       	sei
 nop
 100:	00 00       	nop
 ret
 102:	08 95       	ret

00000104 <L2>:
 L2:
 ld     r18, X+       ; 2   +3 fetch next byte
 104:	2d 91       	ld	r18, X+
 nop
 106:	00 00       	nop
 sbiw   r24, 1        ; 2   +5 dec byte counter
 108:	01 97       	sbiw	r24, 0x01	; 1
 nop
 10a:	00 00       	nop
 out    PORTD, r21    ; 1   +7 end hi for '1' bit (7 clocks hi)
 10c:	5b b9       	out	0x0b, r21	; 11
 nop
 10e:	00 00       	nop
 brne   loop1         ; 2   +8 loop back or return
 110:	49 f6       	brne	.-110    	; 0xa4 <loop1>
 nop
 112:	00 00       	nop
 out    SREG, r22     ; restore global int flag
 114:	6f bf       	out	0x3f, r22	; 63
 sei                  ; re-enable interrupts CF ADD
 116:	78 94       	sei
 ret
 118:	08 95       	ret

0000011a <__vector_1>:

void Function1();
extern void Function2();

ISR(INT0_vect)
{
 11a:	1f 92       	push	r1
 11c:	0f 92       	push	r0
 11e:	0f b6       	in	r0, 0x3f	; 63
 120:	0f 92       	push	r0
 122:	11 24       	eor	r1, r1
	
}
 124:	0f 90       	pop	r0
 126:	0f be       	out	0x3f, r0	; 63
 128:	0f 90       	pop	r0
 12a:	1f 90       	pop	r1
 12c:	18 95       	reti

0000012e <Function1>:
		function_select = 0;
	}
}

void Function1() {
	memset(buf, 0x0F, sizeof(buf));
 12e:	4e e1       	ldi	r20, 0x1E	; 30
 130:	50 e0       	ldi	r21, 0x00	; 0
 132:	6f e0       	ldi	r22, 0x0F	; 15
 134:	70 e0       	ldi	r23, 0x00	; 0
 136:	80 e0       	ldi	r24, 0x00	; 0
 138:	91 e0       	ldi	r25, 0x01	; 1
 13a:	0e 94 c3 00 	call	0x186	; 0x186 <memset>
	output_grb(buf, sizeof(buf));
 13e:	6e e1       	ldi	r22, 0x1E	; 30
 140:	70 e0       	ldi	r23, 0x00	; 0
 142:	80 e0       	ldi	r24, 0x00	; 0
 144:	91 e0       	ldi	r25, 0x01	; 1
 146:	0e 94 48 00 	call	0x90	; 0x90 <output_grb>
 14a:	08 95       	ret

0000014c <main>:

int main(void)
{
	
	
	PORTD |= (1 << PORTD2);    // turn On the Pull-up
 14c:	5a 9a       	sbi	0x0b, 2	; 11
	DDRD &= ~(1 << DDD2);     // 
 14e:	52 98       	cbi	0x0a, 2	; 10
	// PD2 (PCINT0 pin) is now an input
	// PD2 is now an input with pull-up enabled
	
	EICRA |= (1 << ISC00);    // set INT0 to trigger on ANY logic change
 150:	e9 e6       	ldi	r30, 0x69	; 105
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	80 81       	ld	r24, Z
 156:	81 60       	ori	r24, 0x01	; 1
 158:	80 83       	st	Z, r24
	EIMSK |= (1 << INT0);     // Turns on INT0
 15a:	e8 9a       	sbi	0x1d, 0	; 29
	sei();                    // turn on interrupts
 15c:	78 94       	sei
	
	DDRD |= (1 << DDD3); // set to OUTPUT
 15e:	53 9a       	sbi	0x0a, 3	; 10
	
	memset(buf, 0, sizeof(buf));
 160:	8e e1       	ldi	r24, 0x1E	; 30
 162:	e0 e0       	ldi	r30, 0x00	; 0
 164:	f1 e0       	ldi	r31, 0x01	; 1
 166:	df 01       	movw	r26, r30
 168:	1d 92       	st	X+, r1
 16a:	8a 95       	dec	r24
 16c:	e9 f7       	brne	.-6      	; 0x168 <main+0x1c>
	output_grb(buf, sizeof(buf));
 16e:	6e e1       	ldi	r22, 0x1E	; 30
 170:	70 e0       	ldi	r23, 0x00	; 0
 172:	cf 01       	movw	r24, r30
 174:	0e 94 48 00 	call	0x90	; 0x90 <output_grb>

		function_select++;
		switch (function_select)
		{
			case 1:
			Function1(*buf);
 178:	c0 e0       	ldi	r28, 0x00	; 0
 17a:	d1 e0       	ldi	r29, 0x01	; 1
 17c:	88 81       	ld	r24, Y
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	0e 94 97 00 	call	0x12e	; 0x12e <Function1>
 184:	fb cf       	rjmp	.-10     	; 0x17c <main+0x30>

00000186 <memset>:
 186:	dc 01       	movw	r26, r24
 188:	01 c0       	rjmp	.+2      	; 0x18c <memset+0x6>
 18a:	6d 93       	st	X+, r22
 18c:	41 50       	subi	r20, 0x01	; 1
 18e:	50 40       	sbci	r21, 0x00	; 0
 190:	e0 f7       	brcc	.-8      	; 0x18a <memset+0x4>
 192:	08 95       	ret

00000194 <_exit>:
 194:	f8 94       	cli

00000196 <__stop_program>:
 196:	ff cf       	rjmp	.-2      	; 0x196 <__stop_program>
