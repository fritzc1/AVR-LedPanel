
LEDSTR1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00001798  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001724  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000684  00800100  00800100  00001798  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001798  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000017f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000200  00000000  00000000  00001838  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001de3  00000000  00000000  00001a38  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c8b  00000000  00000000  0000381b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001a42  00000000  00000000  000044a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000694  00000000  00000000  00005ee8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00009a2f  00000000  00000000  0000657c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d6f  00000000  00000000  0000ffab  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000180  00000000  00000000  00010d1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000399a  00000000  00000000  00010e9a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__ctors_end>
       4:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
       8:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
       c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      10:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      14:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      18:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      1c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      20:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      24:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      28:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      2c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      30:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      34:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      38:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      3c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      40:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      44:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      48:	0c 94 40 06 	jmp	0xc80	; 0xc80 <__vector_18>
      4c:	0c 94 9f 05 	jmp	0xb3e	; 0xb3e <__vector_19>
      50:	0c 94 b2 05 	jmp	0xb64	; 0xb64 <__vector_20>
      54:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      58:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      5c:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      60:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>
      64:	0c 94 5f 00 	jmp	0xbe	; 0xbe <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	6b 24       	eor	r6, r11
	...

0000006b <__c.2566>:
      6b:	65 72 72 2d 62 61 64 61 64 64 72 24 00              err-badaddr$.

00000078 <__c.2576>:
      78:	67 25 64 24 00                                      g%d$.

0000007d <__c.2581>:
      7d:	67 25 73 24 00                                      g%s$.

00000082 <__c.2584>:
      82:	65 72 72 2d 67 65 74 6e 6f 70 72 6f 70 24 00        err-getnoprop$.

00000091 <__c.2587>:
      91:	65 72 72 2d 63 6d 64 24 00                          err-cmd$.

0000009a <__ctors_end>:
      9a:	11 24       	eor	r1, r1
      9c:	1f be       	out	0x3f, r1	; 63
      9e:	cf ef       	ldi	r28, 0xFF	; 255
      a0:	d8 e0       	ldi	r29, 0x08	; 8
      a2:	de bf       	out	0x3e, r29	; 62
      a4:	cd bf       	out	0x3d, r28	; 61

000000a6 <__do_clear_bss>:
      a6:	27 e0       	ldi	r18, 0x07	; 7
      a8:	a0 e0       	ldi	r26, 0x00	; 0
      aa:	b1 e0       	ldi	r27, 0x01	; 1
      ac:	01 c0       	rjmp	.+2      	; 0xb0 <.do_clear_bss_start>

000000ae <.do_clear_bss_loop>:
      ae:	1d 92       	st	X+, r1

000000b0 <.do_clear_bss_start>:
      b0:	a4 38       	cpi	r26, 0x84	; 132
      b2:	b2 07       	cpc	r27, r18
      b4:	e1 f7       	brne	.-8      	; 0xae <.do_clear_bss_loop>
      b6:	0e 94 01 02 	call	0x402	; 0x402 <main>
      ba:	0c 94 90 0b 	jmp	0x1720	; 0x1720 <_exit>

000000be <__bad_interrupt>:
      be:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c2 <bufferInit>:
	CRITICAL_SECTION_START;
	// flush contents of the buffer
	buffer->datalength = 0;
	// end critical section
	CRITICAL_SECTION_END;
}
      c2:	cf 93       	push	r28
      c4:	df 93       	push	r29
      c6:	cd b7       	in	r28, 0x3d	; 61
      c8:	de b7       	in	r29, 0x3e	; 62
      ca:	27 97       	sbiw	r28, 0x07	; 7
      cc:	0f b6       	in	r0, 0x3f	; 63
      ce:	f8 94       	cli
      d0:	de bf       	out	0x3e, r29	; 62
      d2:	0f be       	out	0x3f, r0	; 63
      d4:	cd bf       	out	0x3d, r28	; 61
      d6:	9b 83       	std	Y+3, r25	; 0x03
      d8:	8a 83       	std	Y+2, r24	; 0x02
      da:	7d 83       	std	Y+5, r23	; 0x05
      dc:	6c 83       	std	Y+4, r22	; 0x04
      de:	5f 83       	std	Y+7, r21	; 0x07
      e0:	4e 83       	std	Y+6, r20	; 0x06
      e2:	8f e5       	ldi	r24, 0x5F	; 95
      e4:	90 e0       	ldi	r25, 0x00	; 0
      e6:	fc 01       	movw	r30, r24
      e8:	80 81       	ld	r24, Z
      ea:	89 83       	std	Y+1, r24	; 0x01
      ec:	f8 94       	cli
      ee:	8a 81       	ldd	r24, Y+2	; 0x02
      f0:	9b 81       	ldd	r25, Y+3	; 0x03
      f2:	2c 81       	ldd	r18, Y+4	; 0x04
      f4:	3d 81       	ldd	r19, Y+5	; 0x05
      f6:	fc 01       	movw	r30, r24
      f8:	31 83       	std	Z+1, r19	; 0x01
      fa:	20 83       	st	Z, r18
      fc:	8a 81       	ldd	r24, Y+2	; 0x02
      fe:	9b 81       	ldd	r25, Y+3	; 0x03
     100:	2e 81       	ldd	r18, Y+6	; 0x06
     102:	3f 81       	ldd	r19, Y+7	; 0x07
     104:	fc 01       	movw	r30, r24
     106:	33 83       	std	Z+3, r19	; 0x03
     108:	22 83       	std	Z+2, r18	; 0x02
     10a:	8a 81       	ldd	r24, Y+2	; 0x02
     10c:	9b 81       	ldd	r25, Y+3	; 0x03
     10e:	fc 01       	movw	r30, r24
     110:	17 82       	std	Z+7, r1	; 0x07
     112:	16 82       	std	Z+6, r1	; 0x06
     114:	8a 81       	ldd	r24, Y+2	; 0x02
     116:	9b 81       	ldd	r25, Y+3	; 0x03
     118:	fc 01       	movw	r30, r24
     11a:	15 82       	std	Z+5, r1	; 0x05
     11c:	14 82       	std	Z+4, r1	; 0x04
     11e:	8f e5       	ldi	r24, 0x5F	; 95
     120:	90 e0       	ldi	r25, 0x00	; 0
     122:	29 81       	ldd	r18, Y+1	; 0x01
     124:	fc 01       	movw	r30, r24
     126:	20 83       	st	Z, r18
     128:	00 00       	nop
     12a:	27 96       	adiw	r28, 0x07	; 7
     12c:	0f b6       	in	r0, 0x3f	; 63
     12e:	f8 94       	cli
     130:	de bf       	out	0x3e, r29	; 62
     132:	0f be       	out	0x3f, r0	; 63
     134:	cd bf       	out	0x3d, r28	; 61
     136:	df 91       	pop	r29
     138:	cf 91       	pop	r28
     13a:	08 95       	ret

0000013c <bufferAddToEnd>:
     13c:	cf 93       	push	r28
     13e:	df 93       	push	r29
     140:	00 d0       	rcall	.+0      	; 0x142 <bufferAddToEnd+0x6>
     142:	00 d0       	rcall	.+0      	; 0x144 <bufferAddToEnd+0x8>
     144:	cd b7       	in	r28, 0x3d	; 61
     146:	de b7       	in	r29, 0x3e	; 62
     148:	9b 83       	std	Y+3, r25	; 0x03
     14a:	8a 83       	std	Y+2, r24	; 0x02
     14c:	6c 83       	std	Y+4, r22	; 0x04
     14e:	8f e5       	ldi	r24, 0x5F	; 95
     150:	90 e0       	ldi	r25, 0x00	; 0
     152:	fc 01       	movw	r30, r24
     154:	80 81       	ld	r24, Z
     156:	89 83       	std	Y+1, r24	; 0x01
     158:	f8 94       	cli
     15a:	8a 81       	ldd	r24, Y+2	; 0x02
     15c:	9b 81       	ldd	r25, Y+3	; 0x03
     15e:	fc 01       	movw	r30, r24
     160:	24 81       	ldd	r18, Z+4	; 0x04
     162:	35 81       	ldd	r19, Z+5	; 0x05
     164:	8a 81       	ldd	r24, Y+2	; 0x02
     166:	9b 81       	ldd	r25, Y+3	; 0x03
     168:	fc 01       	movw	r30, r24
     16a:	82 81       	ldd	r24, Z+2	; 0x02
     16c:	93 81       	ldd	r25, Z+3	; 0x03
     16e:	28 17       	cp	r18, r24
     170:	39 07       	cpc	r19, r25
     172:	a0 f5       	brcc	.+104    	; 0x1dc <bufferAddToEnd+0xa0>
     174:	8a 81       	ldd	r24, Y+2	; 0x02
     176:	9b 81       	ldd	r25, Y+3	; 0x03
     178:	fc 01       	movw	r30, r24
     17a:	20 81       	ld	r18, Z
     17c:	31 81       	ldd	r19, Z+1	; 0x01
     17e:	8a 81       	ldd	r24, Y+2	; 0x02
     180:	9b 81       	ldd	r25, Y+3	; 0x03
     182:	fc 01       	movw	r30, r24
     184:	46 81       	ldd	r20, Z+6	; 0x06
     186:	57 81       	ldd	r21, Z+7	; 0x07
     188:	8a 81       	ldd	r24, Y+2	; 0x02
     18a:	9b 81       	ldd	r25, Y+3	; 0x03
     18c:	fc 01       	movw	r30, r24
     18e:	84 81       	ldd	r24, Z+4	; 0x04
     190:	95 81       	ldd	r25, Z+5	; 0x05
     192:	ba 01       	movw	r22, r20
     194:	68 0f       	add	r22, r24
     196:	79 1f       	adc	r23, r25
     198:	8a 81       	ldd	r24, Y+2	; 0x02
     19a:	9b 81       	ldd	r25, Y+3	; 0x03
     19c:	fc 01       	movw	r30, r24
     19e:	42 81       	ldd	r20, Z+2	; 0x02
     1a0:	53 81       	ldd	r21, Z+3	; 0x03
     1a2:	cb 01       	movw	r24, r22
     1a4:	ba 01       	movw	r22, r20
     1a6:	0e 94 1d 08 	call	0x103a	; 0x103a <__udivmodhi4>
     1aa:	82 0f       	add	r24, r18
     1ac:	93 1f       	adc	r25, r19
     1ae:	2c 81       	ldd	r18, Y+4	; 0x04
     1b0:	fc 01       	movw	r30, r24
     1b2:	20 83       	st	Z, r18
     1b4:	8a 81       	ldd	r24, Y+2	; 0x02
     1b6:	9b 81       	ldd	r25, Y+3	; 0x03
     1b8:	fc 01       	movw	r30, r24
     1ba:	84 81       	ldd	r24, Z+4	; 0x04
     1bc:	95 81       	ldd	r25, Z+5	; 0x05
     1be:	9c 01       	movw	r18, r24
     1c0:	2f 5f       	subi	r18, 0xFF	; 255
     1c2:	3f 4f       	sbci	r19, 0xFF	; 255
     1c4:	8a 81       	ldd	r24, Y+2	; 0x02
     1c6:	9b 81       	ldd	r25, Y+3	; 0x03
     1c8:	fc 01       	movw	r30, r24
     1ca:	35 83       	std	Z+5, r19	; 0x05
     1cc:	24 83       	std	Z+4, r18	; 0x04
     1ce:	8f e5       	ldi	r24, 0x5F	; 95
     1d0:	90 e0       	ldi	r25, 0x00	; 0
     1d2:	29 81       	ldd	r18, Y+1	; 0x01
     1d4:	fc 01       	movw	r30, r24
     1d6:	20 83       	st	Z, r18
     1d8:	80 e0       	ldi	r24, 0x00	; 0
     1da:	06 c0       	rjmp	.+12     	; 0x1e8 <bufferAddToEnd+0xac>
     1dc:	8f e5       	ldi	r24, 0x5F	; 95
     1de:	90 e0       	ldi	r25, 0x00	; 0
     1e0:	29 81       	ldd	r18, Y+1	; 0x01
     1e2:	fc 01       	movw	r30, r24
     1e4:	20 83       	st	Z, r18
     1e6:	8f ef       	ldi	r24, 0xFF	; 255
     1e8:	0f 90       	pop	r0
     1ea:	0f 90       	pop	r0
     1ec:	0f 90       	pop	r0
     1ee:	0f 90       	pop	r0
     1f0:	df 91       	pop	r29
     1f2:	cf 91       	pop	r28
     1f4:	08 95       	ret

000001f6 <bufferClear>:

void bufferClear(cBuffer* buffer, unsigned short size) {
     1f6:	cf 93       	push	r28
     1f8:	df 93       	push	r29
     1fa:	00 d0       	rcall	.+0      	; 0x1fc <bufferClear+0x6>
     1fc:	00 d0       	rcall	.+0      	; 0x1fe <bufferClear+0x8>
     1fe:	1f 92       	push	r1
     200:	cd b7       	in	r28, 0x3d	; 61
     202:	de b7       	in	r29, 0x3e	; 62
     204:	9b 83       	std	Y+3, r25	; 0x03
     206:	8a 83       	std	Y+2, r24	; 0x02
     208:	7d 83       	std	Y+5, r23	; 0x05
     20a:	6c 83       	std	Y+4, r22	; 0x04
  // begin critical section
  CRITICAL_SECTION_START;
     20c:	8f e5       	ldi	r24, 0x5F	; 95
     20e:	90 e0       	ldi	r25, 0x00	; 0
     210:	fc 01       	movw	r30, r24
     212:	80 81       	ld	r24, Z
     214:	89 83       	std	Y+1, r24	; 0x01
     216:	f8 94       	cli
  // flush contents of the buffer
  buffer->datalength = 0;
     218:	8a 81       	ldd	r24, Y+2	; 0x02
     21a:	9b 81       	ldd	r25, Y+3	; 0x03
     21c:	fc 01       	movw	r30, r24
     21e:	15 82       	std	Z+5, r1	; 0x05
     220:	14 82       	std	Z+4, r1	; 0x04
  // end critical section
  CRITICAL_SECTION_END;
     222:	8f e5       	ldi	r24, 0x5F	; 95
     224:	90 e0       	ldi	r25, 0x00	; 0
     226:	29 81       	ldd	r18, Y+1	; 0x01
     228:	fc 01       	movw	r30, r24
     22a:	20 83       	st	Z, r18
  memset(buffer->dataptr,0,size);
     22c:	8a 81       	ldd	r24, Y+2	; 0x02
     22e:	9b 81       	ldd	r25, Y+3	; 0x03
     230:	fc 01       	movw	r30, r24
     232:	80 81       	ld	r24, Z
     234:	91 81       	ldd	r25, Z+1	; 0x01
     236:	2c 81       	ldd	r18, Y+4	; 0x04
     238:	3d 81       	ldd	r19, Y+5	; 0x05
     23a:	a9 01       	movw	r20, r18
     23c:	60 e0       	ldi	r22, 0x00	; 0
     23e:	70 e0       	ldi	r23, 0x00	; 0
     240:	0e 94 71 08 	call	0x10e2	; 0x10e2 <memset>
}
     244:	00 00       	nop
     246:	0f 90       	pop	r0
     248:	0f 90       	pop	r0
     24a:	0f 90       	pop	r0
     24c:	0f 90       	pop	r0
     24e:	0f 90       	pop	r0
     250:	df 91       	pop	r29
     252:	cf 91       	pop	r28
     254:	08 95       	ret

00000256 <initCommandProtocolAddr>:
  if (inAddr == CMD_UART_GLOBAL_CMD_ADDR) {
    // disable MPCM mode, start looking for data bytes
    return TRUE;
  }
  return FALSE;
}
     256:	cf 93       	push	r28
     258:	df 93       	push	r29
     25a:	1f 92       	push	r1
     25c:	cd b7       	in	r28, 0x3d	; 61
     25e:	de b7       	in	r29, 0x3e	; 62
     260:	89 83       	std	Y+1, r24	; 0x01
     262:	0e 94 4c 01 	call	0x298	; 0x298 <getCommandProtocolAddr>
     266:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <myAddress>
     26a:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <myAddress>
     26e:	88 23       	and	r24, r24
     270:	71 f4       	brne	.+28     	; 0x28e <initCommandProtocolAddr+0x38>
     272:	89 81       	ldd	r24, Y+1	; 0x01
     274:	88 23       	and	r24, r24
     276:	21 f0       	breq	.+8      	; 0x280 <initCommandProtocolAddr+0x2a>
     278:	89 81       	ldd	r24, Y+1	; 0x01
     27a:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <myAddress>
     27e:	03 c0       	rjmp	.+6      	; 0x286 <initCommandProtocolAddr+0x30>
     280:	81 e0       	ldi	r24, 0x01	; 1
     282:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <myAddress>
     286:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <myAddress>
     28a:	0e 94 57 01 	call	0x2ae	; 0x2ae <setCommandProtocolAddr>
     28e:	00 00       	nop
     290:	0f 90       	pop	r0
     292:	df 91       	pop	r29
     294:	cf 91       	pop	r28
     296:	08 95       	ret

00000298 <getCommandProtocolAddr>:
     298:	cf 93       	push	r28
     29a:	df 93       	push	r29
     29c:	cd b7       	in	r28, 0x3d	; 61
     29e:	de b7       	in	r29, 0x3e	; 62
     2a0:	80 e0       	ldi	r24, 0x00	; 0
     2a2:	90 e0       	ldi	r25, 0x00	; 0
     2a4:	0e 94 43 0b 	call	0x1686	; 0x1686 <eeprom_read_byte>
     2a8:	df 91       	pop	r29
     2aa:	cf 91       	pop	r28
     2ac:	08 95       	ret

000002ae <setCommandProtocolAddr>:
     2ae:	cf 93       	push	r28
     2b0:	df 93       	push	r29
     2b2:	1f 92       	push	r1
     2b4:	cd b7       	in	r28, 0x3d	; 61
     2b6:	de b7       	in	r29, 0x3e	; 62
     2b8:	89 83       	std	Y+1, r24	; 0x01
     2ba:	89 81       	ldd	r24, Y+1	; 0x01
     2bc:	88 23       	and	r24, r24
     2be:	11 f4       	brne	.+4      	; 0x2c4 <setCommandProtocolAddr+0x16>
     2c0:	81 e0       	ldi	r24, 0x01	; 1
     2c2:	09 c0       	rjmp	.+18     	; 0x2d6 <setCommandProtocolAddr+0x28>
     2c4:	89 81       	ldd	r24, Y+1	; 0x01
     2c6:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <myAddress>
     2ca:	69 81       	ldd	r22, Y+1	; 0x01
     2cc:	80 e0       	ldi	r24, 0x00	; 0
     2ce:	90 e0       	ldi	r25, 0x00	; 0
     2d0:	0e 94 4b 0b 	call	0x1696	; 0x1696 <eeprom_write_byte>
     2d4:	80 e0       	ldi	r24, 0x00	; 0
     2d6:	0f 90       	pop	r0
     2d8:	df 91       	pop	r29
     2da:	cf 91       	pop	r28
     2dc:	08 95       	ret

000002de <sendMsg>:
/************************************************************************
 * sendMsg:
 * 
 * Routine is inline to avoid extra function calls in ISR
 ************************************************************************/
void sendMsg(void) {
     2de:	cf 93       	push	r28
     2e0:	df 93       	push	r29
     2e2:	cd b7       	in	r28, 0x3d	; 61
     2e4:	de b7       	in	r29, 0x3e	; 62
  if (rxAddrGlobal) {
     2e6:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <rxAddrGlobal>
     2ea:	88 23       	and	r24, r24
     2ec:	49 f0       	breq	.+18     	; 0x300 <sendMsg+0x22>
    memset(sprintbuf, 0, sizeof(sprintbuf));
     2ee:	40 e5       	ldi	r20, 0x50	; 80
     2f0:	50 e0       	ldi	r21, 0x00	; 0
     2f2:	60 e0       	ldi	r22, 0x00	; 0
     2f4:	70 e0       	ldi	r23, 0x00	; 0
     2f6:	8a ec       	ldi	r24, 0xCA	; 202
     2f8:	91 e0       	ldi	r25, 0x01	; 1
     2fa:	0e 94 71 08 	call	0x10e2	; 0x10e2 <memset>
    return; // don't send messages for global cmd
     2fe:	11 c0       	rjmp	.+34     	; 0x322 <sendMsg+0x44>
  }
  uartSendBuffer(sprintbuf,strlen(sprintbuf));
     300:	8a ec       	ldi	r24, 0xCA	; 202
     302:	91 e0       	ldi	r25, 0x01	; 1
     304:	0e 94 7f 08 	call	0x10fe	; 0x10fe <strlen>
     308:	bc 01       	movw	r22, r24
     30a:	8a ec       	ldi	r24, 0xCA	; 202
     30c:	91 e0       	ldi	r25, 0x01	; 1
     30e:	0e 94 16 04 	call	0x82c	; 0x82c <uartSendBuffer>
  memset(sprintbuf, 0, sizeof(sprintbuf));
     312:	40 e5       	ldi	r20, 0x50	; 80
     314:	50 e0       	ldi	r21, 0x00	; 0
     316:	60 e0       	ldi	r22, 0x00	; 0
     318:	70 e0       	ldi	r23, 0x00	; 0
     31a:	8a ec       	ldi	r24, 0xCA	; 202
     31c:	91 e0       	ldi	r25, 0x01	; 1
     31e:	0e 94 71 08 	call	0x10e2	; 0x10e2 <memset>
}
     322:	df 91       	pop	r29
     324:	cf 91       	pop	r28
     326:	08 95       	ret

00000328 <beginCmdProcessing>:
/************************************************************************
 * Set up state to process a command.
 *
 * args? [data] [crc code] ?
 ************************************************************************/
void beginCmdProcessing(void) {
     328:	cf 93       	push	r28
     32a:	df 93       	push	r29
     32c:	cd b7       	in	r28, 0x3d	; 61
     32e:	de b7       	in	r29, 0x3e	; 62
  rxCommandProcessing = TRUE; // cmd interpretation in progress
     330:	8f ef       	ldi	r24, 0xFF	; 255
     332:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <rxCommandProcessing>
  rxCompleteFlag = FALSE;
     336:	10 92 c8 01 	sts	0x01C8, r1	; 0x8001c8 <rxCompleteFlag>
}
     33a:	00 00       	nop
     33c:	df 91       	pop	r29
     33e:	cf 91       	pop	r28
     340:	08 95       	ret

00000342 <endCmdProcessing>:
/************************************************************************
 * Set up state after done processing a command.
 *
 * args? [data] [crc code] ?
 ************************************************************************/
void endCmdProcessing(void) {
     342:	cf 93       	push	r28
     344:	df 93       	push	r29
     346:	cd b7       	in	r28, 0x3d	; 61
     348:	de b7       	in	r29, 0x3e	; 62
  bufferClear(&uartRxBuffer,UART_RX_BUFFER_SIZE); // clear to get another cmd, so send response.
     34a:	60 e4       	ldi	r22, 0x40	; 64
     34c:	70 e0       	ldi	r23, 0x00	; 0
     34e:	8f e6       	ldi	r24, 0x6F	; 111
     350:	97 e0       	ldi	r25, 0x07	; 7
     352:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <bufferClear>
  if (!customResponse) { // always send a "k" if we're not sending something else.
     356:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <customResponse>
     35a:	88 23       	and	r24, r24
     35c:	a1 f4       	brne	.+40     	; 0x386 <endCmdProcessing+0x44>
    sprintf_P(sprintbuf,PSTR("k$"));
     35e:	88 e6       	ldi	r24, 0x68	; 104
     360:	90 e0       	ldi	r25, 0x00	; 0
     362:	29 2f       	mov	r18, r25
     364:	2f 93       	push	r18
     366:	8f 93       	push	r24
     368:	8a ec       	ldi	r24, 0xCA	; 202
     36a:	91 e0       	ldi	r25, 0x01	; 1
     36c:	89 2f       	mov	r24, r25
     36e:	8f 93       	push	r24
     370:	8a ec       	ldi	r24, 0xCA	; 202
     372:	91 e0       	ldi	r25, 0x01	; 1
     374:	8f 93       	push	r24
     376:	0e 94 90 08 	call	0x1120	; 0x1120 <sprintf_P>
     37a:	0f 90       	pop	r0
     37c:	0f 90       	pop	r0
     37e:	0f 90       	pop	r0
     380:	0f 90       	pop	r0
    sendMsg();
     382:	0e 94 6f 01 	call	0x2de	; 0x2de <sendMsg>
  }
  customResponse = FALSE; // reset state
     386:	10 92 83 01 	sts	0x0183, r1	; 0x800183 <customResponse>
  rxAddrGlobal = FALSE; // reset address state. this was saved to mute responses on global cmds.
     38a:	10 92 c9 01 	sts	0x01C9, r1	; 0x8001c9 <rxAddrGlobal>
  rxCommandProcessing = FALSE; // command interpretation and response done
     38e:	10 92 1a 02 	sts	0x021A, r1	; 0x80021a <rxCommandProcessing>
}
     392:	00 00       	nop
     394:	df 91       	pop	r29
     396:	cf 91       	pop	r28
     398:	08 95       	ret

0000039a <pointToNextNonNumericChar>:
 *
 * Modify the pointer passed in to point to next non-numeric char.
 * We need the argument passed by address so we can modify the
 * caller's storage.
 *********************************************************************/
void pointToNextNonNumericChar(unsigned char **ppRxDataStr) {
     39a:	cf 93       	push	r28
     39c:	df 93       	push	r29
     39e:	00 d0       	rcall	.+0      	; 0x3a0 <pointToNextNonNumericChar+0x6>
     3a0:	cd b7       	in	r28, 0x3d	; 61
     3a2:	de b7       	in	r29, 0x3e	; 62
     3a4:	9a 83       	std	Y+2, r25	; 0x02
     3a6:	89 83       	std	Y+1, r24	; 0x01
 /* Count the digits. Numbers are 0x30 < n < 0x39 */
  while((**ppRxDataStr >= 0x30) & (**ppRxDataStr <= 0x39)) {
     3a8:	0d c0       	rjmp	.+26     	; 0x3c4 <pointToNextNonNumericChar+0x2a>
    (*ppRxDataStr)++;
     3aa:	89 81       	ldd	r24, Y+1	; 0x01
     3ac:	9a 81       	ldd	r25, Y+2	; 0x02
     3ae:	fc 01       	movw	r30, r24
     3b0:	80 81       	ld	r24, Z
     3b2:	91 81       	ldd	r25, Z+1	; 0x01
     3b4:	9c 01       	movw	r18, r24
     3b6:	2f 5f       	subi	r18, 0xFF	; 255
     3b8:	3f 4f       	sbci	r19, 0xFF	; 255
     3ba:	89 81       	ldd	r24, Y+1	; 0x01
     3bc:	9a 81       	ldd	r25, Y+2	; 0x02
     3be:	fc 01       	movw	r30, r24
     3c0:	31 83       	std	Z+1, r19	; 0x01
     3c2:	20 83       	st	Z, r18
 * We need the argument passed by address so we can modify the
 * caller's storage.
 *********************************************************************/
void pointToNextNonNumericChar(unsigned char **ppRxDataStr) {
 /* Count the digits. Numbers are 0x30 < n < 0x39 */
  while((**ppRxDataStr >= 0x30) & (**ppRxDataStr <= 0x39)) {
     3c4:	89 81       	ldd	r24, Y+1	; 0x01
     3c6:	9a 81       	ldd	r25, Y+2	; 0x02
     3c8:	fc 01       	movw	r30, r24
     3ca:	80 81       	ld	r24, Z
     3cc:	91 81       	ldd	r25, Z+1	; 0x01
     3ce:	fc 01       	movw	r30, r24
     3d0:	80 81       	ld	r24, Z
     3d2:	21 e0       	ldi	r18, 0x01	; 1
     3d4:	80 33       	cpi	r24, 0x30	; 48
     3d6:	08 f4       	brcc	.+2      	; 0x3da <pointToNextNonNumericChar+0x40>
     3d8:	20 e0       	ldi	r18, 0x00	; 0
     3da:	89 81       	ldd	r24, Y+1	; 0x01
     3dc:	9a 81       	ldd	r25, Y+2	; 0x02
     3de:	fc 01       	movw	r30, r24
     3e0:	80 81       	ld	r24, Z
     3e2:	91 81       	ldd	r25, Z+1	; 0x01
     3e4:	fc 01       	movw	r30, r24
     3e6:	90 81       	ld	r25, Z
     3e8:	81 e0       	ldi	r24, 0x01	; 1
     3ea:	9a 33       	cpi	r25, 0x3A	; 58
     3ec:	08 f0       	brcs	.+2      	; 0x3f0 <pointToNextNonNumericChar+0x56>
     3ee:	80 e0       	ldi	r24, 0x00	; 0
     3f0:	82 23       	and	r24, r18
     3f2:	88 23       	and	r24, r24
     3f4:	d1 f6       	brne	.-76     	; 0x3aa <pointToNextNonNumericChar+0x10>
    (*ppRxDataStr)++;
  }
     3f6:	00 00       	nop
     3f8:	0f 90       	pop	r0
     3fa:	0f 90       	pop	r0
     3fc:	df 91       	pop	r29
     3fe:	cf 91       	pop	r28
     400:	08 95       	ret

00000402 <main>:


/**************************************************
 * Start of pgm:
 */
int main(void) {
     402:	cf 93       	push	r28
     404:	df 93       	push	r29
     406:	cd b7       	in	r28, 0x3d	; 61
     408:	de b7       	in	r29, 0x3e	; 62
	
	DDRD |= (1 << DDD3); // set PD3 to OUTPUT
     40a:	8a e2       	ldi	r24, 0x2A	; 42
     40c:	90 e0       	ldi	r25, 0x00	; 0
     40e:	2a e2       	ldi	r18, 0x2A	; 42
     410:	30 e0       	ldi	r19, 0x00	; 0
     412:	f9 01       	movw	r30, r18
     414:	20 81       	ld	r18, Z
     416:	28 60       	ori	r18, 0x08	; 8
     418:	fc 01       	movw	r30, r24
     41a:	20 83       	st	Z, r18
	DDRD |= (1 << DDD4); // set PD4 to OUTPUT
     41c:	8a e2       	ldi	r24, 0x2A	; 42
     41e:	90 e0       	ldi	r25, 0x00	; 0
     420:	2a e2       	ldi	r18, 0x2A	; 42
     422:	30 e0       	ldi	r19, 0x00	; 0
     424:	f9 01       	movw	r30, r18
     426:	20 81       	ld	r18, Z
     428:	20 61       	ori	r18, 0x10	; 16
     42a:	fc 01       	movw	r30, r24
     42c:	20 83       	st	Z, r18
  
  uartInit();
     42e:	0e 94 4a 03 	call	0x694	; 0x694 <uartInit>
  uartSetBaudRate(9600);
     432:	60 e8       	ldi	r22, 0x80	; 128
     434:	75 e2       	ldi	r23, 0x25	; 37
     436:	80 e0       	ldi	r24, 0x00	; 0
     438:	90 e0       	ldi	r25, 0x00	; 0
     43a:	0e 94 95 03 	call	0x72a	; 0x72a <uartSetBaudRate>
  
  // set address, if not already in eeprom
  initCommandProtocolAddr(CMD_UART_THIS_DEVICE_ADDRESS);
     43e:	81 e0       	ldi	r24, 0x01	; 1
     440:	0e 94 2b 01 	call	0x256	; 0x256 <initCommandProtocolAddr>
  
  /* Loop forever, handle uart messages if we get any */
  while (1) {
    u08 rc; 
    
    if (rxCompleteFlag) {
     444:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <rxCompleteFlag>
     448:	88 23       	and	r24, r24
     44a:	e1 f3       	breq	.-8      	; 0x444 <main+0x42>
      beginCmdProcessing(); // follow command protocol
     44c:	0e 94 94 01 	call	0x328	; 0x328 <beginCmdProcessing>
      processCmd(); // interpret the current waiting command
     450:	0e 94 2d 02 	call	0x45a	; 0x45a <processCmd>
      endCmdProcessing(); // follow command protocol
     454:	0e 94 a1 01 	call	0x342	; 0x342 <endCmdProcessing>
    }
    
  }
     458:	f5 cf       	rjmp	.-22     	; 0x444 <main+0x42>

0000045a <processCmd>:
 * unless this unit is stuck and does not respond within the specified 
 * response timeout time, 5ms.
 *
 * After successful command processing, send an ack message back to master.
 *********************************************************************/
void processCmd() {
     45a:	cf 93       	push	r28
     45c:	df 93       	push	r29
     45e:	00 d0       	rcall	.+0      	; 0x460 <processCmd+0x6>
     460:	00 d0       	rcall	.+0      	; 0x462 <processCmd+0x8>
     462:	00 d0       	rcall	.+0      	; 0x464 <processCmd+0xa>
     464:	cd b7       	in	r28, 0x3d	; 61
     466:	de b7       	in	r29, 0x3e	; 62
  u08 rc; // return code from handler funcs
  // get a pointer to the data portion of RX buffer
  cBuffer* myRxBufferPtr;
  unsigned char * myRxBufferDataPtr;
  myRxBufferPtr = uartGetRxBuffer();
     468:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <uartGetRxBuffer>
     46c:	9a 83       	std	Y+2, r25	; 0x02
     46e:	89 83       	std	Y+1, r24	; 0x01
  myRxBufferDataPtr = myRxBufferPtr->dataptr;
     470:	89 81       	ldd	r24, Y+1	; 0x01
     472:	9a 81       	ldd	r25, Y+2	; 0x02
     474:	fc 01       	movw	r30, r24
     476:	80 81       	ld	r24, Z
     478:	91 81       	ldd	r25, Z+1	; 0x01
     47a:	9e 83       	std	Y+6, r25	; 0x06
     47c:	8d 83       	std	Y+5, r24	; 0x05
  
  while (*myRxBufferDataPtr) { // do until we are at the null term (end of cmd)
     47e:	dc c0       	rjmp	.+440    	; 0x638 <processCmd+0x1de>
    switch(*myRxBufferDataPtr++) { // get a char and then increment ptr
     480:	8d 81       	ldd	r24, Y+5	; 0x05
     482:	9e 81       	ldd	r25, Y+6	; 0x06
     484:	9c 01       	movw	r18, r24
     486:	2f 5f       	subi	r18, 0xFF	; 255
     488:	3f 4f       	sbci	r19, 0xFF	; 255
     48a:	3e 83       	std	Y+6, r19	; 0x06
     48c:	2d 83       	std	Y+5, r18	; 0x05
     48e:	fc 01       	movw	r30, r24
     490:	80 81       	ld	r24, Z
     492:	88 2f       	mov	r24, r24
     494:	90 e0       	ldi	r25, 0x00	; 0
     496:	81 36       	cpi	r24, 0x61	; 97
     498:	91 05       	cpc	r25, r1
     49a:	91 f0       	breq	.+36     	; 0x4c0 <processCmd+0x66>
     49c:	82 36       	cpi	r24, 0x62	; 98
     49e:	91 05       	cpc	r25, r1
     4a0:	44 f4       	brge	.+16     	; 0x4b2 <processCmd+0x58>
     4a2:	82 34       	cpi	r24, 0x42	; 66
     4a4:	91 05       	cpc	r25, r1
     4a6:	91 f1       	breq	.+100    	; 0x50c <processCmd+0xb2>
     4a8:	87 34       	cpi	r24, 0x47	; 71
     4aa:	91 05       	cpc	r25, r1
     4ac:	09 f4       	brne	.+2      	; 0x4b0 <processCmd+0x56>
     4ae:	3e c0       	rjmp	.+124    	; 0x52c <processCmd+0xd2>
     4b0:	ae c0       	rjmp	.+348    	; 0x60e <processCmd+0x1b4>
     4b2:	82 36       	cpi	r24, 0x62	; 98
     4b4:	91 05       	cpc	r25, r1
     4b6:	51 f1       	breq	.+84     	; 0x50c <processCmd+0xb2>
     4b8:	87 36       	cpi	r24, 0x67	; 103
     4ba:	91 05       	cpc	r25, r1
     4bc:	b9 f1       	breq	.+110    	; 0x52c <processCmd+0xd2>
     4be:	a7 c0       	rjmp	.+334    	; 0x60e <processCmd+0x1b4>
      // SET Address
      case 'a':
        rc = setCommandProtocolAddr(atoi((char *)myRxBufferDataPtr));
     4c0:	8d 81       	ldd	r24, Y+5	; 0x05
     4c2:	9e 81       	ldd	r25, Y+6	; 0x06
     4c4:	0e 94 53 08 	call	0x10a6	; 0x10a6 <atoi>
     4c8:	0e 94 57 01 	call	0x2ae	; 0x2ae <setCommandProtocolAddr>
     4cc:	8b 83       	std	Y+3, r24	; 0x03
        if (rc) {
     4ce:	8b 81       	ldd	r24, Y+3	; 0x03
     4d0:	88 23       	and	r24, r24
     4d2:	b9 f0       	breq	.+46     	; 0x502 <processCmd+0xa8>
          customResponse = TRUE;
     4d4:	8f ef       	ldi	r24, 0xFF	; 255
     4d6:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <customResponse>
          sprintf_P(sprintbuf,PSTR("err-badaddr$"));
     4da:	8b e6       	ldi	r24, 0x6B	; 107
     4dc:	90 e0       	ldi	r25, 0x00	; 0
     4de:	29 2f       	mov	r18, r25
     4e0:	2f 93       	push	r18
     4e2:	8f 93       	push	r24
     4e4:	8a ec       	ldi	r24, 0xCA	; 202
     4e6:	91 e0       	ldi	r25, 0x01	; 1
     4e8:	89 2f       	mov	r24, r25
     4ea:	8f 93       	push	r24
     4ec:	8a ec       	ldi	r24, 0xCA	; 202
     4ee:	91 e0       	ldi	r25, 0x01	; 1
     4f0:	8f 93       	push	r24
     4f2:	0e 94 90 08 	call	0x1120	; 0x1120 <sprintf_P>
     4f6:	0f 90       	pop	r0
     4f8:	0f 90       	pop	r0
     4fa:	0f 90       	pop	r0
     4fc:	0f 90       	pop	r0
          sendMsg();
     4fe:	0e 94 6f 01 	call	0x2de	; 0x2de <sendMsg>
        }
        // use EEPROM to store address between powerups. Only reprogram on non-global addr.
        pointToNextNonNumericChar(&myRxBufferDataPtr);
     502:	ce 01       	movw	r24, r28
     504:	05 96       	adiw	r24, 0x05	; 5
     506:	0e 94 cd 01 	call	0x39a	; 0x39a <pointToNextNonNumericChar>
        break; // End 'a' command
     50a:	96 c0       	rjmp	.+300    	; 0x638 <processCmd+0x1de>
       
      // Input Data String into a volatile variable on the arduino
      case 'b': case 'B':
        //; // "a label can only be a part of a statement" <= the following line declares a variable first
        CRITICAL_SECTION_START;
     50c:	8f e5       	ldi	r24, 0x5F	; 95
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	fc 01       	movw	r30, r24
     512:	80 81       	ld	r24, Z
     514:	8c 83       	std	Y+4, r24	; 0x04
     516:	f8 94       	cli
        setVolatileString(myRxBufferDataPtr);
     518:	8d 81       	ldd	r24, Y+5	; 0x05
     51a:	9e 81       	ldd	r25, Y+6	; 0x06
     51c:	0e 94 2d 03 	call	0x65a	; 0x65a <setVolatileString>
        CRITICAL_SECTION_END;
     520:	8f e5       	ldi	r24, 0x5F	; 95
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	2c 81       	ldd	r18, Y+4	; 0x04
     526:	fc 01       	movw	r30, r24
     528:	20 83       	st	Z, r18
        break; // End 'b' command
     52a:	86 c0       	rjmp	.+268    	; 0x638 <processCmd+0x1de>
       
      // Get info
      case 'g': case 'G':
        // Indicate to cmd protocol that we are sending a custom ack
        customResponse = TRUE;
     52c:	8f ef       	ldi	r24, 0xFF	; 255
     52e:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <customResponse>
        // select sub-command
        switch(*myRxBufferDataPtr++) {
     532:	8d 81       	ldd	r24, Y+5	; 0x05
     534:	9e 81       	ldd	r25, Y+6	; 0x06
     536:	9c 01       	movw	r18, r24
     538:	2f 5f       	subi	r18, 0xFF	; 255
     53a:	3f 4f       	sbci	r19, 0xFF	; 255
     53c:	3e 83       	std	Y+6, r19	; 0x06
     53e:	2d 83       	std	Y+5, r18	; 0x05
     540:	fc 01       	movw	r30, r24
     542:	80 81       	ld	r24, Z
     544:	88 2f       	mov	r24, r24
     546:	90 e0       	ldi	r25, 0x00	; 0
     548:	82 34       	cpi	r24, 0x42	; 66
     54a:	91 05       	cpc	r25, r1
     54c:	71 f1       	breq	.+92     	; 0x5aa <processCmd+0x150>
     54e:	83 34       	cpi	r24, 0x43	; 67
     550:	91 05       	cpc	r25, r1
     552:	24 f4       	brge	.+8      	; 0x55c <processCmd+0x102>
     554:	81 34       	cpi	r24, 0x41	; 65
     556:	91 05       	cpc	r25, r1
     558:	41 f0       	breq	.+16     	; 0x56a <processCmd+0x110>
     55a:	44 c0       	rjmp	.+136    	; 0x5e4 <processCmd+0x18a>
     55c:	81 36       	cpi	r24, 0x61	; 97
     55e:	91 05       	cpc	r25, r1
     560:	21 f0       	breq	.+8      	; 0x56a <processCmd+0x110>
     562:	82 36       	cpi	r24, 0x62	; 98
     564:	91 05       	cpc	r25, r1
     566:	09 f1       	breq	.+66     	; 0x5aa <processCmd+0x150>
     568:	3d c0       	rjmp	.+122    	; 0x5e4 <processCmd+0x18a>
          case 'a': case 'A':
            sprintf_P(sprintbuf, PSTR("g%d$"), getCommandProtocolAddr());
     56a:	0e 94 4c 01 	call	0x298	; 0x298 <getCommandProtocolAddr>
     56e:	28 2f       	mov	r18, r24
     570:	30 e0       	ldi	r19, 0x00	; 0
     572:	88 e7       	ldi	r24, 0x78	; 120
     574:	90 e0       	ldi	r25, 0x00	; 0
     576:	43 2f       	mov	r20, r19
     578:	4f 93       	push	r20
     57a:	2f 93       	push	r18
     57c:	29 2f       	mov	r18, r25
     57e:	2f 93       	push	r18
     580:	8f 93       	push	r24
     582:	8a ec       	ldi	r24, 0xCA	; 202
     584:	91 e0       	ldi	r25, 0x01	; 1
     586:	89 2f       	mov	r24, r25
     588:	8f 93       	push	r24
     58a:	8a ec       	ldi	r24, 0xCA	; 202
     58c:	91 e0       	ldi	r25, 0x01	; 1
     58e:	8f 93       	push	r24
     590:	0e 94 90 08 	call	0x1120	; 0x1120 <sprintf_P>
     594:	0f 90       	pop	r0
     596:	0f 90       	pop	r0
     598:	0f 90       	pop	r0
     59a:	0f 90       	pop	r0
     59c:	0f 90       	pop	r0
     59e:	0f 90       	pop	r0
            // SPECIAL CASE!! we WANT to get the address back on a global command!
            // You can only have ONE device on the net for this to work. Otherwise, user beware!
            rxAddrGlobal = FALSE;
     5a0:	10 92 c9 01 	sts	0x01C9, r1	; 0x8001c9 <rxAddrGlobal>
            sendMsg();
     5a4:	0e 94 6f 01 	call	0x2de	; 0x2de <sendMsg>
            break;
     5a8:	31 c0       	rjmp	.+98     	; 0x60c <processCmd+0x1b2>
          
          case 'b': case 'B':
            sprintf_P(sprintbuf, PSTR("g%s$"), getVolatileString());
     5aa:	0e 94 41 03 	call	0x682	; 0x682 <getVolatileString>
     5ae:	9c 01       	movw	r18, r24
     5b0:	8d e7       	ldi	r24, 0x7D	; 125
     5b2:	90 e0       	ldi	r25, 0x00	; 0
     5b4:	43 2f       	mov	r20, r19
     5b6:	4f 93       	push	r20
     5b8:	2f 93       	push	r18
     5ba:	29 2f       	mov	r18, r25
     5bc:	2f 93       	push	r18
     5be:	8f 93       	push	r24
     5c0:	8a ec       	ldi	r24, 0xCA	; 202
     5c2:	91 e0       	ldi	r25, 0x01	; 1
     5c4:	89 2f       	mov	r24, r25
     5c6:	8f 93       	push	r24
     5c8:	8a ec       	ldi	r24, 0xCA	; 202
     5ca:	91 e0       	ldi	r25, 0x01	; 1
     5cc:	8f 93       	push	r24
     5ce:	0e 94 90 08 	call	0x1120	; 0x1120 <sprintf_P>
     5d2:	0f 90       	pop	r0
     5d4:	0f 90       	pop	r0
     5d6:	0f 90       	pop	r0
     5d8:	0f 90       	pop	r0
     5da:	0f 90       	pop	r0
     5dc:	0f 90       	pop	r0
            sendMsg();
     5de:	0e 94 6f 01 	call	0x2de	; 0x2de <sendMsg>
            break;
     5e2:	14 c0       	rjmp	.+40     	; 0x60c <processCmd+0x1b2>
            
          default:
            sprintf_P(sprintbuf,PSTR("err-getnoprop$"));
     5e4:	82 e8       	ldi	r24, 0x82	; 130
     5e6:	90 e0       	ldi	r25, 0x00	; 0
     5e8:	29 2f       	mov	r18, r25
     5ea:	2f 93       	push	r18
     5ec:	8f 93       	push	r24
     5ee:	8a ec       	ldi	r24, 0xCA	; 202
     5f0:	91 e0       	ldi	r25, 0x01	; 1
     5f2:	89 2f       	mov	r24, r25
     5f4:	8f 93       	push	r24
     5f6:	8a ec       	ldi	r24, 0xCA	; 202
     5f8:	91 e0       	ldi	r25, 0x01	; 1
     5fa:	8f 93       	push	r24
     5fc:	0e 94 90 08 	call	0x1120	; 0x1120 <sprintf_P>
     600:	0f 90       	pop	r0
     602:	0f 90       	pop	r0
     604:	0f 90       	pop	r0
     606:	0f 90       	pop	r0
            sendMsg();
     608:	0e 94 6f 01 	call	0x2de	; 0x2de <sendMsg>
        }
        break; // end 'g' command
     60c:	15 c0       	rjmp	.+42     	; 0x638 <processCmd+0x1de>
        
      default:
        customResponse = TRUE;
     60e:	8f ef       	ldi	r24, 0xFF	; 255
     610:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <customResponse>
        sprintf_P(sprintbuf, PSTR("err-cmd$"));
     614:	81 e9       	ldi	r24, 0x91	; 145
     616:	90 e0       	ldi	r25, 0x00	; 0
     618:	29 2f       	mov	r18, r25
     61a:	2f 93       	push	r18
     61c:	8f 93       	push	r24
     61e:	8a ec       	ldi	r24, 0xCA	; 202
     620:	91 e0       	ldi	r25, 0x01	; 1
     622:	89 2f       	mov	r24, r25
     624:	8f 93       	push	r24
     626:	8a ec       	ldi	r24, 0xCA	; 202
     628:	91 e0       	ldi	r25, 0x01	; 1
     62a:	8f 93       	push	r24
     62c:	0e 94 90 08 	call	0x1120	; 0x1120 <sprintf_P>
     630:	0f 90       	pop	r0
     632:	0f 90       	pop	r0
     634:	0f 90       	pop	r0
     636:	0f 90       	pop	r0
  cBuffer* myRxBufferPtr;
  unsigned char * myRxBufferDataPtr;
  myRxBufferPtr = uartGetRxBuffer();
  myRxBufferDataPtr = myRxBufferPtr->dataptr;
  
  while (*myRxBufferDataPtr) { // do until we are at the null term (end of cmd)
     638:	8d 81       	ldd	r24, Y+5	; 0x05
     63a:	9e 81       	ldd	r25, Y+6	; 0x06
     63c:	fc 01       	movw	r30, r24
     63e:	80 81       	ld	r24, Z
     640:	88 23       	and	r24, r24
     642:	09 f0       	breq	.+2      	; 0x646 <processCmd+0x1ec>
     644:	1d cf       	rjmp	.-454    	; 0x480 <processCmd+0x26>
      default:
        customResponse = TRUE;
        sprintf_P(sprintbuf, PSTR("err-cmd$"));
    } // end switch on command
  } // end while more data
}
     646:	00 00       	nop
     648:	26 96       	adiw	r28, 0x06	; 6
     64a:	0f b6       	in	r0, 0x3f	; 63
     64c:	f8 94       	cli
     64e:	de bf       	out	0x3e, r29	; 62
     650:	0f be       	out	0x3f, r0	; 63
     652:	cd bf       	out	0x3d, r28	; 61
     654:	df 91       	pop	r29
     656:	cf 91       	pop	r28
     658:	08 95       	ret

0000065a <setVolatileString>:

void setVolatileString(unsigned char *newString) {
     65a:	cf 93       	push	r28
     65c:	df 93       	push	r29
     65e:	00 d0       	rcall	.+0      	; 0x660 <setVolatileString+0x6>
     660:	cd b7       	in	r28, 0x3d	; 61
     662:	de b7       	in	r29, 0x3e	; 62
     664:	9a 83       	std	Y+2, r25	; 0x02
     666:	89 83       	std	Y+1, r24	; 0x01
  // limit the copy to 
  if (sizeof(newString) >= 39) { // sizeof does ptr len or string+null len??
    strncpy((char *)&myVolatileStr, (char *)newString, 39);
  } else {
    strcpy((char *)&myVolatileStr, (char *)newString);
     668:	89 81       	ldd	r24, Y+1	; 0x01
     66a:	9a 81       	ldd	r25, Y+2	; 0x02
     66c:	bc 01       	movw	r22, r24
     66e:	86 e4       	ldi	r24, 0x46	; 70
     670:	97 e0       	ldi	r25, 0x07	; 7
     672:	0e 94 78 08 	call	0x10f0	; 0x10f0 <strcpy>
  }  
}
     676:	00 00       	nop
     678:	0f 90       	pop	r0
     67a:	0f 90       	pop	r0
     67c:	df 91       	pop	r29
     67e:	cf 91       	pop	r28
     680:	08 95       	ret

00000682 <getVolatileString>:

unsigned char * getVolatileString(void) {
     682:	cf 93       	push	r28
     684:	df 93       	push	r29
     686:	cd b7       	in	r28, 0x3d	; 61
     688:	de b7       	in	r29, 0x3e	; 62
  return &myVolatileStr;
     68a:	86 e4       	ldi	r24, 0x46	; 70
     68c:	97 e0       	ldi	r25, 0x07	; 7
}
     68e:	df 91       	pop	r29
     690:	cf 91       	pop	r28
     692:	08 95       	ret

00000694 <uartInit>:
	// send the first byte to get things going by interrupts
  #ifdef UART_USE_RS485
  uart485OutputEnable();
  #endif
	uartSendByte(bufferGetFromFront(&uartTxBuffer));
}
     694:	cf 93       	push	r28
     696:	df 93       	push	r29
     698:	1f 92       	push	r1
     69a:	cd b7       	in	r28, 0x3d	; 61
     69c:	de b7       	in	r29, 0x3e	; 62
     69e:	8f e5       	ldi	r24, 0x5F	; 95
     6a0:	90 e0       	ldi	r25, 0x00	; 0
     6a2:	fc 01       	movw	r30, r24
     6a4:	80 81       	ld	r24, Z
     6a6:	89 83       	std	Y+1, r24	; 0x01
     6a8:	f8 94       	cli
     6aa:	0e 94 7d 03 	call	0x6fa	; 0x6fa <uartInitBuffers>
     6ae:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <UartRxFunc+0x1>
     6b2:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <UartRxFunc>
     6b6:	81 ec       	ldi	r24, 0xC1	; 193
     6b8:	90 e0       	ldi	r25, 0x00	; 0
     6ba:	28 ed       	ldi	r18, 0xD8	; 216
     6bc:	fc 01       	movw	r30, r24
     6be:	20 83       	st	Z, r18
     6c0:	60 e0       	ldi	r22, 0x00	; 0
     6c2:	7b e4       	ldi	r23, 0x4B	; 75
     6c4:	80 e0       	ldi	r24, 0x00	; 0
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	0e 94 95 03 	call	0x72a	; 0x72a <uartSetBaudRate>
     6cc:	8f ef       	ldi	r24, 0xFF	; 255
     6ce:	80 93 6e 07 	sts	0x076E, r24	; 0x80076e <uartReadyTx>
     6d2:	10 92 77 07 	sts	0x0777, r1	; 0x800777 <uartBufferedTx>
     6d6:	10 92 83 07 	sts	0x0783, r1	; 0x800783 <uartRxOverflow+0x1>
     6da:	10 92 82 07 	sts	0x0782, r1	; 0x800782 <uartRxOverflow>
     6de:	0e 94 7d 05 	call	0xafa	; 0xafa <uart485OutputDisable>
     6e2:	0e 94 8e 05 	call	0xb1c	; 0xb1c <uart485EnableDriverCntlPin>
     6e6:	8f e5       	ldi	r24, 0x5F	; 95
     6e8:	90 e0       	ldi	r25, 0x00	; 0
     6ea:	29 81       	ldd	r18, Y+1	; 0x01
     6ec:	fc 01       	movw	r30, r24
     6ee:	20 83       	st	Z, r18
     6f0:	00 00       	nop
     6f2:	0f 90       	pop	r0
     6f4:	df 91       	pop	r29
     6f6:	cf 91       	pop	r28
     6f8:	08 95       	ret

000006fa <uartInitBuffers>:
     6fa:	cf 93       	push	r28
     6fc:	df 93       	push	r29
     6fe:	cd b7       	in	r28, 0x3d	; 61
     700:	de b7       	in	r29, 0x3e	; 62
     702:	40 e4       	ldi	r20, 0x40	; 64
     704:	50 e0       	ldi	r21, 0x00	; 0
     706:	60 e0       	ldi	r22, 0x00	; 0
     708:	71 e0       	ldi	r23, 0x01	; 1
     70a:	8f e6       	ldi	r24, 0x6F	; 111
     70c:	97 e0       	ldi	r25, 0x07	; 7
     70e:	0e 94 61 00 	call	0xc2	; 0xc2 <bufferInit>
     712:	40 e4       	ldi	r20, 0x40	; 64
     714:	50 e0       	ldi	r21, 0x00	; 0
     716:	60 e4       	ldi	r22, 0x40	; 64
     718:	71 e0       	ldi	r23, 0x01	; 1
     71a:	8a e7       	ldi	r24, 0x7A	; 122
     71c:	97 e0       	ldi	r25, 0x07	; 7
     71e:	0e 94 61 00 	call	0xc2	; 0xc2 <bufferInit>
     722:	00 00       	nop
     724:	df 91       	pop	r29
     726:	cf 91       	pop	r28
     728:	08 95       	ret

0000072a <uartSetBaudRate>:
     72a:	ef 92       	push	r14
     72c:	ff 92       	push	r15
     72e:	0f 93       	push	r16
     730:	1f 93       	push	r17
     732:	cf 93       	push	r28
     734:	df 93       	push	r29
     736:	00 d0       	rcall	.+0      	; 0x738 <uartSetBaudRate+0xe>
     738:	00 d0       	rcall	.+0      	; 0x73a <uartSetBaudRate+0x10>
     73a:	00 d0       	rcall	.+0      	; 0x73c <uartSetBaudRate+0x12>
     73c:	cd b7       	in	r28, 0x3d	; 61
     73e:	de b7       	in	r29, 0x3e	; 62
     740:	6b 83       	std	Y+3, r22	; 0x03
     742:	7c 83       	std	Y+4, r23	; 0x04
     744:	8d 83       	std	Y+5, r24	; 0x05
     746:	9e 83       	std	Y+6, r25	; 0x06
     748:	8b 81       	ldd	r24, Y+3	; 0x03
     74a:	9c 81       	ldd	r25, Y+4	; 0x04
     74c:	ad 81       	ldd	r26, Y+5	; 0x05
     74e:	be 81       	ldd	r27, Y+6	; 0x06
     750:	80 58       	subi	r24, 0x80	; 128
     752:	9b 47       	sbci	r25, 0x7B	; 123
     754:	a1 4e       	sbci	r26, 0xE1	; 225
     756:	bf 4f       	sbci	r27, 0xFF	; 255
     758:	88 0f       	add	r24, r24
     75a:	99 1f       	adc	r25, r25
     75c:	aa 1f       	adc	r26, r26
     75e:	bb 1f       	adc	r27, r27
     760:	88 0f       	add	r24, r24
     762:	99 1f       	adc	r25, r25
     764:	aa 1f       	adc	r26, r26
     766:	bb 1f       	adc	r27, r27
     768:	88 0f       	add	r24, r24
     76a:	99 1f       	adc	r25, r25
     76c:	aa 1f       	adc	r26, r26
     76e:	bb 1f       	adc	r27, r27
     770:	7c 01       	movw	r14, r24
     772:	8d 01       	movw	r16, r26
     774:	8b 81       	ldd	r24, Y+3	; 0x03
     776:	9c 81       	ldd	r25, Y+4	; 0x04
     778:	ad 81       	ldd	r26, Y+5	; 0x05
     77a:	be 81       	ldd	r27, Y+6	; 0x06
     77c:	88 0f       	add	r24, r24
     77e:	99 1f       	adc	r25, r25
     780:	aa 1f       	adc	r26, r26
     782:	bb 1f       	adc	r27, r27
     784:	88 0f       	add	r24, r24
     786:	99 1f       	adc	r25, r25
     788:	aa 1f       	adc	r26, r26
     78a:	bb 1f       	adc	r27, r27
     78c:	88 0f       	add	r24, r24
     78e:	99 1f       	adc	r25, r25
     790:	aa 1f       	adc	r26, r26
     792:	bb 1f       	adc	r27, r27
     794:	88 0f       	add	r24, r24
     796:	99 1f       	adc	r25, r25
     798:	aa 1f       	adc	r26, r26
     79a:	bb 1f       	adc	r27, r27
     79c:	9c 01       	movw	r18, r24
     79e:	ad 01       	movw	r20, r26
     7a0:	c8 01       	movw	r24, r16
     7a2:	b7 01       	movw	r22, r14
     7a4:	0e 94 31 08 	call	0x1062	; 0x1062 <__udivmodsi4>
     7a8:	da 01       	movw	r26, r20
     7aa:	c9 01       	movw	r24, r18
     7ac:	01 97       	sbiw	r24, 0x01	; 1
     7ae:	9a 83       	std	Y+2, r25	; 0x02
     7b0:	89 83       	std	Y+1, r24	; 0x01
     7b2:	84 ec       	ldi	r24, 0xC4	; 196
     7b4:	90 e0       	ldi	r25, 0x00	; 0
     7b6:	29 81       	ldd	r18, Y+1	; 0x01
     7b8:	fc 01       	movw	r30, r24
     7ba:	20 83       	st	Z, r18
     7bc:	85 ec       	ldi	r24, 0xC5	; 197
     7be:	90 e0       	ldi	r25, 0x00	; 0
     7c0:	29 81       	ldd	r18, Y+1	; 0x01
     7c2:	3a 81       	ldd	r19, Y+2	; 0x02
     7c4:	23 2f       	mov	r18, r19
     7c6:	33 27       	eor	r19, r19
     7c8:	fc 01       	movw	r30, r24
     7ca:	20 83       	st	Z, r18
     7cc:	00 00       	nop
     7ce:	26 96       	adiw	r28, 0x06	; 6
     7d0:	0f b6       	in	r0, 0x3f	; 63
     7d2:	f8 94       	cli
     7d4:	de bf       	out	0x3e, r29	; 62
     7d6:	0f be       	out	0x3f, r0	; 63
     7d8:	cd bf       	out	0x3d, r28	; 61
     7da:	df 91       	pop	r29
     7dc:	cf 91       	pop	r28
     7de:	1f 91       	pop	r17
     7e0:	0f 91       	pop	r16
     7e2:	ff 90       	pop	r15
     7e4:	ef 90       	pop	r14
     7e6:	08 95       	ret

000007e8 <uartGetRxBuffer>:
     7e8:	cf 93       	push	r28
     7ea:	df 93       	push	r29
     7ec:	cd b7       	in	r28, 0x3d	; 61
     7ee:	de b7       	in	r29, 0x3e	; 62
     7f0:	8f e6       	ldi	r24, 0x6F	; 111
     7f2:	97 e0       	ldi	r25, 0x07	; 7
     7f4:	df 91       	pop	r29
     7f6:	cf 91       	pop	r28
     7f8:	08 95       	ret

000007fa <uartSendByte>:
     7fa:	cf 93       	push	r28
     7fc:	df 93       	push	r29
     7fe:	1f 92       	push	r1
     800:	cd b7       	in	r28, 0x3d	; 61
     802:	de b7       	in	r29, 0x3e	; 62
     804:	89 83       	std	Y+1, r24	; 0x01
     806:	00 00       	nop
     808:	80 91 6e 07 	lds	r24, 0x076E	; 0x80076e <uartReadyTx>
     80c:	88 23       	and	r24, r24
     80e:	e1 f3       	breq	.-8      	; 0x808 <uartSendByte+0xe>
     810:	0e 94 6c 05 	call	0xad8	; 0xad8 <uart485OutputEnable>
     814:	86 ec       	ldi	r24, 0xC6	; 198
     816:	90 e0       	ldi	r25, 0x00	; 0
     818:	29 81       	ldd	r18, Y+1	; 0x01
     81a:	fc 01       	movw	r30, r24
     81c:	20 83       	st	Z, r18
     81e:	10 92 6e 07 	sts	0x076E, r1	; 0x80076e <uartReadyTx>
     822:	00 00       	nop
     824:	0f 90       	pop	r0
     826:	df 91       	pop	r29
     828:	cf 91       	pop	r28
     82a:	08 95       	ret

0000082c <uartSendBuffer>:

// transmit nBytes from buffer out the uart
u08 uartSendBuffer(char *buffer, u16 nBytes) {
     82c:	ff 92       	push	r15
     82e:	0f 93       	push	r16
     830:	1f 93       	push	r17
     832:	cf 93       	push	r28
     834:	df 93       	push	r29
     836:	cd b7       	in	r28, 0x3d	; 61
     838:	de b7       	in	r29, 0x3e	; 62
     83a:	a4 97       	sbiw	r28, 0x24	; 36
     83c:	0f b6       	in	r0, 0x3f	; 63
     83e:	f8 94       	cli
     840:	de bf       	out	0x3e, r29	; 62
     842:	0f be       	out	0x3f, r0	; 63
     844:	cd bf       	out	0x3d, r28	; 61
     846:	9a a3       	std	Y+34, r25	; 0x22
     848:	89 a3       	std	Y+33, r24	; 0x21
     84a:	7c a3       	std	Y+36, r23	; 0x24
     84c:	6b a3       	std	Y+35, r22	; 0x23
	register u08 first;
	register u16 i;
	
	// wait for the transmitter to be ready
	while(!uartReadyTx);
     84e:	00 00       	nop
     850:	80 91 6e 07 	lds	r24, 0x076E	; 0x80076e <uartReadyTx>
     854:	88 23       	and	r24, r24
     856:	e1 f3       	breq	.-8      	; 0x850 <uartSendBuffer+0x24>
	
	
	
	// check if there's space (and that we have any bytes to send at all)
	if((uartTxBuffer.datalength + nBytes < uartTxBuffer.size) && nBytes)
     858:	20 91 7e 07 	lds	r18, 0x077E	; 0x80077e <uartTxBuffer+0x4>
     85c:	30 91 7f 07 	lds	r19, 0x077F	; 0x80077f <uartTxBuffer+0x5>
     860:	8b a1       	ldd	r24, Y+35	; 0x23
     862:	9c a1       	ldd	r25, Y+36	; 0x24
     864:	28 0f       	add	r18, r24
     866:	39 1f       	adc	r19, r25
     868:	80 91 7c 07 	lds	r24, 0x077C	; 0x80077c <uartTxBuffer+0x2>
     86c:	90 91 7d 07 	lds	r25, 0x077D	; 0x80077d <uartTxBuffer+0x3>
     870:	28 17       	cp	r18, r24
     872:	39 07       	cpc	r19, r25
     874:	08 f0       	brcs	.+2      	; 0x878 <uartSendBuffer+0x4c>
     876:	23 c1       	rjmp	.+582    	; 0xabe <__stack+0x1bf>
     878:	8b a1       	ldd	r24, Y+35	; 0x23
     87a:	9c a1       	ldd	r25, Y+36	; 0x24
     87c:	89 2b       	or	r24, r25
     87e:	09 f4       	brne	.+2      	; 0x882 <uartSendBuffer+0x56>
     880:	1e c1       	rjmp	.+572    	; 0xabe <__stack+0x1bf>
	{
		// grab first character
		first = *buffer++;
     882:	89 a1       	ldd	r24, Y+33	; 0x21
     884:	9a a1       	ldd	r25, Y+34	; 0x22
     886:	9c 01       	movw	r18, r24
     888:	2f 5f       	subi	r18, 0xFF	; 255
     88a:	3f 4f       	sbci	r19, 0xFF	; 255
     88c:	3a a3       	std	Y+34, r19	; 0x22
     88e:	29 a3       	std	Y+33, r18	; 0x21
     890:	fc 01       	movw	r30, r24
     892:	80 81       	ld	r24, Z
     894:	f8 2e       	mov	r15, r24
		// copy THE REST OF user buffer to uart transmit buffer
		for(i = 0; i < nBytes-1; i++)
     896:	00 e0       	ldi	r16, 0x00	; 0
     898:	10 e0       	ldi	r17, 0x00	; 0
     89a:	12 c0       	rjmp	.+36     	; 0x8c0 <uartSendBuffer+0x94>
		{
			// put data bytes at end of buffer
			bufferAddToEnd(&uartTxBuffer, *buffer++);
     89c:	89 a1       	ldd	r24, Y+33	; 0x21
     89e:	9a a1       	ldd	r25, Y+34	; 0x22
     8a0:	9c 01       	movw	r18, r24
     8a2:	2f 5f       	subi	r18, 0xFF	; 255
     8a4:	3f 4f       	sbci	r19, 0xFF	; 255
     8a6:	3a a3       	std	Y+34, r19	; 0x22
     8a8:	29 a3       	std	Y+33, r18	; 0x21
     8aa:	fc 01       	movw	r30, r24
     8ac:	80 81       	ld	r24, Z
     8ae:	68 2f       	mov	r22, r24
     8b0:	8a e7       	ldi	r24, 0x7A	; 122
     8b2:	97 e0       	ldi	r25, 0x07	; 7
     8b4:	0e 94 9e 00 	call	0x13c	; 0x13c <bufferAddToEnd>
	if((uartTxBuffer.datalength + nBytes < uartTxBuffer.size) && nBytes)
	{
		// grab first character
		first = *buffer++;
		// copy THE REST OF user buffer to uart transmit buffer
		for(i = 0; i < nBytes-1; i++)
     8b8:	c8 01       	movw	r24, r16
     8ba:	8c 01       	movw	r16, r24
     8bc:	0f 5f       	subi	r16, 0xFF	; 255
     8be:	1f 4f       	sbci	r17, 0xFF	; 255
     8c0:	8b a1       	ldd	r24, Y+35	; 0x23
     8c2:	9c a1       	ldd	r25, Y+36	; 0x24
     8c4:	01 97       	sbiw	r24, 0x01	; 1
     8c6:	08 17       	cp	r16, r24
     8c8:	19 07       	cpc	r17, r25
     8ca:	40 f3       	brcs	.-48     	; 0x89c <uartSendBuffer+0x70>
			// put data bytes at end of buffer
			bufferAddToEnd(&uartTxBuffer, *buffer++);
		}

		// send the first byte to get things going by interrupts
		uartBufferedTx = TRUE;
     8cc:	8f ef       	ldi	r24, 0xFF	; 255
     8ce:	80 93 77 07 	sts	0x0777, r24	; 0x800777 <uartBufferedTx>
    #ifdef UART_USE_RS485
    uart485OutputEnable();
     8d2:	0e 94 6c 05 	call	0xad8	; 0xad8 <uart485OutputEnable>
     8d6:	80 e0       	ldi	r24, 0x00	; 0
     8d8:	90 e0       	ldi	r25, 0x00	; 0
     8da:	a0 e8       	ldi	r26, 0x80	; 128
     8dc:	bf e3       	ldi	r27, 0x3F	; 63
     8de:	89 83       	std	Y+1, r24	; 0x01
     8e0:	9a 83       	std	Y+2, r25	; 0x02
     8e2:	ab 83       	std	Y+3, r26	; 0x03
     8e4:	bc 83       	std	Y+4, r27	; 0x04
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
     8e6:	2b ea       	ldi	r18, 0xAB	; 171
     8e8:	3a ea       	ldi	r19, 0xAA	; 170
     8ea:	4a ea       	ldi	r20, 0xAA	; 170
     8ec:	50 e4       	ldi	r21, 0x40	; 64
     8ee:	69 81       	ldd	r22, Y+1	; 0x01
     8f0:	7a 81       	ldd	r23, Y+2	; 0x02
     8f2:	8b 81       	ldd	r24, Y+3	; 0x03
     8f4:	9c 81       	ldd	r25, Y+4	; 0x04
     8f6:	0e 94 b0 07 	call	0xf60	; 0xf60 <__mulsf3>
     8fa:	dc 01       	movw	r26, r24
     8fc:	cb 01       	movw	r24, r22
     8fe:	8d 83       	std	Y+5, r24	; 0x05
     900:	9e 83       	std	Y+6, r25	; 0x06
     902:	af 83       	std	Y+7, r26	; 0x07
     904:	b8 87       	std	Y+8, r27	; 0x08
	__tmp2 = ((F_CPU) / 4e6) * __us;
     906:	20 e0       	ldi	r18, 0x00	; 0
     908:	30 e0       	ldi	r19, 0x00	; 0
     90a:	40 e8       	ldi	r20, 0x80	; 128
     90c:	50 e4       	ldi	r21, 0x40	; 64
     90e:	69 81       	ldd	r22, Y+1	; 0x01
     910:	7a 81       	ldd	r23, Y+2	; 0x02
     912:	8b 81       	ldd	r24, Y+3	; 0x03
     914:	9c 81       	ldd	r25, Y+4	; 0x04
     916:	0e 94 b0 07 	call	0xf60	; 0xf60 <__mulsf3>
     91a:	dc 01       	movw	r26, r24
     91c:	cb 01       	movw	r24, r22
     91e:	89 87       	std	Y+9, r24	; 0x09
     920:	9a 87       	std	Y+10, r25	; 0x0a
     922:	ab 87       	std	Y+11, r26	; 0x0b
     924:	bc 87       	std	Y+12, r27	; 0x0c
	if (__tmp < 1.0)
     926:	20 e0       	ldi	r18, 0x00	; 0
     928:	30 e0       	ldi	r19, 0x00	; 0
     92a:	40 e8       	ldi	r20, 0x80	; 128
     92c:	5f e3       	ldi	r21, 0x3F	; 63
     92e:	6d 81       	ldd	r22, Y+5	; 0x05
     930:	7e 81       	ldd	r23, Y+6	; 0x06
     932:	8f 81       	ldd	r24, Y+7	; 0x07
     934:	98 85       	ldd	r25, Y+8	; 0x08
     936:	0e 94 90 06 	call	0xd20	; 0xd20 <__cmpsf2>
     93a:	88 23       	and	r24, r24
     93c:	1c f4       	brge	.+6      	; 0x944 <__stack+0x45>
		__ticks = 1;
     93e:	81 e0       	ldi	r24, 0x01	; 1
     940:	8d 87       	std	Y+13, r24	; 0x0d
     942:	b2 c0       	rjmp	.+356    	; 0xaa8 <__stack+0x1a9>
	else if (__tmp2 > 65535)
     944:	20 e0       	ldi	r18, 0x00	; 0
     946:	3f ef       	ldi	r19, 0xFF	; 255
     948:	4f e7       	ldi	r20, 0x7F	; 127
     94a:	57 e4       	ldi	r21, 0x47	; 71
     94c:	69 85       	ldd	r22, Y+9	; 0x09
     94e:	7a 85       	ldd	r23, Y+10	; 0x0a
     950:	8b 85       	ldd	r24, Y+11	; 0x0b
     952:	9c 85       	ldd	r25, Y+12	; 0x0c
     954:	0e 94 ab 07 	call	0xf56	; 0xf56 <__gesf2>
     958:	18 16       	cp	r1, r24
     95a:	0c f0       	brlt	.+2      	; 0x95e <__stack+0x5f>
     95c:	7b c0       	rjmp	.+246    	; 0xa54 <__stack+0x155>
	{
		_delay_ms(__us / 1000.0);
     95e:	20 e0       	ldi	r18, 0x00	; 0
     960:	30 e0       	ldi	r19, 0x00	; 0
     962:	4a e7       	ldi	r20, 0x7A	; 122
     964:	54 e4       	ldi	r21, 0x44	; 68
     966:	69 81       	ldd	r22, Y+1	; 0x01
     968:	7a 81       	ldd	r23, Y+2	; 0x02
     96a:	8b 81       	ldd	r24, Y+3	; 0x03
     96c:	9c 81       	ldd	r25, Y+4	; 0x04
     96e:	0e 94 95 06 	call	0xd2a	; 0xd2a <__divsf3>
     972:	dc 01       	movw	r26, r24
     974:	cb 01       	movw	r24, r22
     976:	8e 87       	std	Y+14, r24	; 0x0e
     978:	9f 87       	std	Y+15, r25	; 0x0f
     97a:	a8 8b       	std	Y+16, r26	; 0x10
     97c:	b9 8b       	std	Y+17, r27	; 0x11

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     97e:	20 e0       	ldi	r18, 0x00	; 0
     980:	30 e0       	ldi	r19, 0x00	; 0
     982:	4a e7       	ldi	r20, 0x7A	; 122
     984:	55 e4       	ldi	r21, 0x45	; 69
     986:	6e 85       	ldd	r22, Y+14	; 0x0e
     988:	7f 85       	ldd	r23, Y+15	; 0x0f
     98a:	88 89       	ldd	r24, Y+16	; 0x10
     98c:	99 89       	ldd	r25, Y+17	; 0x11
     98e:	0e 94 b0 07 	call	0xf60	; 0xf60 <__mulsf3>
     992:	dc 01       	movw	r26, r24
     994:	cb 01       	movw	r24, r22
     996:	8a 8b       	std	Y+18, r24	; 0x12
     998:	9b 8b       	std	Y+19, r25	; 0x13
     99a:	ac 8b       	std	Y+20, r26	; 0x14
     99c:	bd 8b       	std	Y+21, r27	; 0x15
	if (__tmp < 1.0)
     99e:	20 e0       	ldi	r18, 0x00	; 0
     9a0:	30 e0       	ldi	r19, 0x00	; 0
     9a2:	40 e8       	ldi	r20, 0x80	; 128
     9a4:	5f e3       	ldi	r21, 0x3F	; 63
     9a6:	6a 89       	ldd	r22, Y+18	; 0x12
     9a8:	7b 89       	ldd	r23, Y+19	; 0x13
     9aa:	8c 89       	ldd	r24, Y+20	; 0x14
     9ac:	9d 89       	ldd	r25, Y+21	; 0x15
     9ae:	0e 94 90 06 	call	0xd20	; 0xd20 <__cmpsf2>
     9b2:	88 23       	and	r24, r24
     9b4:	2c f4       	brge	.+10     	; 0x9c0 <__stack+0xc1>
		__ticks = 1;
     9b6:	81 e0       	ldi	r24, 0x01	; 1
     9b8:	90 e0       	ldi	r25, 0x00	; 0
     9ba:	9f 8b       	std	Y+23, r25	; 0x17
     9bc:	8e 8b       	std	Y+22, r24	; 0x16
     9be:	3f c0       	rjmp	.+126    	; 0xa3e <__stack+0x13f>
	else if (__tmp > 65535)
     9c0:	20 e0       	ldi	r18, 0x00	; 0
     9c2:	3f ef       	ldi	r19, 0xFF	; 255
     9c4:	4f e7       	ldi	r20, 0x7F	; 127
     9c6:	57 e4       	ldi	r21, 0x47	; 71
     9c8:	6a 89       	ldd	r22, Y+18	; 0x12
     9ca:	7b 89       	ldd	r23, Y+19	; 0x13
     9cc:	8c 89       	ldd	r24, Y+20	; 0x14
     9ce:	9d 89       	ldd	r25, Y+21	; 0x15
     9d0:	0e 94 ab 07 	call	0xf56	; 0xf56 <__gesf2>
     9d4:	18 16       	cp	r1, r24
     9d6:	4c f5       	brge	.+82     	; 0xa2a <__stack+0x12b>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     9d8:	20 e0       	ldi	r18, 0x00	; 0
     9da:	30 e0       	ldi	r19, 0x00	; 0
     9dc:	40 e2       	ldi	r20, 0x20	; 32
     9de:	51 e4       	ldi	r21, 0x41	; 65
     9e0:	6e 85       	ldd	r22, Y+14	; 0x0e
     9e2:	7f 85       	ldd	r23, Y+15	; 0x0f
     9e4:	88 89       	ldd	r24, Y+16	; 0x10
     9e6:	99 89       	ldd	r25, Y+17	; 0x11
     9e8:	0e 94 b0 07 	call	0xf60	; 0xf60 <__mulsf3>
     9ec:	dc 01       	movw	r26, r24
     9ee:	cb 01       	movw	r24, r22
     9f0:	bc 01       	movw	r22, r24
     9f2:	cd 01       	movw	r24, r26
     9f4:	0e 94 07 07 	call	0xe0e	; 0xe0e <__fixunssfsi>
     9f8:	dc 01       	movw	r26, r24
     9fa:	cb 01       	movw	r24, r22
     9fc:	9f 8b       	std	Y+23, r25	; 0x17
     9fe:	8e 8b       	std	Y+22, r24	; 0x16
     a00:	0f c0       	rjmp	.+30     	; 0xa20 <__stack+0x121>
     a02:	80 e9       	ldi	r24, 0x90	; 144
     a04:	91 e0       	ldi	r25, 0x01	; 1
     a06:	99 8f       	std	Y+25, r25	; 0x19
     a08:	88 8f       	std	Y+24, r24	; 0x18
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     a0a:	88 8d       	ldd	r24, Y+24	; 0x18
     a0c:	99 8d       	ldd	r25, Y+25	; 0x19
     a0e:	01 97       	sbiw	r24, 0x01	; 1
     a10:	f1 f7       	brne	.-4      	; 0xa0e <__stack+0x10f>
     a12:	99 8f       	std	Y+25, r25	; 0x19
     a14:	88 8f       	std	Y+24, r24	; 0x18
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a16:	8e 89       	ldd	r24, Y+22	; 0x16
     a18:	9f 89       	ldd	r25, Y+23	; 0x17
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	9f 8b       	std	Y+23, r25	; 0x17
     a1e:	8e 8b       	std	Y+22, r24	; 0x16
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a20:	8e 89       	ldd	r24, Y+22	; 0x16
     a22:	9f 89       	ldd	r25, Y+23	; 0x17
     a24:	89 2b       	or	r24, r25
     a26:	69 f7       	brne	.-38     	; 0xa02 <__stack+0x103>
     a28:	3f c0       	rjmp	.+126    	; 0xaa8 <__stack+0x1a9>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     a2a:	6a 89       	ldd	r22, Y+18	; 0x12
     a2c:	7b 89       	ldd	r23, Y+19	; 0x13
     a2e:	8c 89       	ldd	r24, Y+20	; 0x14
     a30:	9d 89       	ldd	r25, Y+21	; 0x15
     a32:	0e 94 07 07 	call	0xe0e	; 0xe0e <__fixunssfsi>
     a36:	dc 01       	movw	r26, r24
     a38:	cb 01       	movw	r24, r22
     a3a:	9f 8b       	std	Y+23, r25	; 0x17
     a3c:	8e 8b       	std	Y+22, r24	; 0x16
     a3e:	8e 89       	ldd	r24, Y+22	; 0x16
     a40:	9f 89       	ldd	r25, Y+23	; 0x17
     a42:	9b 8f       	std	Y+27, r25	; 0x1b
     a44:	8a 8f       	std	Y+26, r24	; 0x1a
     a46:	8a 8d       	ldd	r24, Y+26	; 0x1a
     a48:	9b 8d       	ldd	r25, Y+27	; 0x1b
     a4a:	01 97       	sbiw	r24, 0x01	; 1
     a4c:	f1 f7       	brne	.-4      	; 0xa4a <__stack+0x14b>
     a4e:	9b 8f       	std	Y+27, r25	; 0x1b
     a50:	8a 8f       	std	Y+26, r24	; 0x1a
     a52:	2a c0       	rjmp	.+84     	; 0xaa8 <__stack+0x1a9>
		__ticks = 1;
	else if (__tmp2 > 65535)
	{
		_delay_ms(__us / 1000.0);
	}
	else if (__tmp > 255)
     a54:	20 e0       	ldi	r18, 0x00	; 0
     a56:	30 e0       	ldi	r19, 0x00	; 0
     a58:	4f e7       	ldi	r20, 0x7F	; 127
     a5a:	53 e4       	ldi	r21, 0x43	; 67
     a5c:	6d 81       	ldd	r22, Y+5	; 0x05
     a5e:	7e 81       	ldd	r23, Y+6	; 0x06
     a60:	8f 81       	ldd	r24, Y+7	; 0x07
     a62:	98 85       	ldd	r25, Y+8	; 0x08
     a64:	0e 94 ab 07 	call	0xf56	; 0xf56 <__gesf2>
     a68:	18 16       	cp	r1, r24
     a6a:	ac f4       	brge	.+42     	; 0xa96 <__stack+0x197>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
     a6c:	69 85       	ldd	r22, Y+9	; 0x09
     a6e:	7a 85       	ldd	r23, Y+10	; 0x0a
     a70:	8b 85       	ldd	r24, Y+11	; 0x0b
     a72:	9c 85       	ldd	r25, Y+12	; 0x0c
     a74:	0e 94 07 07 	call	0xe0e	; 0xe0e <__fixunssfsi>
     a78:	dc 01       	movw	r26, r24
     a7a:	cb 01       	movw	r24, r22
     a7c:	9d 8f       	std	Y+29, r25	; 0x1d
     a7e:	8c 8f       	std	Y+28, r24	; 0x1c
     a80:	8c 8d       	ldd	r24, Y+28	; 0x1c
     a82:	9d 8d       	ldd	r25, Y+29	; 0x1d
     a84:	9f 8f       	std	Y+31, r25	; 0x1f
     a86:	8e 8f       	std	Y+30, r24	; 0x1e
     a88:	8e 8d       	ldd	r24, Y+30	; 0x1e
     a8a:	9f 8d       	ldd	r25, Y+31	; 0x1f
     a8c:	01 97       	sbiw	r24, 0x01	; 1
     a8e:	f1 f7       	brne	.-4      	; 0xa8c <__stack+0x18d>
     a90:	9f 8f       	std	Y+31, r25	; 0x1f
     a92:	8e 8f       	std	Y+30, r24	; 0x1e
     a94:	0f c0       	rjmp	.+30     	; 0xab4 <__stack+0x1b5>
		_delay_loop_2(__ticks);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     a96:	6d 81       	ldd	r22, Y+5	; 0x05
     a98:	7e 81       	ldd	r23, Y+6	; 0x06
     a9a:	8f 81       	ldd	r24, Y+7	; 0x07
     a9c:	98 85       	ldd	r25, Y+8	; 0x08
     a9e:	0e 94 07 07 	call	0xe0e	; 0xe0e <__fixunssfsi>
     aa2:	dc 01       	movw	r26, r24
     aa4:	cb 01       	movw	r24, r22
     aa6:	8d 87       	std	Y+13, r24	; 0x0d
     aa8:	8d 85       	ldd	r24, Y+13	; 0x0d
     aaa:	88 a3       	std	Y+32, r24	; 0x20
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     aac:	88 a1       	ldd	r24, Y+32	; 0x20
     aae:	8a 95       	dec	r24
     ab0:	f1 f7       	brne	.-4      	; 0xaae <__stack+0x1af>
     ab2:	88 a3       	std	Y+32, r24	; 0x20
    #endif

    _delay_us(1);
		uartSendByte(first);
     ab4:	8f 2d       	mov	r24, r15
     ab6:	0e 94 fd 03 	call	0x7fa	; 0x7fa <uartSendByte>
		// return success
		return TRUE;
     aba:	8f ef       	ldi	r24, 0xFF	; 255
     abc:	01 c0       	rjmp	.+2      	; 0xac0 <__stack+0x1c1>
	}
	else
	{
		// return failure
		return FALSE;
     abe:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     ac0:	a4 96       	adiw	r28, 0x24	; 36
     ac2:	0f b6       	in	r0, 0x3f	; 63
     ac4:	f8 94       	cli
     ac6:	de bf       	out	0x3e, r29	; 62
     ac8:	0f be       	out	0x3f, r0	; 63
     aca:	cd bf       	out	0x3d, r28	; 61
     acc:	df 91       	pop	r29
     ace:	cf 91       	pop	r28
     ad0:	1f 91       	pop	r17
     ad2:	0f 91       	pop	r16
     ad4:	ff 90       	pop	r15
     ad6:	08 95       	ret

00000ad8 <uart485OutputEnable>:

#ifdef UART_USE_RS485
inline void uart485OutputEnable(void) {
     ad8:	cf 93       	push	r28
     ada:	df 93       	push	r29
     adc:	cd b7       	in	r28, 0x3d	; 61
     ade:	de b7       	in	r29, 0x3e	; 62
  UARTRS485PORT |= BV(RS485PIN);
     ae0:	8b e2       	ldi	r24, 0x2B	; 43
     ae2:	90 e0       	ldi	r25, 0x00	; 0
     ae4:	2b e2       	ldi	r18, 0x2B	; 43
     ae6:	30 e0       	ldi	r19, 0x00	; 0
     ae8:	f9 01       	movw	r30, r18
     aea:	20 81       	ld	r18, Z
     aec:	24 60       	ori	r18, 0x04	; 4
     aee:	fc 01       	movw	r30, r24
     af0:	20 83       	st	Z, r18
}
     af2:	00 00       	nop
     af4:	df 91       	pop	r29
     af6:	cf 91       	pop	r28
     af8:	08 95       	ret

00000afa <uart485OutputDisable>:
inline void uart485OutputDisable(void) {
     afa:	cf 93       	push	r28
     afc:	df 93       	push	r29
     afe:	cd b7       	in	r28, 0x3d	; 61
     b00:	de b7       	in	r29, 0x3e	; 62
  UARTRS485PORT &= ~BV(RS485PIN);
     b02:	8b e2       	ldi	r24, 0x2B	; 43
     b04:	90 e0       	ldi	r25, 0x00	; 0
     b06:	2b e2       	ldi	r18, 0x2B	; 43
     b08:	30 e0       	ldi	r19, 0x00	; 0
     b0a:	f9 01       	movw	r30, r18
     b0c:	20 81       	ld	r18, Z
     b0e:	2b 7f       	andi	r18, 0xFB	; 251
     b10:	fc 01       	movw	r30, r24
     b12:	20 83       	st	Z, r18
}
     b14:	00 00       	nop
     b16:	df 91       	pop	r29
     b18:	cf 91       	pop	r28
     b1a:	08 95       	ret

00000b1c <uart485EnableDriverCntlPin>:

inline void uart485EnableDriverCntlPin(void) {
     b1c:	cf 93       	push	r28
     b1e:	df 93       	push	r29
     b20:	cd b7       	in	r28, 0x3d	; 61
     b22:	de b7       	in	r29, 0x3e	; 62
  UARTRS485DDR |= BV(RS485PIN);
     b24:	8a e2       	ldi	r24, 0x2A	; 42
     b26:	90 e0       	ldi	r25, 0x00	; 0
     b28:	2a e2       	ldi	r18, 0x2A	; 42
     b2a:	30 e0       	ldi	r19, 0x00	; 0
     b2c:	f9 01       	movw	r30, r18
     b2e:	20 81       	ld	r18, Z
     b30:	24 60       	ori	r18, 0x04	; 4
     b32:	fc 01       	movw	r30, r24
     b34:	20 83       	st	Z, r18
}
     b36:	00 00       	nop
     b38:	df 91       	pop	r29
     b3a:	cf 91       	pop	r28
     b3c:	08 95       	ret

00000b3e <__vector_19>:
#endif
// UART Data Register Empty Interrupt Handler
UART_INTERRUPT_HANDLER(SIG_UART_DATA) {
     b3e:	1f 92       	push	r1
     b40:	0f 92       	push	r0
     b42:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     b46:	0f 92       	push	r0
     b48:	11 24       	eor	r1, r1
     b4a:	cf 93       	push	r28
     b4c:	df 93       	push	r29
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
  // nop
}
     b52:	00 00       	nop
     b54:	df 91       	pop	r29
     b56:	cf 91       	pop	r28
     b58:	0f 90       	pop	r0
     b5a:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     b5e:	0f 90       	pop	r0
     b60:	1f 90       	pop	r1
     b62:	18 95       	reti

00000b64 <__vector_20>:

// UART Transmit Complete Interrupt Handler
UART_INTERRUPT_HANDLER(SIG_UART_TRANS) {
     b64:	1f 92       	push	r1
     b66:	0f 92       	push	r0
     b68:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     b6c:	0f 92       	push	r0
     b6e:	11 24       	eor	r1, r1
     b70:	2f 93       	push	r18
     b72:	3f 93       	push	r19
     b74:	4f 93       	push	r20
     b76:	5f 93       	push	r21
     b78:	6f 93       	push	r22
     b7a:	7f 93       	push	r23
     b7c:	8f 93       	push	r24
     b7e:	9f 93       	push	r25
     b80:	af 93       	push	r26
     b82:	bf 93       	push	r27
     b84:	ef 93       	push	r30
     b86:	ff 93       	push	r31
     b88:	cf 93       	push	r28
     b8a:	df 93       	push	r29
     b8c:	cd b7       	in	r28, 0x3d	; 61
     b8e:	de b7       	in	r29, 0x3e	; 62
	
	//UDR0 = uartBufferedTx;
	// check if buffered tx is enabled
	if(uartBufferedTx)
     b90:	80 91 77 07 	lds	r24, 0x0777	; 0x800777 <uartBufferedTx>
     b94:	88 23       	and	r24, r24
     b96:	09 f4       	brne	.+2      	; 0xb9a <__vector_20+0x36>
     b98:	59 c0       	rjmp	.+178    	; 0xc4c <__vector_20+0xe8>
	{
		
		// check if there's data left in the buffer
		if(uartTxBuffer.datalength)
     b9a:	80 91 7e 07 	lds	r24, 0x077E	; 0x80077e <uartTxBuffer+0x4>
     b9e:	90 91 7f 07 	lds	r25, 0x077F	; 0x80077f <uartTxBuffer+0x5>
     ba2:	89 2b       	or	r24, r25
     ba4:	09 f4       	brne	.+2      	; 0xba8 <__vector_20+0x44>
     ba6:	4a c0       	rjmp	.+148    	; 0xc3c <__vector_20+0xd8>
		{
			// send byte from top of buffer
      /* The Following section is expanded from bufferGetFromFront() */
			//uartTxIntData = bufferGetFromFront(&uartTxBuffer);
      uartTxIntData = 0;
     ba8:	10 92 79 07 	sts	0x0779, r1	; 0x800779 <uartTxIntData>
			if(uartTxBuffer.datalength)
     bac:	80 91 7e 07 	lds	r24, 0x077E	; 0x80077e <uartTxBuffer+0x4>
     bb0:	90 91 7f 07 	lds	r25, 0x077F	; 0x80077f <uartTxBuffer+0x5>
     bb4:	89 2b       	or	r24, r25
     bb6:	d9 f1       	breq	.+118    	; 0xc2e <__vector_20+0xca>
			{
				// get the first character from buffer
				uartTxIntData = uartTxBuffer.dataptr[uartTxBuffer.dataindex];
     bb8:	20 91 7a 07 	lds	r18, 0x077A	; 0x80077a <uartTxBuffer>
     bbc:	30 91 7b 07 	lds	r19, 0x077B	; 0x80077b <uartTxBuffer+0x1>
     bc0:	80 91 80 07 	lds	r24, 0x0780	; 0x800780 <uartTxBuffer+0x6>
     bc4:	90 91 81 07 	lds	r25, 0x0781	; 0x800781 <uartTxBuffer+0x7>
     bc8:	82 0f       	add	r24, r18
     bca:	93 1f       	adc	r25, r19
     bcc:	fc 01       	movw	r30, r24
     bce:	80 81       	ld	r24, Z
     bd0:	80 93 79 07 	sts	0x0779, r24	; 0x800779 <uartTxIntData>
				// move index down and decrement length
				uartTxBuffer.dataindex++;
     bd4:	80 91 80 07 	lds	r24, 0x0780	; 0x800780 <uartTxBuffer+0x6>
     bd8:	90 91 81 07 	lds	r25, 0x0781	; 0x800781 <uartTxBuffer+0x7>
     bdc:	01 96       	adiw	r24, 0x01	; 1
     bde:	90 93 81 07 	sts	0x0781, r25	; 0x800781 <uartTxBuffer+0x7>
     be2:	80 93 80 07 	sts	0x0780, r24	; 0x800780 <uartTxBuffer+0x6>
				if(uartTxBuffer.dataindex >= uartTxBuffer.size)
     be6:	20 91 80 07 	lds	r18, 0x0780	; 0x800780 <uartTxBuffer+0x6>
     bea:	30 91 81 07 	lds	r19, 0x0781	; 0x800781 <uartTxBuffer+0x7>
     bee:	80 91 7c 07 	lds	r24, 0x077C	; 0x80077c <uartTxBuffer+0x2>
     bf2:	90 91 7d 07 	lds	r25, 0x077D	; 0x80077d <uartTxBuffer+0x3>
     bf6:	28 17       	cp	r18, r24
     bf8:	39 07       	cpc	r19, r25
     bfa:	80 f0       	brcs	.+32     	; 0xc1c <__vector_20+0xb8>
				{
					uartTxBuffer.dataindex -= uartTxBuffer.size;
     bfc:	20 91 80 07 	lds	r18, 0x0780	; 0x800780 <uartTxBuffer+0x6>
     c00:	30 91 81 07 	lds	r19, 0x0781	; 0x800781 <uartTxBuffer+0x7>
     c04:	80 91 7c 07 	lds	r24, 0x077C	; 0x80077c <uartTxBuffer+0x2>
     c08:	90 91 7d 07 	lds	r25, 0x077D	; 0x80077d <uartTxBuffer+0x3>
     c0c:	a9 01       	movw	r20, r18
     c0e:	48 1b       	sub	r20, r24
     c10:	59 0b       	sbc	r21, r25
     c12:	ca 01       	movw	r24, r20
     c14:	90 93 81 07 	sts	0x0781, r25	; 0x800781 <uartTxBuffer+0x7>
     c18:	80 93 80 07 	sts	0x0780, r24	; 0x800780 <uartTxBuffer+0x6>
				}
				uartTxBuffer.datalength--;
     c1c:	80 91 7e 07 	lds	r24, 0x077E	; 0x80077e <uartTxBuffer+0x4>
     c20:	90 91 7f 07 	lds	r25, 0x077F	; 0x80077f <uartTxBuffer+0x5>
     c24:	01 97       	sbiw	r24, 0x01	; 1
     c26:	90 93 7f 07 	sts	0x077F, r25	; 0x80077f <uartTxBuffer+0x5>
     c2a:	80 93 7e 07 	sts	0x077E, r24	; 0x80077e <uartTxBuffer+0x4>
			}
			outb(UDR0, uartTxIntData);
     c2e:	86 ec       	ldi	r24, 0xC6	; 198
     c30:	90 e0       	ldi	r25, 0x00	; 0
     c32:	20 91 79 07 	lds	r18, 0x0779	; 0x800779 <uartTxIntData>
     c36:	fc 01       	movw	r30, r24
     c38:	20 83       	st	Z, r18
		uartReadyTx = TRUE;
    #ifdef UART_USE_RS485
    uart485OutputDisable();
    #endif
	}
}
     c3a:	0d c0       	rjmp	.+26     	; 0xc56 <__vector_20+0xf2>
			outb(UDR0, uartTxIntData);
		}
		else
		{
			// no data left
			uartBufferedTx = FALSE;
     c3c:	10 92 77 07 	sts	0x0777, r1	; 0x800777 <uartBufferedTx>
			// return to ready state
			uartReadyTx = TRUE;
     c40:	8f ef       	ldi	r24, 0xFF	; 255
     c42:	80 93 6e 07 	sts	0x076E, r24	; 0x80076e <uartReadyTx>
      #ifdef UART_USE_RS485
      uart485OutputDisable();
     c46:	0e 94 7d 05 	call	0xafa	; 0xafa <uart485OutputDisable>
		uartReadyTx = TRUE;
    #ifdef UART_USE_RS485
    uart485OutputDisable();
    #endif
	}
}
     c4a:	05 c0       	rjmp	.+10     	; 0xc56 <__vector_20+0xf2>
	}
	else
	{
		// we're using single-byte tx mode
		// indicate transmit complete, back to ready
		uartReadyTx = TRUE;
     c4c:	8f ef       	ldi	r24, 0xFF	; 255
     c4e:	80 93 6e 07 	sts	0x076E, r24	; 0x80076e <uartReadyTx>
    #ifdef UART_USE_RS485
    uart485OutputDisable();
     c52:	0e 94 7d 05 	call	0xafa	; 0xafa <uart485OutputDisable>
    #endif
	}
}
     c56:	00 00       	nop
     c58:	df 91       	pop	r29
     c5a:	cf 91       	pop	r28
     c5c:	ff 91       	pop	r31
     c5e:	ef 91       	pop	r30
     c60:	bf 91       	pop	r27
     c62:	af 91       	pop	r26
     c64:	9f 91       	pop	r25
     c66:	8f 91       	pop	r24
     c68:	7f 91       	pop	r23
     c6a:	6f 91       	pop	r22
     c6c:	5f 91       	pop	r21
     c6e:	4f 91       	pop	r20
     c70:	3f 91       	pop	r19
     c72:	2f 91       	pop	r18
     c74:	0f 90       	pop	r0
     c76:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     c7a:	0f 90       	pop	r0
     c7c:	1f 90       	pop	r1
     c7e:	18 95       	reti

00000c80 <__vector_18>:

// UART Receive Complete Interrupt Handler
UART_INTERRUPT_HANDLER(SIG_UART_RECV)
{
     c80:	1f 92       	push	r1
     c82:	0f 92       	push	r0
     c84:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     c88:	0f 92       	push	r0
     c8a:	11 24       	eor	r1, r1
     c8c:	2f 93       	push	r18
     c8e:	3f 93       	push	r19
     c90:	4f 93       	push	r20
     c92:	5f 93       	push	r21
     c94:	6f 93       	push	r22
     c96:	7f 93       	push	r23
     c98:	8f 93       	push	r24
     c9a:	9f 93       	push	r25
     c9c:	af 93       	push	r26
     c9e:	bf 93       	push	r27
     ca0:	ef 93       	push	r30
     ca2:	ff 93       	push	r31
     ca4:	cf 93       	push	r28
     ca6:	df 93       	push	r29
     ca8:	1f 92       	push	r1
     caa:	cd b7       	in	r28, 0x3d	; 61
     cac:	de b7       	in	r29, 0x3e	; 62
	u08 c;
	
	// get received char
	c = inb(UDR);
     cae:	86 ec       	ldi	r24, 0xC6	; 198
     cb0:	90 e0       	ldi	r25, 0x00	; 0
     cb2:	fc 01       	movw	r30, r24
     cb4:	80 81       	ld	r24, Z
     cb6:	89 83       	std	Y+1, r24	; 0x01

	// if there's a user function to handle this receive event
	if(UartRxFunc)
     cb8:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <UartRxFunc>
     cbc:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <UartRxFunc+0x1>
     cc0:	89 2b       	or	r24, r25
     cc2:	41 f0       	breq	.+16     	; 0xcd4 <__vector_18+0x54>
	{
		// call it and pass the received data
		UartRxFunc(c);
     cc4:	20 91 80 01 	lds	r18, 0x0180	; 0x800180 <UartRxFunc>
     cc8:	30 91 81 01 	lds	r19, 0x0181	; 0x800181 <UartRxFunc+0x1>
     ccc:	89 81       	ldd	r24, Y+1	; 0x01
     cce:	f9 01       	movw	r30, r18
     cd0:	09 95       	icall
			// no space in buffer
			// count overflow
			uartRxOverflow++;
		}
	}
}
     cd2:	10 c0       	rjmp	.+32     	; 0xcf4 <__vector_18+0x74>
	else
	{
		// otherwise do default processing
		// put received char in buffer
		// check if there's space
		if( !bufferAddToEnd(&uartRxBuffer, c) )
     cd4:	69 81       	ldd	r22, Y+1	; 0x01
     cd6:	8f e6       	ldi	r24, 0x6F	; 111
     cd8:	97 e0       	ldi	r25, 0x07	; 7
     cda:	0e 94 9e 00 	call	0x13c	; 0x13c <bufferAddToEnd>
     cde:	88 23       	and	r24, r24
     ce0:	49 f4       	brne	.+18     	; 0xcf4 <__vector_18+0x74>
		{
			// no space in buffer
			// count overflow
			uartRxOverflow++;
     ce2:	80 91 82 07 	lds	r24, 0x0782	; 0x800782 <uartRxOverflow>
     ce6:	90 91 83 07 	lds	r25, 0x0783	; 0x800783 <uartRxOverflow+0x1>
     cea:	01 96       	adiw	r24, 0x01	; 1
     cec:	90 93 83 07 	sts	0x0783, r25	; 0x800783 <uartRxOverflow+0x1>
     cf0:	80 93 82 07 	sts	0x0782, r24	; 0x800782 <uartRxOverflow>
		}
	}
}
     cf4:	00 00       	nop
     cf6:	0f 90       	pop	r0
     cf8:	df 91       	pop	r29
     cfa:	cf 91       	pop	r28
     cfc:	ff 91       	pop	r31
     cfe:	ef 91       	pop	r30
     d00:	bf 91       	pop	r27
     d02:	af 91       	pop	r26
     d04:	9f 91       	pop	r25
     d06:	8f 91       	pop	r24
     d08:	7f 91       	pop	r23
     d0a:	6f 91       	pop	r22
     d0c:	5f 91       	pop	r21
     d0e:	4f 91       	pop	r20
     d10:	3f 91       	pop	r19
     d12:	2f 91       	pop	r18
     d14:	0f 90       	pop	r0
     d16:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     d1a:	0f 90       	pop	r0
     d1c:	1f 90       	pop	r1
     d1e:	18 95       	reti

00000d20 <__cmpsf2>:
     d20:	0e 94 36 07 	call	0xe6c	; 0xe6c <__fp_cmp>
     d24:	08 f4       	brcc	.+2      	; 0xd28 <__cmpsf2+0x8>
     d26:	81 e0       	ldi	r24, 0x01	; 1
     d28:	08 95       	ret

00000d2a <__divsf3>:
     d2a:	0e 94 a9 06 	call	0xd52	; 0xd52 <__divsf3x>
     d2e:	0c 94 71 07 	jmp	0xee2	; 0xee2 <__fp_round>
     d32:	0e 94 6a 07 	call	0xed4	; 0xed4 <__fp_pscB>
     d36:	58 f0       	brcs	.+22     	; 0xd4e <__divsf3+0x24>
     d38:	0e 94 63 07 	call	0xec6	; 0xec6 <__fp_pscA>
     d3c:	40 f0       	brcs	.+16     	; 0xd4e <__divsf3+0x24>
     d3e:	29 f4       	brne	.+10     	; 0xd4a <__divsf3+0x20>
     d40:	5f 3f       	cpi	r21, 0xFF	; 255
     d42:	29 f0       	breq	.+10     	; 0xd4e <__divsf3+0x24>
     d44:	0c 94 5a 07 	jmp	0xeb4	; 0xeb4 <__fp_inf>
     d48:	51 11       	cpse	r21, r1
     d4a:	0c 94 a5 07 	jmp	0xf4a	; 0xf4a <__fp_szero>
     d4e:	0c 94 60 07 	jmp	0xec0	; 0xec0 <__fp_nan>

00000d52 <__divsf3x>:
     d52:	0e 94 82 07 	call	0xf04	; 0xf04 <__fp_split3>
     d56:	68 f3       	brcs	.-38     	; 0xd32 <__divsf3+0x8>

00000d58 <__divsf3_pse>:
     d58:	99 23       	and	r25, r25
     d5a:	b1 f3       	breq	.-20     	; 0xd48 <__divsf3+0x1e>
     d5c:	55 23       	and	r21, r21
     d5e:	91 f3       	breq	.-28     	; 0xd44 <__divsf3+0x1a>
     d60:	95 1b       	sub	r25, r21
     d62:	55 0b       	sbc	r21, r21
     d64:	bb 27       	eor	r27, r27
     d66:	aa 27       	eor	r26, r26
     d68:	62 17       	cp	r22, r18
     d6a:	73 07       	cpc	r23, r19
     d6c:	84 07       	cpc	r24, r20
     d6e:	38 f0       	brcs	.+14     	; 0xd7e <__divsf3_pse+0x26>
     d70:	9f 5f       	subi	r25, 0xFF	; 255
     d72:	5f 4f       	sbci	r21, 0xFF	; 255
     d74:	22 0f       	add	r18, r18
     d76:	33 1f       	adc	r19, r19
     d78:	44 1f       	adc	r20, r20
     d7a:	aa 1f       	adc	r26, r26
     d7c:	a9 f3       	breq	.-22     	; 0xd68 <__divsf3_pse+0x10>
     d7e:	35 d0       	rcall	.+106    	; 0xdea <__divsf3_pse+0x92>
     d80:	0e 2e       	mov	r0, r30
     d82:	3a f0       	brmi	.+14     	; 0xd92 <__divsf3_pse+0x3a>
     d84:	e0 e8       	ldi	r30, 0x80	; 128
     d86:	32 d0       	rcall	.+100    	; 0xdec <__divsf3_pse+0x94>
     d88:	91 50       	subi	r25, 0x01	; 1
     d8a:	50 40       	sbci	r21, 0x00	; 0
     d8c:	e6 95       	lsr	r30
     d8e:	00 1c       	adc	r0, r0
     d90:	ca f7       	brpl	.-14     	; 0xd84 <__divsf3_pse+0x2c>
     d92:	2b d0       	rcall	.+86     	; 0xdea <__divsf3_pse+0x92>
     d94:	fe 2f       	mov	r31, r30
     d96:	29 d0       	rcall	.+82     	; 0xdea <__divsf3_pse+0x92>
     d98:	66 0f       	add	r22, r22
     d9a:	77 1f       	adc	r23, r23
     d9c:	88 1f       	adc	r24, r24
     d9e:	bb 1f       	adc	r27, r27
     da0:	26 17       	cp	r18, r22
     da2:	37 07       	cpc	r19, r23
     da4:	48 07       	cpc	r20, r24
     da6:	ab 07       	cpc	r26, r27
     da8:	b0 e8       	ldi	r27, 0x80	; 128
     daa:	09 f0       	breq	.+2      	; 0xdae <__divsf3_pse+0x56>
     dac:	bb 0b       	sbc	r27, r27
     dae:	80 2d       	mov	r24, r0
     db0:	bf 01       	movw	r22, r30
     db2:	ff 27       	eor	r31, r31
     db4:	93 58       	subi	r25, 0x83	; 131
     db6:	5f 4f       	sbci	r21, 0xFF	; 255
     db8:	3a f0       	brmi	.+14     	; 0xdc8 <__divsf3_pse+0x70>
     dba:	9e 3f       	cpi	r25, 0xFE	; 254
     dbc:	51 05       	cpc	r21, r1
     dbe:	78 f0       	brcs	.+30     	; 0xdde <__divsf3_pse+0x86>
     dc0:	0c 94 5a 07 	jmp	0xeb4	; 0xeb4 <__fp_inf>
     dc4:	0c 94 a5 07 	jmp	0xf4a	; 0xf4a <__fp_szero>
     dc8:	5f 3f       	cpi	r21, 0xFF	; 255
     dca:	e4 f3       	brlt	.-8      	; 0xdc4 <__divsf3_pse+0x6c>
     dcc:	98 3e       	cpi	r25, 0xE8	; 232
     dce:	d4 f3       	brlt	.-12     	; 0xdc4 <__divsf3_pse+0x6c>
     dd0:	86 95       	lsr	r24
     dd2:	77 95       	ror	r23
     dd4:	67 95       	ror	r22
     dd6:	b7 95       	ror	r27
     dd8:	f7 95       	ror	r31
     dda:	9f 5f       	subi	r25, 0xFF	; 255
     ddc:	c9 f7       	brne	.-14     	; 0xdd0 <__divsf3_pse+0x78>
     dde:	88 0f       	add	r24, r24
     de0:	91 1d       	adc	r25, r1
     de2:	96 95       	lsr	r25
     de4:	87 95       	ror	r24
     de6:	97 f9       	bld	r25, 7
     de8:	08 95       	ret
     dea:	e1 e0       	ldi	r30, 0x01	; 1
     dec:	66 0f       	add	r22, r22
     dee:	77 1f       	adc	r23, r23
     df0:	88 1f       	adc	r24, r24
     df2:	bb 1f       	adc	r27, r27
     df4:	62 17       	cp	r22, r18
     df6:	73 07       	cpc	r23, r19
     df8:	84 07       	cpc	r24, r20
     dfa:	ba 07       	cpc	r27, r26
     dfc:	20 f0       	brcs	.+8      	; 0xe06 <__divsf3_pse+0xae>
     dfe:	62 1b       	sub	r22, r18
     e00:	73 0b       	sbc	r23, r19
     e02:	84 0b       	sbc	r24, r20
     e04:	ba 0b       	sbc	r27, r26
     e06:	ee 1f       	adc	r30, r30
     e08:	88 f7       	brcc	.-30     	; 0xdec <__divsf3_pse+0x94>
     e0a:	e0 95       	com	r30
     e0c:	08 95       	ret

00000e0e <__fixunssfsi>:
     e0e:	0e 94 8a 07 	call	0xf14	; 0xf14 <__fp_splitA>
     e12:	88 f0       	brcs	.+34     	; 0xe36 <__fixunssfsi+0x28>
     e14:	9f 57       	subi	r25, 0x7F	; 127
     e16:	98 f0       	brcs	.+38     	; 0xe3e <__fixunssfsi+0x30>
     e18:	b9 2f       	mov	r27, r25
     e1a:	99 27       	eor	r25, r25
     e1c:	b7 51       	subi	r27, 0x17	; 23
     e1e:	b0 f0       	brcs	.+44     	; 0xe4c <__fixunssfsi+0x3e>
     e20:	e1 f0       	breq	.+56     	; 0xe5a <__fixunssfsi+0x4c>
     e22:	66 0f       	add	r22, r22
     e24:	77 1f       	adc	r23, r23
     e26:	88 1f       	adc	r24, r24
     e28:	99 1f       	adc	r25, r25
     e2a:	1a f0       	brmi	.+6      	; 0xe32 <__fixunssfsi+0x24>
     e2c:	ba 95       	dec	r27
     e2e:	c9 f7       	brne	.-14     	; 0xe22 <__fixunssfsi+0x14>
     e30:	14 c0       	rjmp	.+40     	; 0xe5a <__fixunssfsi+0x4c>
     e32:	b1 30       	cpi	r27, 0x01	; 1
     e34:	91 f0       	breq	.+36     	; 0xe5a <__fixunssfsi+0x4c>
     e36:	0e 94 a4 07 	call	0xf48	; 0xf48 <__fp_zero>
     e3a:	b1 e0       	ldi	r27, 0x01	; 1
     e3c:	08 95       	ret
     e3e:	0c 94 a4 07 	jmp	0xf48	; 0xf48 <__fp_zero>
     e42:	67 2f       	mov	r22, r23
     e44:	78 2f       	mov	r23, r24
     e46:	88 27       	eor	r24, r24
     e48:	b8 5f       	subi	r27, 0xF8	; 248
     e4a:	39 f0       	breq	.+14     	; 0xe5a <__fixunssfsi+0x4c>
     e4c:	b9 3f       	cpi	r27, 0xF9	; 249
     e4e:	cc f3       	brlt	.-14     	; 0xe42 <__fixunssfsi+0x34>
     e50:	86 95       	lsr	r24
     e52:	77 95       	ror	r23
     e54:	67 95       	ror	r22
     e56:	b3 95       	inc	r27
     e58:	d9 f7       	brne	.-10     	; 0xe50 <__fixunssfsi+0x42>
     e5a:	3e f4       	brtc	.+14     	; 0xe6a <__fixunssfsi+0x5c>
     e5c:	90 95       	com	r25
     e5e:	80 95       	com	r24
     e60:	70 95       	com	r23
     e62:	61 95       	neg	r22
     e64:	7f 4f       	sbci	r23, 0xFF	; 255
     e66:	8f 4f       	sbci	r24, 0xFF	; 255
     e68:	9f 4f       	sbci	r25, 0xFF	; 255
     e6a:	08 95       	ret

00000e6c <__fp_cmp>:
     e6c:	99 0f       	add	r25, r25
     e6e:	00 08       	sbc	r0, r0
     e70:	55 0f       	add	r21, r21
     e72:	aa 0b       	sbc	r26, r26
     e74:	e0 e8       	ldi	r30, 0x80	; 128
     e76:	fe ef       	ldi	r31, 0xFE	; 254
     e78:	16 16       	cp	r1, r22
     e7a:	17 06       	cpc	r1, r23
     e7c:	e8 07       	cpc	r30, r24
     e7e:	f9 07       	cpc	r31, r25
     e80:	c0 f0       	brcs	.+48     	; 0xeb2 <__fp_cmp+0x46>
     e82:	12 16       	cp	r1, r18
     e84:	13 06       	cpc	r1, r19
     e86:	e4 07       	cpc	r30, r20
     e88:	f5 07       	cpc	r31, r21
     e8a:	98 f0       	brcs	.+38     	; 0xeb2 <__fp_cmp+0x46>
     e8c:	62 1b       	sub	r22, r18
     e8e:	73 0b       	sbc	r23, r19
     e90:	84 0b       	sbc	r24, r20
     e92:	95 0b       	sbc	r25, r21
     e94:	39 f4       	brne	.+14     	; 0xea4 <__fp_cmp+0x38>
     e96:	0a 26       	eor	r0, r26
     e98:	61 f0       	breq	.+24     	; 0xeb2 <__fp_cmp+0x46>
     e9a:	23 2b       	or	r18, r19
     e9c:	24 2b       	or	r18, r20
     e9e:	25 2b       	or	r18, r21
     ea0:	21 f4       	brne	.+8      	; 0xeaa <__fp_cmp+0x3e>
     ea2:	08 95       	ret
     ea4:	0a 26       	eor	r0, r26
     ea6:	09 f4       	brne	.+2      	; 0xeaa <__fp_cmp+0x3e>
     ea8:	a1 40       	sbci	r26, 0x01	; 1
     eaa:	a6 95       	lsr	r26
     eac:	8f ef       	ldi	r24, 0xFF	; 255
     eae:	81 1d       	adc	r24, r1
     eb0:	81 1d       	adc	r24, r1
     eb2:	08 95       	ret

00000eb4 <__fp_inf>:
     eb4:	97 f9       	bld	r25, 7
     eb6:	9f 67       	ori	r25, 0x7F	; 127
     eb8:	80 e8       	ldi	r24, 0x80	; 128
     eba:	70 e0       	ldi	r23, 0x00	; 0
     ebc:	60 e0       	ldi	r22, 0x00	; 0
     ebe:	08 95       	ret

00000ec0 <__fp_nan>:
     ec0:	9f ef       	ldi	r25, 0xFF	; 255
     ec2:	80 ec       	ldi	r24, 0xC0	; 192
     ec4:	08 95       	ret

00000ec6 <__fp_pscA>:
     ec6:	00 24       	eor	r0, r0
     ec8:	0a 94       	dec	r0
     eca:	16 16       	cp	r1, r22
     ecc:	17 06       	cpc	r1, r23
     ece:	18 06       	cpc	r1, r24
     ed0:	09 06       	cpc	r0, r25
     ed2:	08 95       	ret

00000ed4 <__fp_pscB>:
     ed4:	00 24       	eor	r0, r0
     ed6:	0a 94       	dec	r0
     ed8:	12 16       	cp	r1, r18
     eda:	13 06       	cpc	r1, r19
     edc:	14 06       	cpc	r1, r20
     ede:	05 06       	cpc	r0, r21
     ee0:	08 95       	ret

00000ee2 <__fp_round>:
     ee2:	09 2e       	mov	r0, r25
     ee4:	03 94       	inc	r0
     ee6:	00 0c       	add	r0, r0
     ee8:	11 f4       	brne	.+4      	; 0xeee <__fp_round+0xc>
     eea:	88 23       	and	r24, r24
     eec:	52 f0       	brmi	.+20     	; 0xf02 <__fp_round+0x20>
     eee:	bb 0f       	add	r27, r27
     ef0:	40 f4       	brcc	.+16     	; 0xf02 <__fp_round+0x20>
     ef2:	bf 2b       	or	r27, r31
     ef4:	11 f4       	brne	.+4      	; 0xefa <__fp_round+0x18>
     ef6:	60 ff       	sbrs	r22, 0
     ef8:	04 c0       	rjmp	.+8      	; 0xf02 <__fp_round+0x20>
     efa:	6f 5f       	subi	r22, 0xFF	; 255
     efc:	7f 4f       	sbci	r23, 0xFF	; 255
     efe:	8f 4f       	sbci	r24, 0xFF	; 255
     f00:	9f 4f       	sbci	r25, 0xFF	; 255
     f02:	08 95       	ret

00000f04 <__fp_split3>:
     f04:	57 fd       	sbrc	r21, 7
     f06:	90 58       	subi	r25, 0x80	; 128
     f08:	44 0f       	add	r20, r20
     f0a:	55 1f       	adc	r21, r21
     f0c:	59 f0       	breq	.+22     	; 0xf24 <__fp_splitA+0x10>
     f0e:	5f 3f       	cpi	r21, 0xFF	; 255
     f10:	71 f0       	breq	.+28     	; 0xf2e <__fp_splitA+0x1a>
     f12:	47 95       	ror	r20

00000f14 <__fp_splitA>:
     f14:	88 0f       	add	r24, r24
     f16:	97 fb       	bst	r25, 7
     f18:	99 1f       	adc	r25, r25
     f1a:	61 f0       	breq	.+24     	; 0xf34 <__fp_splitA+0x20>
     f1c:	9f 3f       	cpi	r25, 0xFF	; 255
     f1e:	79 f0       	breq	.+30     	; 0xf3e <__fp_splitA+0x2a>
     f20:	87 95       	ror	r24
     f22:	08 95       	ret
     f24:	12 16       	cp	r1, r18
     f26:	13 06       	cpc	r1, r19
     f28:	14 06       	cpc	r1, r20
     f2a:	55 1f       	adc	r21, r21
     f2c:	f2 cf       	rjmp	.-28     	; 0xf12 <__fp_split3+0xe>
     f2e:	46 95       	lsr	r20
     f30:	f1 df       	rcall	.-30     	; 0xf14 <__fp_splitA>
     f32:	08 c0       	rjmp	.+16     	; 0xf44 <__fp_splitA+0x30>
     f34:	16 16       	cp	r1, r22
     f36:	17 06       	cpc	r1, r23
     f38:	18 06       	cpc	r1, r24
     f3a:	99 1f       	adc	r25, r25
     f3c:	f1 cf       	rjmp	.-30     	; 0xf20 <__fp_splitA+0xc>
     f3e:	86 95       	lsr	r24
     f40:	71 05       	cpc	r23, r1
     f42:	61 05       	cpc	r22, r1
     f44:	08 94       	sec
     f46:	08 95       	ret

00000f48 <__fp_zero>:
     f48:	e8 94       	clt

00000f4a <__fp_szero>:
     f4a:	bb 27       	eor	r27, r27
     f4c:	66 27       	eor	r22, r22
     f4e:	77 27       	eor	r23, r23
     f50:	cb 01       	movw	r24, r22
     f52:	97 f9       	bld	r25, 7
     f54:	08 95       	ret

00000f56 <__gesf2>:
     f56:	0e 94 36 07 	call	0xe6c	; 0xe6c <__fp_cmp>
     f5a:	08 f4       	brcc	.+2      	; 0xf5e <__gesf2+0x8>
     f5c:	8f ef       	ldi	r24, 0xFF	; 255
     f5e:	08 95       	ret

00000f60 <__mulsf3>:
     f60:	0e 94 c3 07 	call	0xf86	; 0xf86 <__mulsf3x>
     f64:	0c 94 71 07 	jmp	0xee2	; 0xee2 <__fp_round>
     f68:	0e 94 63 07 	call	0xec6	; 0xec6 <__fp_pscA>
     f6c:	38 f0       	brcs	.+14     	; 0xf7c <__mulsf3+0x1c>
     f6e:	0e 94 6a 07 	call	0xed4	; 0xed4 <__fp_pscB>
     f72:	20 f0       	brcs	.+8      	; 0xf7c <__mulsf3+0x1c>
     f74:	95 23       	and	r25, r21
     f76:	11 f0       	breq	.+4      	; 0xf7c <__mulsf3+0x1c>
     f78:	0c 94 5a 07 	jmp	0xeb4	; 0xeb4 <__fp_inf>
     f7c:	0c 94 60 07 	jmp	0xec0	; 0xec0 <__fp_nan>
     f80:	11 24       	eor	r1, r1
     f82:	0c 94 a5 07 	jmp	0xf4a	; 0xf4a <__fp_szero>

00000f86 <__mulsf3x>:
     f86:	0e 94 82 07 	call	0xf04	; 0xf04 <__fp_split3>
     f8a:	70 f3       	brcs	.-36     	; 0xf68 <__mulsf3+0x8>

00000f8c <__mulsf3_pse>:
     f8c:	95 9f       	mul	r25, r21
     f8e:	c1 f3       	breq	.-16     	; 0xf80 <__mulsf3+0x20>
     f90:	95 0f       	add	r25, r21
     f92:	50 e0       	ldi	r21, 0x00	; 0
     f94:	55 1f       	adc	r21, r21
     f96:	62 9f       	mul	r22, r18
     f98:	f0 01       	movw	r30, r0
     f9a:	72 9f       	mul	r23, r18
     f9c:	bb 27       	eor	r27, r27
     f9e:	f0 0d       	add	r31, r0
     fa0:	b1 1d       	adc	r27, r1
     fa2:	63 9f       	mul	r22, r19
     fa4:	aa 27       	eor	r26, r26
     fa6:	f0 0d       	add	r31, r0
     fa8:	b1 1d       	adc	r27, r1
     faa:	aa 1f       	adc	r26, r26
     fac:	64 9f       	mul	r22, r20
     fae:	66 27       	eor	r22, r22
     fb0:	b0 0d       	add	r27, r0
     fb2:	a1 1d       	adc	r26, r1
     fb4:	66 1f       	adc	r22, r22
     fb6:	82 9f       	mul	r24, r18
     fb8:	22 27       	eor	r18, r18
     fba:	b0 0d       	add	r27, r0
     fbc:	a1 1d       	adc	r26, r1
     fbe:	62 1f       	adc	r22, r18
     fc0:	73 9f       	mul	r23, r19
     fc2:	b0 0d       	add	r27, r0
     fc4:	a1 1d       	adc	r26, r1
     fc6:	62 1f       	adc	r22, r18
     fc8:	83 9f       	mul	r24, r19
     fca:	a0 0d       	add	r26, r0
     fcc:	61 1d       	adc	r22, r1
     fce:	22 1f       	adc	r18, r18
     fd0:	74 9f       	mul	r23, r20
     fd2:	33 27       	eor	r19, r19
     fd4:	a0 0d       	add	r26, r0
     fd6:	61 1d       	adc	r22, r1
     fd8:	23 1f       	adc	r18, r19
     fda:	84 9f       	mul	r24, r20
     fdc:	60 0d       	add	r22, r0
     fde:	21 1d       	adc	r18, r1
     fe0:	82 2f       	mov	r24, r18
     fe2:	76 2f       	mov	r23, r22
     fe4:	6a 2f       	mov	r22, r26
     fe6:	11 24       	eor	r1, r1
     fe8:	9f 57       	subi	r25, 0x7F	; 127
     fea:	50 40       	sbci	r21, 0x00	; 0
     fec:	9a f0       	brmi	.+38     	; 0x1014 <__mulsf3_pse+0x88>
     fee:	f1 f0       	breq	.+60     	; 0x102c <__mulsf3_pse+0xa0>
     ff0:	88 23       	and	r24, r24
     ff2:	4a f0       	brmi	.+18     	; 0x1006 <__mulsf3_pse+0x7a>
     ff4:	ee 0f       	add	r30, r30
     ff6:	ff 1f       	adc	r31, r31
     ff8:	bb 1f       	adc	r27, r27
     ffa:	66 1f       	adc	r22, r22
     ffc:	77 1f       	adc	r23, r23
     ffe:	88 1f       	adc	r24, r24
    1000:	91 50       	subi	r25, 0x01	; 1
    1002:	50 40       	sbci	r21, 0x00	; 0
    1004:	a9 f7       	brne	.-22     	; 0xff0 <__mulsf3_pse+0x64>
    1006:	9e 3f       	cpi	r25, 0xFE	; 254
    1008:	51 05       	cpc	r21, r1
    100a:	80 f0       	brcs	.+32     	; 0x102c <__mulsf3_pse+0xa0>
    100c:	0c 94 5a 07 	jmp	0xeb4	; 0xeb4 <__fp_inf>
    1010:	0c 94 a5 07 	jmp	0xf4a	; 0xf4a <__fp_szero>
    1014:	5f 3f       	cpi	r21, 0xFF	; 255
    1016:	e4 f3       	brlt	.-8      	; 0x1010 <__mulsf3_pse+0x84>
    1018:	98 3e       	cpi	r25, 0xE8	; 232
    101a:	d4 f3       	brlt	.-12     	; 0x1010 <__mulsf3_pse+0x84>
    101c:	86 95       	lsr	r24
    101e:	77 95       	ror	r23
    1020:	67 95       	ror	r22
    1022:	b7 95       	ror	r27
    1024:	f7 95       	ror	r31
    1026:	e7 95       	ror	r30
    1028:	9f 5f       	subi	r25, 0xFF	; 255
    102a:	c1 f7       	brne	.-16     	; 0x101c <__mulsf3_pse+0x90>
    102c:	fe 2b       	or	r31, r30
    102e:	88 0f       	add	r24, r24
    1030:	91 1d       	adc	r25, r1
    1032:	96 95       	lsr	r25
    1034:	87 95       	ror	r24
    1036:	97 f9       	bld	r25, 7
    1038:	08 95       	ret

0000103a <__udivmodhi4>:
    103a:	aa 1b       	sub	r26, r26
    103c:	bb 1b       	sub	r27, r27
    103e:	51 e1       	ldi	r21, 0x11	; 17
    1040:	07 c0       	rjmp	.+14     	; 0x1050 <__udivmodhi4_ep>

00001042 <__udivmodhi4_loop>:
    1042:	aa 1f       	adc	r26, r26
    1044:	bb 1f       	adc	r27, r27
    1046:	a6 17       	cp	r26, r22
    1048:	b7 07       	cpc	r27, r23
    104a:	10 f0       	brcs	.+4      	; 0x1050 <__udivmodhi4_ep>
    104c:	a6 1b       	sub	r26, r22
    104e:	b7 0b       	sbc	r27, r23

00001050 <__udivmodhi4_ep>:
    1050:	88 1f       	adc	r24, r24
    1052:	99 1f       	adc	r25, r25
    1054:	5a 95       	dec	r21
    1056:	a9 f7       	brne	.-22     	; 0x1042 <__udivmodhi4_loop>
    1058:	80 95       	com	r24
    105a:	90 95       	com	r25
    105c:	bc 01       	movw	r22, r24
    105e:	cd 01       	movw	r24, r26
    1060:	08 95       	ret

00001062 <__udivmodsi4>:
    1062:	a1 e2       	ldi	r26, 0x21	; 33
    1064:	1a 2e       	mov	r1, r26
    1066:	aa 1b       	sub	r26, r26
    1068:	bb 1b       	sub	r27, r27
    106a:	fd 01       	movw	r30, r26
    106c:	0d c0       	rjmp	.+26     	; 0x1088 <__udivmodsi4_ep>

0000106e <__udivmodsi4_loop>:
    106e:	aa 1f       	adc	r26, r26
    1070:	bb 1f       	adc	r27, r27
    1072:	ee 1f       	adc	r30, r30
    1074:	ff 1f       	adc	r31, r31
    1076:	a2 17       	cp	r26, r18
    1078:	b3 07       	cpc	r27, r19
    107a:	e4 07       	cpc	r30, r20
    107c:	f5 07       	cpc	r31, r21
    107e:	20 f0       	brcs	.+8      	; 0x1088 <__udivmodsi4_ep>
    1080:	a2 1b       	sub	r26, r18
    1082:	b3 0b       	sbc	r27, r19
    1084:	e4 0b       	sbc	r30, r20
    1086:	f5 0b       	sbc	r31, r21

00001088 <__udivmodsi4_ep>:
    1088:	66 1f       	adc	r22, r22
    108a:	77 1f       	adc	r23, r23
    108c:	88 1f       	adc	r24, r24
    108e:	99 1f       	adc	r25, r25
    1090:	1a 94       	dec	r1
    1092:	69 f7       	brne	.-38     	; 0x106e <__udivmodsi4_loop>
    1094:	60 95       	com	r22
    1096:	70 95       	com	r23
    1098:	80 95       	com	r24
    109a:	90 95       	com	r25
    109c:	9b 01       	movw	r18, r22
    109e:	ac 01       	movw	r20, r24
    10a0:	bd 01       	movw	r22, r26
    10a2:	cf 01       	movw	r24, r30
    10a4:	08 95       	ret

000010a6 <atoi>:
    10a6:	fc 01       	movw	r30, r24
    10a8:	88 27       	eor	r24, r24
    10aa:	99 27       	eor	r25, r25
    10ac:	e8 94       	clt
    10ae:	21 91       	ld	r18, Z+
    10b0:	20 32       	cpi	r18, 0x20	; 32
    10b2:	e9 f3       	breq	.-6      	; 0x10ae <atoi+0x8>
    10b4:	29 30       	cpi	r18, 0x09	; 9
    10b6:	10 f0       	brcs	.+4      	; 0x10bc <atoi+0x16>
    10b8:	2e 30       	cpi	r18, 0x0E	; 14
    10ba:	c8 f3       	brcs	.-14     	; 0x10ae <atoi+0x8>
    10bc:	2b 32       	cpi	r18, 0x2B	; 43
    10be:	41 f0       	breq	.+16     	; 0x10d0 <atoi+0x2a>
    10c0:	2d 32       	cpi	r18, 0x2D	; 45
    10c2:	39 f4       	brne	.+14     	; 0x10d2 <atoi+0x2c>
    10c4:	68 94       	set
    10c6:	04 c0       	rjmp	.+8      	; 0x10d0 <atoi+0x2a>
    10c8:	0e 94 88 08 	call	0x1110	; 0x1110 <__mulhi_const_10>
    10cc:	82 0f       	add	r24, r18
    10ce:	91 1d       	adc	r25, r1
    10d0:	21 91       	ld	r18, Z+
    10d2:	20 53       	subi	r18, 0x30	; 48
    10d4:	2a 30       	cpi	r18, 0x0A	; 10
    10d6:	c0 f3       	brcs	.-16     	; 0x10c8 <atoi+0x22>
    10d8:	1e f4       	brtc	.+6      	; 0x10e0 <atoi+0x3a>
    10da:	90 95       	com	r25
    10dc:	81 95       	neg	r24
    10de:	9f 4f       	sbci	r25, 0xFF	; 255
    10e0:	08 95       	ret

000010e2 <memset>:
    10e2:	dc 01       	movw	r26, r24
    10e4:	01 c0       	rjmp	.+2      	; 0x10e8 <memset+0x6>
    10e6:	6d 93       	st	X+, r22
    10e8:	41 50       	subi	r20, 0x01	; 1
    10ea:	50 40       	sbci	r21, 0x00	; 0
    10ec:	e0 f7       	brcc	.-8      	; 0x10e6 <memset+0x4>
    10ee:	08 95       	ret

000010f0 <strcpy>:
    10f0:	fb 01       	movw	r30, r22
    10f2:	dc 01       	movw	r26, r24
    10f4:	01 90       	ld	r0, Z+
    10f6:	0d 92       	st	X+, r0
    10f8:	00 20       	and	r0, r0
    10fa:	e1 f7       	brne	.-8      	; 0x10f4 <strcpy+0x4>
    10fc:	08 95       	ret

000010fe <strlen>:
    10fe:	fc 01       	movw	r30, r24
    1100:	01 90       	ld	r0, Z+
    1102:	00 20       	and	r0, r0
    1104:	e9 f7       	brne	.-6      	; 0x1100 <strlen+0x2>
    1106:	80 95       	com	r24
    1108:	90 95       	com	r25
    110a:	8e 0f       	add	r24, r30
    110c:	9f 1f       	adc	r25, r31
    110e:	08 95       	ret

00001110 <__mulhi_const_10>:
    1110:	7a e0       	ldi	r23, 0x0A	; 10
    1112:	97 9f       	mul	r25, r23
    1114:	90 2d       	mov	r25, r0
    1116:	87 9f       	mul	r24, r23
    1118:	80 2d       	mov	r24, r0
    111a:	91 0d       	add	r25, r1
    111c:	11 24       	eor	r1, r1
    111e:	08 95       	ret

00001120 <sprintf_P>:
    1120:	ae e0       	ldi	r26, 0x0E	; 14
    1122:	b0 e0       	ldi	r27, 0x00	; 0
    1124:	e6 e9       	ldi	r30, 0x96	; 150
    1126:	f8 e0       	ldi	r31, 0x08	; 8
    1128:	0c 94 67 0b 	jmp	0x16ce	; 0x16ce <__prologue_saves__+0x1c>
    112c:	0d 89       	ldd	r16, Y+21	; 0x15
    112e:	1e 89       	ldd	r17, Y+22	; 0x16
    1130:	8e e0       	ldi	r24, 0x0E	; 14
    1132:	8c 83       	std	Y+4, r24	; 0x04
    1134:	1a 83       	std	Y+2, r17	; 0x02
    1136:	09 83       	std	Y+1, r16	; 0x01
    1138:	8f ef       	ldi	r24, 0xFF	; 255
    113a:	9f e7       	ldi	r25, 0x7F	; 127
    113c:	9e 83       	std	Y+6, r25	; 0x06
    113e:	8d 83       	std	Y+5, r24	; 0x05
    1140:	ae 01       	movw	r20, r28
    1142:	47 5e       	subi	r20, 0xE7	; 231
    1144:	5f 4f       	sbci	r21, 0xFF	; 255
    1146:	6f 89       	ldd	r22, Y+23	; 0x17
    1148:	78 8d       	ldd	r23, Y+24	; 0x18
    114a:	ce 01       	movw	r24, r28
    114c:	01 96       	adiw	r24, 0x01	; 1
    114e:	0e 94 b2 08 	call	0x1164	; 0x1164 <vfprintf>
    1152:	ef 81       	ldd	r30, Y+7	; 0x07
    1154:	f8 85       	ldd	r31, Y+8	; 0x08
    1156:	e0 0f       	add	r30, r16
    1158:	f1 1f       	adc	r31, r17
    115a:	10 82       	st	Z, r1
    115c:	2e 96       	adiw	r28, 0x0e	; 14
    115e:	e4 e0       	ldi	r30, 0x04	; 4
    1160:	0c 94 83 0b 	jmp	0x1706	; 0x1706 <__epilogue_restores__+0x1c>

00001164 <vfprintf>:
    1164:	ab e0       	ldi	r26, 0x0B	; 11
    1166:	b0 e0       	ldi	r27, 0x00	; 0
    1168:	e8 eb       	ldi	r30, 0xB8	; 184
    116a:	f8 e0       	ldi	r31, 0x08	; 8
    116c:	0c 94 59 0b 	jmp	0x16b2	; 0x16b2 <__prologue_saves__>
    1170:	6c 01       	movw	r12, r24
    1172:	7b 01       	movw	r14, r22
    1174:	8a 01       	movw	r16, r20
    1176:	fc 01       	movw	r30, r24
    1178:	17 82       	std	Z+7, r1	; 0x07
    117a:	16 82       	std	Z+6, r1	; 0x06
    117c:	83 81       	ldd	r24, Z+3	; 0x03
    117e:	81 ff       	sbrs	r24, 1
    1180:	cc c1       	rjmp	.+920    	; 0x151a <vfprintf+0x3b6>
    1182:	ce 01       	movw	r24, r28
    1184:	01 96       	adiw	r24, 0x01	; 1
    1186:	3c 01       	movw	r6, r24
    1188:	f6 01       	movw	r30, r12
    118a:	93 81       	ldd	r25, Z+3	; 0x03
    118c:	f7 01       	movw	r30, r14
    118e:	93 fd       	sbrc	r25, 3
    1190:	85 91       	lpm	r24, Z+
    1192:	93 ff       	sbrs	r25, 3
    1194:	81 91       	ld	r24, Z+
    1196:	7f 01       	movw	r14, r30
    1198:	88 23       	and	r24, r24
    119a:	09 f4       	brne	.+2      	; 0x119e <vfprintf+0x3a>
    119c:	ba c1       	rjmp	.+884    	; 0x1512 <vfprintf+0x3ae>
    119e:	85 32       	cpi	r24, 0x25	; 37
    11a0:	39 f4       	brne	.+14     	; 0x11b0 <vfprintf+0x4c>
    11a2:	93 fd       	sbrc	r25, 3
    11a4:	85 91       	lpm	r24, Z+
    11a6:	93 ff       	sbrs	r25, 3
    11a8:	81 91       	ld	r24, Z+
    11aa:	7f 01       	movw	r14, r30
    11ac:	85 32       	cpi	r24, 0x25	; 37
    11ae:	29 f4       	brne	.+10     	; 0x11ba <vfprintf+0x56>
    11b0:	b6 01       	movw	r22, r12
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	0e 94 a9 0a 	call	0x1552	; 0x1552 <fputc>
    11b8:	e7 cf       	rjmp	.-50     	; 0x1188 <vfprintf+0x24>
    11ba:	91 2c       	mov	r9, r1
    11bc:	21 2c       	mov	r2, r1
    11be:	31 2c       	mov	r3, r1
    11c0:	ff e1       	ldi	r31, 0x1F	; 31
    11c2:	f3 15       	cp	r31, r3
    11c4:	d8 f0       	brcs	.+54     	; 0x11fc <vfprintf+0x98>
    11c6:	8b 32       	cpi	r24, 0x2B	; 43
    11c8:	79 f0       	breq	.+30     	; 0x11e8 <vfprintf+0x84>
    11ca:	38 f4       	brcc	.+14     	; 0x11da <vfprintf+0x76>
    11cc:	80 32       	cpi	r24, 0x20	; 32
    11ce:	79 f0       	breq	.+30     	; 0x11ee <vfprintf+0x8a>
    11d0:	83 32       	cpi	r24, 0x23	; 35
    11d2:	a1 f4       	brne	.+40     	; 0x11fc <vfprintf+0x98>
    11d4:	23 2d       	mov	r18, r3
    11d6:	20 61       	ori	r18, 0x10	; 16
    11d8:	1d c0       	rjmp	.+58     	; 0x1214 <vfprintf+0xb0>
    11da:	8d 32       	cpi	r24, 0x2D	; 45
    11dc:	61 f0       	breq	.+24     	; 0x11f6 <vfprintf+0x92>
    11de:	80 33       	cpi	r24, 0x30	; 48
    11e0:	69 f4       	brne	.+26     	; 0x11fc <vfprintf+0x98>
    11e2:	23 2d       	mov	r18, r3
    11e4:	21 60       	ori	r18, 0x01	; 1
    11e6:	16 c0       	rjmp	.+44     	; 0x1214 <vfprintf+0xb0>
    11e8:	83 2d       	mov	r24, r3
    11ea:	82 60       	ori	r24, 0x02	; 2
    11ec:	38 2e       	mov	r3, r24
    11ee:	e3 2d       	mov	r30, r3
    11f0:	e4 60       	ori	r30, 0x04	; 4
    11f2:	3e 2e       	mov	r3, r30
    11f4:	2a c0       	rjmp	.+84     	; 0x124a <vfprintf+0xe6>
    11f6:	f3 2d       	mov	r31, r3
    11f8:	f8 60       	ori	r31, 0x08	; 8
    11fa:	1d c0       	rjmp	.+58     	; 0x1236 <vfprintf+0xd2>
    11fc:	37 fc       	sbrc	r3, 7
    11fe:	2d c0       	rjmp	.+90     	; 0x125a <vfprintf+0xf6>
    1200:	20 ed       	ldi	r18, 0xD0	; 208
    1202:	28 0f       	add	r18, r24
    1204:	2a 30       	cpi	r18, 0x0A	; 10
    1206:	40 f0       	brcs	.+16     	; 0x1218 <vfprintf+0xb4>
    1208:	8e 32       	cpi	r24, 0x2E	; 46
    120a:	b9 f4       	brne	.+46     	; 0x123a <vfprintf+0xd6>
    120c:	36 fc       	sbrc	r3, 6
    120e:	81 c1       	rjmp	.+770    	; 0x1512 <vfprintf+0x3ae>
    1210:	23 2d       	mov	r18, r3
    1212:	20 64       	ori	r18, 0x40	; 64
    1214:	32 2e       	mov	r3, r18
    1216:	19 c0       	rjmp	.+50     	; 0x124a <vfprintf+0xe6>
    1218:	36 fe       	sbrs	r3, 6
    121a:	06 c0       	rjmp	.+12     	; 0x1228 <vfprintf+0xc4>
    121c:	8a e0       	ldi	r24, 0x0A	; 10
    121e:	98 9e       	mul	r9, r24
    1220:	20 0d       	add	r18, r0
    1222:	11 24       	eor	r1, r1
    1224:	92 2e       	mov	r9, r18
    1226:	11 c0       	rjmp	.+34     	; 0x124a <vfprintf+0xe6>
    1228:	ea e0       	ldi	r30, 0x0A	; 10
    122a:	2e 9e       	mul	r2, r30
    122c:	20 0d       	add	r18, r0
    122e:	11 24       	eor	r1, r1
    1230:	22 2e       	mov	r2, r18
    1232:	f3 2d       	mov	r31, r3
    1234:	f0 62       	ori	r31, 0x20	; 32
    1236:	3f 2e       	mov	r3, r31
    1238:	08 c0       	rjmp	.+16     	; 0x124a <vfprintf+0xe6>
    123a:	8c 36       	cpi	r24, 0x6C	; 108
    123c:	21 f4       	brne	.+8      	; 0x1246 <vfprintf+0xe2>
    123e:	83 2d       	mov	r24, r3
    1240:	80 68       	ori	r24, 0x80	; 128
    1242:	38 2e       	mov	r3, r24
    1244:	02 c0       	rjmp	.+4      	; 0x124a <vfprintf+0xe6>
    1246:	88 36       	cpi	r24, 0x68	; 104
    1248:	41 f4       	brne	.+16     	; 0x125a <vfprintf+0xf6>
    124a:	f7 01       	movw	r30, r14
    124c:	93 fd       	sbrc	r25, 3
    124e:	85 91       	lpm	r24, Z+
    1250:	93 ff       	sbrs	r25, 3
    1252:	81 91       	ld	r24, Z+
    1254:	7f 01       	movw	r14, r30
    1256:	81 11       	cpse	r24, r1
    1258:	b3 cf       	rjmp	.-154    	; 0x11c0 <vfprintf+0x5c>
    125a:	98 2f       	mov	r25, r24
    125c:	9f 7d       	andi	r25, 0xDF	; 223
    125e:	95 54       	subi	r25, 0x45	; 69
    1260:	93 30       	cpi	r25, 0x03	; 3
    1262:	28 f4       	brcc	.+10     	; 0x126e <vfprintf+0x10a>
    1264:	0c 5f       	subi	r16, 0xFC	; 252
    1266:	1f 4f       	sbci	r17, 0xFF	; 255
    1268:	9f e3       	ldi	r25, 0x3F	; 63
    126a:	99 83       	std	Y+1, r25	; 0x01
    126c:	0d c0       	rjmp	.+26     	; 0x1288 <vfprintf+0x124>
    126e:	83 36       	cpi	r24, 0x63	; 99
    1270:	31 f0       	breq	.+12     	; 0x127e <vfprintf+0x11a>
    1272:	83 37       	cpi	r24, 0x73	; 115
    1274:	71 f0       	breq	.+28     	; 0x1292 <vfprintf+0x12e>
    1276:	83 35       	cpi	r24, 0x53	; 83
    1278:	09 f0       	breq	.+2      	; 0x127c <vfprintf+0x118>
    127a:	59 c0       	rjmp	.+178    	; 0x132e <vfprintf+0x1ca>
    127c:	21 c0       	rjmp	.+66     	; 0x12c0 <vfprintf+0x15c>
    127e:	f8 01       	movw	r30, r16
    1280:	80 81       	ld	r24, Z
    1282:	89 83       	std	Y+1, r24	; 0x01
    1284:	0e 5f       	subi	r16, 0xFE	; 254
    1286:	1f 4f       	sbci	r17, 0xFF	; 255
    1288:	88 24       	eor	r8, r8
    128a:	83 94       	inc	r8
    128c:	91 2c       	mov	r9, r1
    128e:	53 01       	movw	r10, r6
    1290:	13 c0       	rjmp	.+38     	; 0x12b8 <vfprintf+0x154>
    1292:	28 01       	movw	r4, r16
    1294:	f2 e0       	ldi	r31, 0x02	; 2
    1296:	4f 0e       	add	r4, r31
    1298:	51 1c       	adc	r5, r1
    129a:	f8 01       	movw	r30, r16
    129c:	a0 80       	ld	r10, Z
    129e:	b1 80       	ldd	r11, Z+1	; 0x01
    12a0:	36 fe       	sbrs	r3, 6
    12a2:	03 c0       	rjmp	.+6      	; 0x12aa <vfprintf+0x146>
    12a4:	69 2d       	mov	r22, r9
    12a6:	70 e0       	ldi	r23, 0x00	; 0
    12a8:	02 c0       	rjmp	.+4      	; 0x12ae <vfprintf+0x14a>
    12aa:	6f ef       	ldi	r22, 0xFF	; 255
    12ac:	7f ef       	ldi	r23, 0xFF	; 255
    12ae:	c5 01       	movw	r24, r10
    12b0:	0e 94 9e 0a 	call	0x153c	; 0x153c <strnlen>
    12b4:	4c 01       	movw	r8, r24
    12b6:	82 01       	movw	r16, r4
    12b8:	f3 2d       	mov	r31, r3
    12ba:	ff 77       	andi	r31, 0x7F	; 127
    12bc:	3f 2e       	mov	r3, r31
    12be:	16 c0       	rjmp	.+44     	; 0x12ec <vfprintf+0x188>
    12c0:	28 01       	movw	r4, r16
    12c2:	22 e0       	ldi	r18, 0x02	; 2
    12c4:	42 0e       	add	r4, r18
    12c6:	51 1c       	adc	r5, r1
    12c8:	f8 01       	movw	r30, r16
    12ca:	a0 80       	ld	r10, Z
    12cc:	b1 80       	ldd	r11, Z+1	; 0x01
    12ce:	36 fe       	sbrs	r3, 6
    12d0:	03 c0       	rjmp	.+6      	; 0x12d8 <vfprintf+0x174>
    12d2:	69 2d       	mov	r22, r9
    12d4:	70 e0       	ldi	r23, 0x00	; 0
    12d6:	02 c0       	rjmp	.+4      	; 0x12dc <vfprintf+0x178>
    12d8:	6f ef       	ldi	r22, 0xFF	; 255
    12da:	7f ef       	ldi	r23, 0xFF	; 255
    12dc:	c5 01       	movw	r24, r10
    12de:	0e 94 93 0a 	call	0x1526	; 0x1526 <strnlen_P>
    12e2:	4c 01       	movw	r8, r24
    12e4:	f3 2d       	mov	r31, r3
    12e6:	f0 68       	ori	r31, 0x80	; 128
    12e8:	3f 2e       	mov	r3, r31
    12ea:	82 01       	movw	r16, r4
    12ec:	33 fc       	sbrc	r3, 3
    12ee:	1b c0       	rjmp	.+54     	; 0x1326 <vfprintf+0x1c2>
    12f0:	82 2d       	mov	r24, r2
    12f2:	90 e0       	ldi	r25, 0x00	; 0
    12f4:	88 16       	cp	r8, r24
    12f6:	99 06       	cpc	r9, r25
    12f8:	b0 f4       	brcc	.+44     	; 0x1326 <vfprintf+0x1c2>
    12fa:	b6 01       	movw	r22, r12
    12fc:	80 e2       	ldi	r24, 0x20	; 32
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	0e 94 a9 0a 	call	0x1552	; 0x1552 <fputc>
    1304:	2a 94       	dec	r2
    1306:	f4 cf       	rjmp	.-24     	; 0x12f0 <vfprintf+0x18c>
    1308:	f5 01       	movw	r30, r10
    130a:	37 fc       	sbrc	r3, 7
    130c:	85 91       	lpm	r24, Z+
    130e:	37 fe       	sbrs	r3, 7
    1310:	81 91       	ld	r24, Z+
    1312:	5f 01       	movw	r10, r30
    1314:	b6 01       	movw	r22, r12
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	0e 94 a9 0a 	call	0x1552	; 0x1552 <fputc>
    131c:	21 10       	cpse	r2, r1
    131e:	2a 94       	dec	r2
    1320:	21 e0       	ldi	r18, 0x01	; 1
    1322:	82 1a       	sub	r8, r18
    1324:	91 08       	sbc	r9, r1
    1326:	81 14       	cp	r8, r1
    1328:	91 04       	cpc	r9, r1
    132a:	71 f7       	brne	.-36     	; 0x1308 <vfprintf+0x1a4>
    132c:	e8 c0       	rjmp	.+464    	; 0x14fe <vfprintf+0x39a>
    132e:	84 36       	cpi	r24, 0x64	; 100
    1330:	11 f0       	breq	.+4      	; 0x1336 <vfprintf+0x1d2>
    1332:	89 36       	cpi	r24, 0x69	; 105
    1334:	41 f5       	brne	.+80     	; 0x1386 <vfprintf+0x222>
    1336:	f8 01       	movw	r30, r16
    1338:	37 fe       	sbrs	r3, 7
    133a:	07 c0       	rjmp	.+14     	; 0x134a <vfprintf+0x1e6>
    133c:	60 81       	ld	r22, Z
    133e:	71 81       	ldd	r23, Z+1	; 0x01
    1340:	82 81       	ldd	r24, Z+2	; 0x02
    1342:	93 81       	ldd	r25, Z+3	; 0x03
    1344:	0c 5f       	subi	r16, 0xFC	; 252
    1346:	1f 4f       	sbci	r17, 0xFF	; 255
    1348:	08 c0       	rjmp	.+16     	; 0x135a <vfprintf+0x1f6>
    134a:	60 81       	ld	r22, Z
    134c:	71 81       	ldd	r23, Z+1	; 0x01
    134e:	07 2e       	mov	r0, r23
    1350:	00 0c       	add	r0, r0
    1352:	88 0b       	sbc	r24, r24
    1354:	99 0b       	sbc	r25, r25
    1356:	0e 5f       	subi	r16, 0xFE	; 254
    1358:	1f 4f       	sbci	r17, 0xFF	; 255
    135a:	f3 2d       	mov	r31, r3
    135c:	ff 76       	andi	r31, 0x6F	; 111
    135e:	3f 2e       	mov	r3, r31
    1360:	97 ff       	sbrs	r25, 7
    1362:	09 c0       	rjmp	.+18     	; 0x1376 <vfprintf+0x212>
    1364:	90 95       	com	r25
    1366:	80 95       	com	r24
    1368:	70 95       	com	r23
    136a:	61 95       	neg	r22
    136c:	7f 4f       	sbci	r23, 0xFF	; 255
    136e:	8f 4f       	sbci	r24, 0xFF	; 255
    1370:	9f 4f       	sbci	r25, 0xFF	; 255
    1372:	f0 68       	ori	r31, 0x80	; 128
    1374:	3f 2e       	mov	r3, r31
    1376:	2a e0       	ldi	r18, 0x0A	; 10
    1378:	30 e0       	ldi	r19, 0x00	; 0
    137a:	a3 01       	movw	r20, r6
    137c:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <__ultoa_invert>
    1380:	88 2e       	mov	r8, r24
    1382:	86 18       	sub	r8, r6
    1384:	45 c0       	rjmp	.+138    	; 0x1410 <vfprintf+0x2ac>
    1386:	85 37       	cpi	r24, 0x75	; 117
    1388:	31 f4       	brne	.+12     	; 0x1396 <vfprintf+0x232>
    138a:	23 2d       	mov	r18, r3
    138c:	2f 7e       	andi	r18, 0xEF	; 239
    138e:	b2 2e       	mov	r11, r18
    1390:	2a e0       	ldi	r18, 0x0A	; 10
    1392:	30 e0       	ldi	r19, 0x00	; 0
    1394:	25 c0       	rjmp	.+74     	; 0x13e0 <vfprintf+0x27c>
    1396:	93 2d       	mov	r25, r3
    1398:	99 7f       	andi	r25, 0xF9	; 249
    139a:	b9 2e       	mov	r11, r25
    139c:	8f 36       	cpi	r24, 0x6F	; 111
    139e:	c1 f0       	breq	.+48     	; 0x13d0 <vfprintf+0x26c>
    13a0:	18 f4       	brcc	.+6      	; 0x13a8 <vfprintf+0x244>
    13a2:	88 35       	cpi	r24, 0x58	; 88
    13a4:	79 f0       	breq	.+30     	; 0x13c4 <vfprintf+0x260>
    13a6:	b5 c0       	rjmp	.+362    	; 0x1512 <vfprintf+0x3ae>
    13a8:	80 37       	cpi	r24, 0x70	; 112
    13aa:	19 f0       	breq	.+6      	; 0x13b2 <vfprintf+0x24e>
    13ac:	88 37       	cpi	r24, 0x78	; 120
    13ae:	21 f0       	breq	.+8      	; 0x13b8 <vfprintf+0x254>
    13b0:	b0 c0       	rjmp	.+352    	; 0x1512 <vfprintf+0x3ae>
    13b2:	e9 2f       	mov	r30, r25
    13b4:	e0 61       	ori	r30, 0x10	; 16
    13b6:	be 2e       	mov	r11, r30
    13b8:	b4 fe       	sbrs	r11, 4
    13ba:	0d c0       	rjmp	.+26     	; 0x13d6 <vfprintf+0x272>
    13bc:	fb 2d       	mov	r31, r11
    13be:	f4 60       	ori	r31, 0x04	; 4
    13c0:	bf 2e       	mov	r11, r31
    13c2:	09 c0       	rjmp	.+18     	; 0x13d6 <vfprintf+0x272>
    13c4:	34 fe       	sbrs	r3, 4
    13c6:	0a c0       	rjmp	.+20     	; 0x13dc <vfprintf+0x278>
    13c8:	29 2f       	mov	r18, r25
    13ca:	26 60       	ori	r18, 0x06	; 6
    13cc:	b2 2e       	mov	r11, r18
    13ce:	06 c0       	rjmp	.+12     	; 0x13dc <vfprintf+0x278>
    13d0:	28 e0       	ldi	r18, 0x08	; 8
    13d2:	30 e0       	ldi	r19, 0x00	; 0
    13d4:	05 c0       	rjmp	.+10     	; 0x13e0 <vfprintf+0x27c>
    13d6:	20 e1       	ldi	r18, 0x10	; 16
    13d8:	30 e0       	ldi	r19, 0x00	; 0
    13da:	02 c0       	rjmp	.+4      	; 0x13e0 <vfprintf+0x27c>
    13dc:	20 e1       	ldi	r18, 0x10	; 16
    13de:	32 e0       	ldi	r19, 0x02	; 2
    13e0:	f8 01       	movw	r30, r16
    13e2:	b7 fe       	sbrs	r11, 7
    13e4:	07 c0       	rjmp	.+14     	; 0x13f4 <vfprintf+0x290>
    13e6:	60 81       	ld	r22, Z
    13e8:	71 81       	ldd	r23, Z+1	; 0x01
    13ea:	82 81       	ldd	r24, Z+2	; 0x02
    13ec:	93 81       	ldd	r25, Z+3	; 0x03
    13ee:	0c 5f       	subi	r16, 0xFC	; 252
    13f0:	1f 4f       	sbci	r17, 0xFF	; 255
    13f2:	06 c0       	rjmp	.+12     	; 0x1400 <vfprintf+0x29c>
    13f4:	60 81       	ld	r22, Z
    13f6:	71 81       	ldd	r23, Z+1	; 0x01
    13f8:	80 e0       	ldi	r24, 0x00	; 0
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	0e 5f       	subi	r16, 0xFE	; 254
    13fe:	1f 4f       	sbci	r17, 0xFF	; 255
    1400:	a3 01       	movw	r20, r6
    1402:	0e 94 e5 0a 	call	0x15ca	; 0x15ca <__ultoa_invert>
    1406:	88 2e       	mov	r8, r24
    1408:	86 18       	sub	r8, r6
    140a:	fb 2d       	mov	r31, r11
    140c:	ff 77       	andi	r31, 0x7F	; 127
    140e:	3f 2e       	mov	r3, r31
    1410:	36 fe       	sbrs	r3, 6
    1412:	0d c0       	rjmp	.+26     	; 0x142e <vfprintf+0x2ca>
    1414:	23 2d       	mov	r18, r3
    1416:	2e 7f       	andi	r18, 0xFE	; 254
    1418:	a2 2e       	mov	r10, r18
    141a:	89 14       	cp	r8, r9
    141c:	58 f4       	brcc	.+22     	; 0x1434 <vfprintf+0x2d0>
    141e:	34 fe       	sbrs	r3, 4
    1420:	0b c0       	rjmp	.+22     	; 0x1438 <vfprintf+0x2d4>
    1422:	32 fc       	sbrc	r3, 2
    1424:	09 c0       	rjmp	.+18     	; 0x1438 <vfprintf+0x2d4>
    1426:	83 2d       	mov	r24, r3
    1428:	8e 7e       	andi	r24, 0xEE	; 238
    142a:	a8 2e       	mov	r10, r24
    142c:	05 c0       	rjmp	.+10     	; 0x1438 <vfprintf+0x2d4>
    142e:	b8 2c       	mov	r11, r8
    1430:	a3 2c       	mov	r10, r3
    1432:	03 c0       	rjmp	.+6      	; 0x143a <vfprintf+0x2d6>
    1434:	b8 2c       	mov	r11, r8
    1436:	01 c0       	rjmp	.+2      	; 0x143a <vfprintf+0x2d6>
    1438:	b9 2c       	mov	r11, r9
    143a:	a4 fe       	sbrs	r10, 4
    143c:	0f c0       	rjmp	.+30     	; 0x145c <vfprintf+0x2f8>
    143e:	fe 01       	movw	r30, r28
    1440:	e8 0d       	add	r30, r8
    1442:	f1 1d       	adc	r31, r1
    1444:	80 81       	ld	r24, Z
    1446:	80 33       	cpi	r24, 0x30	; 48
    1448:	21 f4       	brne	.+8      	; 0x1452 <vfprintf+0x2ee>
    144a:	9a 2d       	mov	r25, r10
    144c:	99 7e       	andi	r25, 0xE9	; 233
    144e:	a9 2e       	mov	r10, r25
    1450:	09 c0       	rjmp	.+18     	; 0x1464 <vfprintf+0x300>
    1452:	a2 fe       	sbrs	r10, 2
    1454:	06 c0       	rjmp	.+12     	; 0x1462 <vfprintf+0x2fe>
    1456:	b3 94       	inc	r11
    1458:	b3 94       	inc	r11
    145a:	04 c0       	rjmp	.+8      	; 0x1464 <vfprintf+0x300>
    145c:	8a 2d       	mov	r24, r10
    145e:	86 78       	andi	r24, 0x86	; 134
    1460:	09 f0       	breq	.+2      	; 0x1464 <vfprintf+0x300>
    1462:	b3 94       	inc	r11
    1464:	a3 fc       	sbrc	r10, 3
    1466:	11 c0       	rjmp	.+34     	; 0x148a <vfprintf+0x326>
    1468:	a0 fe       	sbrs	r10, 0
    146a:	06 c0       	rjmp	.+12     	; 0x1478 <vfprintf+0x314>
    146c:	b2 14       	cp	r11, r2
    146e:	88 f4       	brcc	.+34     	; 0x1492 <vfprintf+0x32e>
    1470:	28 0c       	add	r2, r8
    1472:	92 2c       	mov	r9, r2
    1474:	9b 18       	sub	r9, r11
    1476:	0e c0       	rjmp	.+28     	; 0x1494 <vfprintf+0x330>
    1478:	b2 14       	cp	r11, r2
    147a:	60 f4       	brcc	.+24     	; 0x1494 <vfprintf+0x330>
    147c:	b6 01       	movw	r22, r12
    147e:	80 e2       	ldi	r24, 0x20	; 32
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	0e 94 a9 0a 	call	0x1552	; 0x1552 <fputc>
    1486:	b3 94       	inc	r11
    1488:	f7 cf       	rjmp	.-18     	; 0x1478 <vfprintf+0x314>
    148a:	b2 14       	cp	r11, r2
    148c:	18 f4       	brcc	.+6      	; 0x1494 <vfprintf+0x330>
    148e:	2b 18       	sub	r2, r11
    1490:	02 c0       	rjmp	.+4      	; 0x1496 <vfprintf+0x332>
    1492:	98 2c       	mov	r9, r8
    1494:	21 2c       	mov	r2, r1
    1496:	a4 fe       	sbrs	r10, 4
    1498:	10 c0       	rjmp	.+32     	; 0x14ba <vfprintf+0x356>
    149a:	b6 01       	movw	r22, r12
    149c:	80 e3       	ldi	r24, 0x30	; 48
    149e:	90 e0       	ldi	r25, 0x00	; 0
    14a0:	0e 94 a9 0a 	call	0x1552	; 0x1552 <fputc>
    14a4:	a2 fe       	sbrs	r10, 2
    14a6:	17 c0       	rjmp	.+46     	; 0x14d6 <vfprintf+0x372>
    14a8:	a1 fc       	sbrc	r10, 1
    14aa:	03 c0       	rjmp	.+6      	; 0x14b2 <vfprintf+0x34e>
    14ac:	88 e7       	ldi	r24, 0x78	; 120
    14ae:	90 e0       	ldi	r25, 0x00	; 0
    14b0:	02 c0       	rjmp	.+4      	; 0x14b6 <vfprintf+0x352>
    14b2:	88 e5       	ldi	r24, 0x58	; 88
    14b4:	90 e0       	ldi	r25, 0x00	; 0
    14b6:	b6 01       	movw	r22, r12
    14b8:	0c c0       	rjmp	.+24     	; 0x14d2 <vfprintf+0x36e>
    14ba:	8a 2d       	mov	r24, r10
    14bc:	86 78       	andi	r24, 0x86	; 134
    14be:	59 f0       	breq	.+22     	; 0x14d6 <vfprintf+0x372>
    14c0:	a1 fe       	sbrs	r10, 1
    14c2:	02 c0       	rjmp	.+4      	; 0x14c8 <vfprintf+0x364>
    14c4:	8b e2       	ldi	r24, 0x2B	; 43
    14c6:	01 c0       	rjmp	.+2      	; 0x14ca <vfprintf+0x366>
    14c8:	80 e2       	ldi	r24, 0x20	; 32
    14ca:	a7 fc       	sbrc	r10, 7
    14cc:	8d e2       	ldi	r24, 0x2D	; 45
    14ce:	b6 01       	movw	r22, r12
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	0e 94 a9 0a 	call	0x1552	; 0x1552 <fputc>
    14d6:	89 14       	cp	r8, r9
    14d8:	38 f4       	brcc	.+14     	; 0x14e8 <vfprintf+0x384>
    14da:	b6 01       	movw	r22, r12
    14dc:	80 e3       	ldi	r24, 0x30	; 48
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	0e 94 a9 0a 	call	0x1552	; 0x1552 <fputc>
    14e4:	9a 94       	dec	r9
    14e6:	f7 cf       	rjmp	.-18     	; 0x14d6 <vfprintf+0x372>
    14e8:	8a 94       	dec	r8
    14ea:	f3 01       	movw	r30, r6
    14ec:	e8 0d       	add	r30, r8
    14ee:	f1 1d       	adc	r31, r1
    14f0:	80 81       	ld	r24, Z
    14f2:	b6 01       	movw	r22, r12
    14f4:	90 e0       	ldi	r25, 0x00	; 0
    14f6:	0e 94 a9 0a 	call	0x1552	; 0x1552 <fputc>
    14fa:	81 10       	cpse	r8, r1
    14fc:	f5 cf       	rjmp	.-22     	; 0x14e8 <vfprintf+0x384>
    14fe:	22 20       	and	r2, r2
    1500:	09 f4       	brne	.+2      	; 0x1504 <vfprintf+0x3a0>
    1502:	42 ce       	rjmp	.-892    	; 0x1188 <vfprintf+0x24>
    1504:	b6 01       	movw	r22, r12
    1506:	80 e2       	ldi	r24, 0x20	; 32
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	0e 94 a9 0a 	call	0x1552	; 0x1552 <fputc>
    150e:	2a 94       	dec	r2
    1510:	f6 cf       	rjmp	.-20     	; 0x14fe <vfprintf+0x39a>
    1512:	f6 01       	movw	r30, r12
    1514:	86 81       	ldd	r24, Z+6	; 0x06
    1516:	97 81       	ldd	r25, Z+7	; 0x07
    1518:	02 c0       	rjmp	.+4      	; 0x151e <vfprintf+0x3ba>
    151a:	8f ef       	ldi	r24, 0xFF	; 255
    151c:	9f ef       	ldi	r25, 0xFF	; 255
    151e:	2b 96       	adiw	r28, 0x0b	; 11
    1520:	e2 e1       	ldi	r30, 0x12	; 18
    1522:	0c 94 75 0b 	jmp	0x16ea	; 0x16ea <__epilogue_restores__>

00001526 <strnlen_P>:
    1526:	fc 01       	movw	r30, r24
    1528:	05 90       	lpm	r0, Z+
    152a:	61 50       	subi	r22, 0x01	; 1
    152c:	70 40       	sbci	r23, 0x00	; 0
    152e:	01 10       	cpse	r0, r1
    1530:	d8 f7       	brcc	.-10     	; 0x1528 <strnlen_P+0x2>
    1532:	80 95       	com	r24
    1534:	90 95       	com	r25
    1536:	8e 0f       	add	r24, r30
    1538:	9f 1f       	adc	r25, r31
    153a:	08 95       	ret

0000153c <strnlen>:
    153c:	fc 01       	movw	r30, r24
    153e:	61 50       	subi	r22, 0x01	; 1
    1540:	70 40       	sbci	r23, 0x00	; 0
    1542:	01 90       	ld	r0, Z+
    1544:	01 10       	cpse	r0, r1
    1546:	d8 f7       	brcc	.-10     	; 0x153e <strnlen+0x2>
    1548:	80 95       	com	r24
    154a:	90 95       	com	r25
    154c:	8e 0f       	add	r24, r30
    154e:	9f 1f       	adc	r25, r31
    1550:	08 95       	ret

00001552 <fputc>:
    1552:	0f 93       	push	r16
    1554:	1f 93       	push	r17
    1556:	cf 93       	push	r28
    1558:	df 93       	push	r29
    155a:	fb 01       	movw	r30, r22
    155c:	23 81       	ldd	r18, Z+3	; 0x03
    155e:	21 fd       	sbrc	r18, 1
    1560:	03 c0       	rjmp	.+6      	; 0x1568 <fputc+0x16>
    1562:	8f ef       	ldi	r24, 0xFF	; 255
    1564:	9f ef       	ldi	r25, 0xFF	; 255
    1566:	2c c0       	rjmp	.+88     	; 0x15c0 <fputc+0x6e>
    1568:	22 ff       	sbrs	r18, 2
    156a:	16 c0       	rjmp	.+44     	; 0x1598 <fputc+0x46>
    156c:	46 81       	ldd	r20, Z+6	; 0x06
    156e:	57 81       	ldd	r21, Z+7	; 0x07
    1570:	24 81       	ldd	r18, Z+4	; 0x04
    1572:	35 81       	ldd	r19, Z+5	; 0x05
    1574:	42 17       	cp	r20, r18
    1576:	53 07       	cpc	r21, r19
    1578:	44 f4       	brge	.+16     	; 0x158a <fputc+0x38>
    157a:	a0 81       	ld	r26, Z
    157c:	b1 81       	ldd	r27, Z+1	; 0x01
    157e:	9d 01       	movw	r18, r26
    1580:	2f 5f       	subi	r18, 0xFF	; 255
    1582:	3f 4f       	sbci	r19, 0xFF	; 255
    1584:	31 83       	std	Z+1, r19	; 0x01
    1586:	20 83       	st	Z, r18
    1588:	8c 93       	st	X, r24
    158a:	26 81       	ldd	r18, Z+6	; 0x06
    158c:	37 81       	ldd	r19, Z+7	; 0x07
    158e:	2f 5f       	subi	r18, 0xFF	; 255
    1590:	3f 4f       	sbci	r19, 0xFF	; 255
    1592:	37 83       	std	Z+7, r19	; 0x07
    1594:	26 83       	std	Z+6, r18	; 0x06
    1596:	14 c0       	rjmp	.+40     	; 0x15c0 <fputc+0x6e>
    1598:	8b 01       	movw	r16, r22
    159a:	ec 01       	movw	r28, r24
    159c:	fb 01       	movw	r30, r22
    159e:	00 84       	ldd	r0, Z+8	; 0x08
    15a0:	f1 85       	ldd	r31, Z+9	; 0x09
    15a2:	e0 2d       	mov	r30, r0
    15a4:	09 95       	icall
    15a6:	89 2b       	or	r24, r25
    15a8:	e1 f6       	brne	.-72     	; 0x1562 <fputc+0x10>
    15aa:	d8 01       	movw	r26, r16
    15ac:	16 96       	adiw	r26, 0x06	; 6
    15ae:	8d 91       	ld	r24, X+
    15b0:	9c 91       	ld	r25, X
    15b2:	17 97       	sbiw	r26, 0x07	; 7
    15b4:	01 96       	adiw	r24, 0x01	; 1
    15b6:	17 96       	adiw	r26, 0x07	; 7
    15b8:	9c 93       	st	X, r25
    15ba:	8e 93       	st	-X, r24
    15bc:	16 97       	sbiw	r26, 0x06	; 6
    15be:	ce 01       	movw	r24, r28
    15c0:	df 91       	pop	r29
    15c2:	cf 91       	pop	r28
    15c4:	1f 91       	pop	r17
    15c6:	0f 91       	pop	r16
    15c8:	08 95       	ret

000015ca <__ultoa_invert>:
    15ca:	fa 01       	movw	r30, r20
    15cc:	aa 27       	eor	r26, r26
    15ce:	28 30       	cpi	r18, 0x08	; 8
    15d0:	51 f1       	breq	.+84     	; 0x1626 <__ultoa_invert+0x5c>
    15d2:	20 31       	cpi	r18, 0x10	; 16
    15d4:	81 f1       	breq	.+96     	; 0x1636 <__ultoa_invert+0x6c>
    15d6:	e8 94       	clt
    15d8:	6f 93       	push	r22
    15da:	6e 7f       	andi	r22, 0xFE	; 254
    15dc:	6e 5f       	subi	r22, 0xFE	; 254
    15de:	7f 4f       	sbci	r23, 0xFF	; 255
    15e0:	8f 4f       	sbci	r24, 0xFF	; 255
    15e2:	9f 4f       	sbci	r25, 0xFF	; 255
    15e4:	af 4f       	sbci	r26, 0xFF	; 255
    15e6:	b1 e0       	ldi	r27, 0x01	; 1
    15e8:	3e d0       	rcall	.+124    	; 0x1666 <__ultoa_invert+0x9c>
    15ea:	b4 e0       	ldi	r27, 0x04	; 4
    15ec:	3c d0       	rcall	.+120    	; 0x1666 <__ultoa_invert+0x9c>
    15ee:	67 0f       	add	r22, r23
    15f0:	78 1f       	adc	r23, r24
    15f2:	89 1f       	adc	r24, r25
    15f4:	9a 1f       	adc	r25, r26
    15f6:	a1 1d       	adc	r26, r1
    15f8:	68 0f       	add	r22, r24
    15fa:	79 1f       	adc	r23, r25
    15fc:	8a 1f       	adc	r24, r26
    15fe:	91 1d       	adc	r25, r1
    1600:	a1 1d       	adc	r26, r1
    1602:	6a 0f       	add	r22, r26
    1604:	71 1d       	adc	r23, r1
    1606:	81 1d       	adc	r24, r1
    1608:	91 1d       	adc	r25, r1
    160a:	a1 1d       	adc	r26, r1
    160c:	20 d0       	rcall	.+64     	; 0x164e <__ultoa_invert+0x84>
    160e:	09 f4       	brne	.+2      	; 0x1612 <__ultoa_invert+0x48>
    1610:	68 94       	set
    1612:	3f 91       	pop	r19
    1614:	2a e0       	ldi	r18, 0x0A	; 10
    1616:	26 9f       	mul	r18, r22
    1618:	11 24       	eor	r1, r1
    161a:	30 19       	sub	r19, r0
    161c:	30 5d       	subi	r19, 0xD0	; 208
    161e:	31 93       	st	Z+, r19
    1620:	de f6       	brtc	.-74     	; 0x15d8 <__ultoa_invert+0xe>
    1622:	cf 01       	movw	r24, r30
    1624:	08 95       	ret
    1626:	46 2f       	mov	r20, r22
    1628:	47 70       	andi	r20, 0x07	; 7
    162a:	40 5d       	subi	r20, 0xD0	; 208
    162c:	41 93       	st	Z+, r20
    162e:	b3 e0       	ldi	r27, 0x03	; 3
    1630:	0f d0       	rcall	.+30     	; 0x1650 <__ultoa_invert+0x86>
    1632:	c9 f7       	brne	.-14     	; 0x1626 <__ultoa_invert+0x5c>
    1634:	f6 cf       	rjmp	.-20     	; 0x1622 <__ultoa_invert+0x58>
    1636:	46 2f       	mov	r20, r22
    1638:	4f 70       	andi	r20, 0x0F	; 15
    163a:	40 5d       	subi	r20, 0xD0	; 208
    163c:	4a 33       	cpi	r20, 0x3A	; 58
    163e:	18 f0       	brcs	.+6      	; 0x1646 <__ultoa_invert+0x7c>
    1640:	49 5d       	subi	r20, 0xD9	; 217
    1642:	31 fd       	sbrc	r19, 1
    1644:	40 52       	subi	r20, 0x20	; 32
    1646:	41 93       	st	Z+, r20
    1648:	02 d0       	rcall	.+4      	; 0x164e <__ultoa_invert+0x84>
    164a:	a9 f7       	brne	.-22     	; 0x1636 <__ultoa_invert+0x6c>
    164c:	ea cf       	rjmp	.-44     	; 0x1622 <__ultoa_invert+0x58>
    164e:	b4 e0       	ldi	r27, 0x04	; 4
    1650:	a6 95       	lsr	r26
    1652:	97 95       	ror	r25
    1654:	87 95       	ror	r24
    1656:	77 95       	ror	r23
    1658:	67 95       	ror	r22
    165a:	ba 95       	dec	r27
    165c:	c9 f7       	brne	.-14     	; 0x1650 <__ultoa_invert+0x86>
    165e:	00 97       	sbiw	r24, 0x00	; 0
    1660:	61 05       	cpc	r22, r1
    1662:	71 05       	cpc	r23, r1
    1664:	08 95       	ret
    1666:	9b 01       	movw	r18, r22
    1668:	ac 01       	movw	r20, r24
    166a:	0a 2e       	mov	r0, r26
    166c:	06 94       	lsr	r0
    166e:	57 95       	ror	r21
    1670:	47 95       	ror	r20
    1672:	37 95       	ror	r19
    1674:	27 95       	ror	r18
    1676:	ba 95       	dec	r27
    1678:	c9 f7       	brne	.-14     	; 0x166c <__ultoa_invert+0xa2>
    167a:	62 0f       	add	r22, r18
    167c:	73 1f       	adc	r23, r19
    167e:	84 1f       	adc	r24, r20
    1680:	95 1f       	adc	r25, r21
    1682:	a0 1d       	adc	r26, r0
    1684:	08 95       	ret

00001686 <eeprom_read_byte>:
    1686:	f9 99       	sbic	0x1f, 1	; 31
    1688:	fe cf       	rjmp	.-4      	; 0x1686 <eeprom_read_byte>
    168a:	92 bd       	out	0x22, r25	; 34
    168c:	81 bd       	out	0x21, r24	; 33
    168e:	f8 9a       	sbi	0x1f, 0	; 31
    1690:	99 27       	eor	r25, r25
    1692:	80 b5       	in	r24, 0x20	; 32
    1694:	08 95       	ret

00001696 <eeprom_write_byte>:
    1696:	26 2f       	mov	r18, r22

00001698 <eeprom_write_r18>:
    1698:	f9 99       	sbic	0x1f, 1	; 31
    169a:	fe cf       	rjmp	.-4      	; 0x1698 <eeprom_write_r18>
    169c:	1f ba       	out	0x1f, r1	; 31
    169e:	92 bd       	out	0x22, r25	; 34
    16a0:	81 bd       	out	0x21, r24	; 33
    16a2:	20 bd       	out	0x20, r18	; 32
    16a4:	0f b6       	in	r0, 0x3f	; 63
    16a6:	f8 94       	cli
    16a8:	fa 9a       	sbi	0x1f, 2	; 31
    16aa:	f9 9a       	sbi	0x1f, 1	; 31
    16ac:	0f be       	out	0x3f, r0	; 63
    16ae:	01 96       	adiw	r24, 0x01	; 1
    16b0:	08 95       	ret

000016b2 <__prologue_saves__>:
    16b2:	2f 92       	push	r2
    16b4:	3f 92       	push	r3
    16b6:	4f 92       	push	r4
    16b8:	5f 92       	push	r5
    16ba:	6f 92       	push	r6
    16bc:	7f 92       	push	r7
    16be:	8f 92       	push	r8
    16c0:	9f 92       	push	r9
    16c2:	af 92       	push	r10
    16c4:	bf 92       	push	r11
    16c6:	cf 92       	push	r12
    16c8:	df 92       	push	r13
    16ca:	ef 92       	push	r14
    16cc:	ff 92       	push	r15
    16ce:	0f 93       	push	r16
    16d0:	1f 93       	push	r17
    16d2:	cf 93       	push	r28
    16d4:	df 93       	push	r29
    16d6:	cd b7       	in	r28, 0x3d	; 61
    16d8:	de b7       	in	r29, 0x3e	; 62
    16da:	ca 1b       	sub	r28, r26
    16dc:	db 0b       	sbc	r29, r27
    16de:	0f b6       	in	r0, 0x3f	; 63
    16e0:	f8 94       	cli
    16e2:	de bf       	out	0x3e, r29	; 62
    16e4:	0f be       	out	0x3f, r0	; 63
    16e6:	cd bf       	out	0x3d, r28	; 61
    16e8:	09 94       	ijmp

000016ea <__epilogue_restores__>:
    16ea:	2a 88       	ldd	r2, Y+18	; 0x12
    16ec:	39 88       	ldd	r3, Y+17	; 0x11
    16ee:	48 88       	ldd	r4, Y+16	; 0x10
    16f0:	5f 84       	ldd	r5, Y+15	; 0x0f
    16f2:	6e 84       	ldd	r6, Y+14	; 0x0e
    16f4:	7d 84       	ldd	r7, Y+13	; 0x0d
    16f6:	8c 84       	ldd	r8, Y+12	; 0x0c
    16f8:	9b 84       	ldd	r9, Y+11	; 0x0b
    16fa:	aa 84       	ldd	r10, Y+10	; 0x0a
    16fc:	b9 84       	ldd	r11, Y+9	; 0x09
    16fe:	c8 84       	ldd	r12, Y+8	; 0x08
    1700:	df 80       	ldd	r13, Y+7	; 0x07
    1702:	ee 80       	ldd	r14, Y+6	; 0x06
    1704:	fd 80       	ldd	r15, Y+5	; 0x05
    1706:	0c 81       	ldd	r16, Y+4	; 0x04
    1708:	1b 81       	ldd	r17, Y+3	; 0x03
    170a:	aa 81       	ldd	r26, Y+2	; 0x02
    170c:	b9 81       	ldd	r27, Y+1	; 0x01
    170e:	ce 0f       	add	r28, r30
    1710:	d1 1d       	adc	r29, r1
    1712:	0f b6       	in	r0, 0x3f	; 63
    1714:	f8 94       	cli
    1716:	de bf       	out	0x3e, r29	; 62
    1718:	0f be       	out	0x3f, r0	; 63
    171a:	cd bf       	out	0x3d, r28	; 61
    171c:	ed 01       	movw	r28, r26
    171e:	08 95       	ret

00001720 <_exit>:
    1720:	f8 94       	cli

00001722 <__stop_program>:
    1722:	ff cf       	rjmp	.-2      	; 0x1722 <__stop_program>
