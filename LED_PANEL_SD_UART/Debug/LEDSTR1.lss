
LEDSTR1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000f02  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e8e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000684  00800100  00800100  00000f02  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000f02  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f60  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e8  00000000  00000000  00000fa0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000022c9  00000000  00000000  00001188  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ec1  00000000  00000000  00003451  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000018d1  00000000  00000000  00004312  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000458  00000000  00000000  00005be4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00009a05  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001672  00000000  00000000  0000fa41  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000200  00000000  00000000  000110b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000399e  00000000  00000000  000112b3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 bc 03 	jmp	0x778	; 0x778 <__vector_18>
  4c:	0c 94 57 03 	jmp	0x6ae	; 0x6ae <__vector_19>
  50:	0c 94 61 03 	jmp	0x6c2	; 0x6c2 <__vector_20>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	6b 24       	eor	r6, r11
	...

0000006b <__c.2584>:
  6b:	65 72 72 2d 63 6d 64 24 00                          err-cmd$.

00000074 <__c.2581>:
  74:	65 72 72 2d 67 65 74 6e 6f 70 72 6f 70 24 00        err-getnoprop$.

00000083 <__c.2578>:
  83:	67 25 73 24 00                                      g%s$.

00000088 <__c.2573>:
  88:	67 25 64 24 00                                      g%d$.

0000008d <__c.2563>:
  8d:	65 72 72 2d 62 61 64 61 64 64 72 24 00              err-badaddr$.

0000009a <__c.2553>:
  9a:	74 65 73 74 69 6e 67 20 25 64 24 00                 testing %d$.

000000a6 <__ctors_end>:
  a6:	11 24       	eor	r1, r1
  a8:	1f be       	out	0x3f, r1	; 63
  aa:	cf ef       	ldi	r28, 0xFF	; 255
  ac:	d8 e0       	ldi	r29, 0x08	; 8
  ae:	de bf       	out	0x3e, r29	; 62
  b0:	cd bf       	out	0x3d, r28	; 61

000000b2 <__do_clear_bss>:
  b2:	27 e0       	ldi	r18, 0x07	; 7
  b4:	a0 e0       	ldi	r26, 0x00	; 0
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a4 38       	cpi	r26, 0x84	; 132
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 97 02 	call	0x52e	; 0x52e <main>
  c6:	0c 94 45 07 	jmp	0xe8a	; 0xe8a <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <bufferInit>:
	// begin critical section
	CRITICAL_SECTION_START;
	// flush contents of the buffer
	buffer->datalength = 0;
	// end critical section
	CRITICAL_SECTION_END;
  ce:	fc 01       	movw	r30, r24
  d0:	8f b7       	in	r24, 0x3f	; 63
  d2:	f8 94       	cli
  d4:	71 83       	std	Z+1, r23	; 0x01
  d6:	60 83       	st	Z, r22
  d8:	53 83       	std	Z+3, r21	; 0x03
  da:	42 83       	std	Z+2, r20	; 0x02
  dc:	17 82       	std	Z+7, r1	; 0x07
  de:	16 82       	std	Z+6, r1	; 0x06
  e0:	15 82       	std	Z+5, r1	; 0x05
  e2:	14 82       	std	Z+4, r1	; 0x04
  e4:	8f bf       	out	0x3f, r24	; 63
  e6:	08 95       	ret

000000e8 <bufferAddToEnd>:
  e8:	fc 01       	movw	r30, r24
  ea:	36 2f       	mov	r19, r22
  ec:	2f b7       	in	r18, 0x3f	; 63
  ee:	f8 94       	cli
  f0:	84 81       	ldd	r24, Z+4	; 0x04
  f2:	95 81       	ldd	r25, Z+5	; 0x05
  f4:	62 81       	ldd	r22, Z+2	; 0x02
  f6:	73 81       	ldd	r23, Z+3	; 0x03
  f8:	86 17       	cp	r24, r22
  fa:	97 07       	cpc	r25, r23
  fc:	18 f0       	brcs	.+6      	; 0x104 <bufferAddToEnd+0x1c>
  fe:	2f bf       	out	0x3f, r18	; 63
 100:	8f ef       	ldi	r24, 0xFF	; 255
 102:	08 95       	ret
 104:	46 81       	ldd	r20, Z+6	; 0x06
 106:	57 81       	ldd	r21, Z+7	; 0x07
 108:	84 0f       	add	r24, r20
 10a:	95 1f       	adc	r25, r21
 10c:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__udivmodhi4>
 110:	a0 81       	ld	r26, Z
 112:	b1 81       	ldd	r27, Z+1	; 0x01
 114:	a8 0f       	add	r26, r24
 116:	b9 1f       	adc	r27, r25
 118:	3c 93       	st	X, r19
 11a:	84 81       	ldd	r24, Z+4	; 0x04
 11c:	95 81       	ldd	r25, Z+5	; 0x05
 11e:	01 96       	adiw	r24, 0x01	; 1
 120:	95 83       	std	Z+5, r25	; 0x05
 122:	84 83       	std	Z+4, r24	; 0x04
 124:	2f bf       	out	0x3f, r18	; 63
 126:	80 e0       	ldi	r24, 0x00	; 0
 128:	08 95       	ret

0000012a <bufferClear>:
}

void bufferClear(cBuffer* buffer, unsigned short size) {
 12a:	ab 01       	movw	r20, r22
  // begin critical section
  CRITICAL_SECTION_START;
 12c:	2f b7       	in	r18, 0x3f	; 63
 12e:	f8 94       	cli
  // flush contents of the buffer
  buffer->datalength = 0;
 130:	fc 01       	movw	r30, r24
 132:	15 82       	std	Z+5, r1	; 0x05
 134:	14 82       	std	Z+4, r1	; 0x04
  // end critical section
  CRITICAL_SECTION_END;
 136:	2f bf       	out	0x3f, r18	; 63
  memset(buffer->dataptr,0,size);
 138:	60 e0       	ldi	r22, 0x00	; 0
 13a:	70 e0       	ldi	r23, 0x00	; 0
 13c:	80 81       	ld	r24, Z
 13e:	91 81       	ldd	r25, Z+1	; 0x01
 140:	0c 94 2f 04 	jmp	0x85e	; 0x85e <memset>

00000144 <myUartRx>:
  if (inAddr == CMD_UART_GLOBAL_CMD_ADDR) {
    // disable MPCM mode, start looking for data bytes
    return TRUE;
  }
  return FALSE;
}
 144:	cf 93       	push	r28
 146:	df 93       	push	r29
 148:	c8 2f       	mov	r28, r24
 14a:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <rxAddrNext>
 14e:	81 11       	cpse	r24, r1
 150:	15 c0       	rjmp	.+42     	; 0x17c <myUartRx+0x38>
 152:	c1 32       	cpi	r28, 0x21	; 33
 154:	f1 f1       	breq	.+124    	; 0x1d2 <myUartRx+0x8e>
 156:	c4 32       	cpi	r28, 0x24	; 36
 158:	51 f4       	brne	.+20     	; 0x16e <myUartRx+0x2a>
 15a:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <rxAddressed>
 15e:	88 23       	and	r24, r24
 160:	31 f0       	breq	.+12     	; 0x16e <myUartRx+0x2a>
 162:	8f ef       	ldi	r24, 0xFF	; 255
 164:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <rxCompleteFlag>
 168:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <rxAddressed>
 16c:	5d 98       	cbi	0x0b, 5	; 11
 16e:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <rxAddressed>
 172:	81 11       	cpse	r24, r1
 174:	1d c0       	rjmp	.+58     	; 0x1b0 <myUartRx+0x6c>
 176:	df 91       	pop	r29
 178:	cf 91       	pop	r28
 17a:	08 95       	ret
 17c:	10 92 c7 01 	sts	0x01C7, r1	; 0x8001c7 <rxAddrNext>
 180:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <myAddress>
 184:	c8 17       	cp	r28, r24
 186:	51 f0       	breq	.+20     	; 0x19c <myUartRx+0x58>
 188:	c1 11       	cpse	r28, r1
 18a:	f5 cf       	rjmp	.-22     	; 0x176 <myUartRx+0x32>
 18c:	8f ef       	ldi	r24, 0xFF	; 255
 18e:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <rxAddrGlobal>
 192:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <rxAddressed>
 196:	df 91       	pop	r29
 198:	cf 91       	pop	r28
 19a:	08 95       	ret
 19c:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <rxCommandProcessing>
 1a0:	81 11       	cpse	r24, r1
 1a2:	1f c0       	rjmp	.+62     	; 0x1e2 <myUartRx+0x9e>
 1a4:	8f ef       	ldi	r24, 0xFF	; 255
 1a6:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <rxAddressed>
 1aa:	cc 23       	and	r28, r28
 1ac:	79 f3       	breq	.-34     	; 0x18c <myUartRx+0x48>
 1ae:	e3 cf       	rjmp	.-58     	; 0x176 <myUartRx+0x32>
 1b0:	6c 2f       	mov	r22, r28
 1b2:	8f e6       	ldi	r24, 0x6F	; 111
 1b4:	97 e0       	ldi	r25, 0x07	; 7
 1b6:	0e 94 74 00 	call	0xe8	; 0xe8 <bufferAddToEnd>
 1ba:	81 11       	cpse	r24, r1
 1bc:	dc cf       	rjmp	.-72     	; 0x176 <myUartRx+0x32>
 1be:	80 91 82 07 	lds	r24, 0x0782	; 0x800782 <uartRxOverflow>
 1c2:	90 91 83 07 	lds	r25, 0x0783	; 0x800783 <uartRxOverflow+0x1>
 1c6:	01 96       	adiw	r24, 0x01	; 1
 1c8:	90 93 83 07 	sts	0x0783, r25	; 0x800783 <uartRxOverflow+0x1>
 1cc:	80 93 82 07 	sts	0x0782, r24	; 0x800782 <uartRxOverflow>
 1d0:	d2 cf       	rjmp	.-92     	; 0x176 <myUartRx+0x32>
 1d2:	8f ef       	ldi	r24, 0xFF	; 255
 1d4:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <rxAddrNext>
 1d8:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <rxAddressed>
 1dc:	88 23       	and	r24, r24
 1de:	59 f2       	breq	.-106    	; 0x176 <myUartRx+0x32>
 1e0:	e7 cf       	rjmp	.-50     	; 0x1b0 <myUartRx+0x6c>
 1e2:	df ef       	ldi	r29, 0xFF	; 255
 1e4:	d0 93 c5 01 	sts	0x01C5, r29	; 0x8001c5 <rxCommandOverloaded>
 1e8:	60 e4       	ldi	r22, 0x40	; 64
 1ea:	70 e0       	ldi	r23, 0x00	; 0
 1ec:	8f e6       	ldi	r24, 0x6F	; 111
 1ee:	97 e0       	ldi	r25, 0x07	; 7
 1f0:	0e 94 95 00 	call	0x12a	; 0x12a <bufferClear>
 1f4:	d0 93 82 01 	sts	0x0182, r29	; 0x800182 <rxAddressed>
 1f8:	c7 cf       	rjmp	.-114    	; 0x188 <myUartRx+0x44>

000001fa <initCmdHandler>:
 1fa:	10 92 c8 01 	sts	0x01C8, r1	; 0x8001c8 <rxCompleteFlag>
 1fe:	10 92 c7 01 	sts	0x01C7, r1	; 0x8001c7 <rxAddrNext>
 202:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <rxAddressed>
 206:	10 92 c9 01 	sts	0x01C9, r1	; 0x8001c9 <rxAddrGlobal>
 20a:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <rxCommandOverloaded>
 20e:	82 ea       	ldi	r24, 0xA2	; 162
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	0c 94 02 03 	jmp	0x604	; 0x604 <uartSetRxHandler>

00000216 <initCommandProtocolAddr>:
 216:	cf 93       	push	r28
 218:	c8 2f       	mov	r28, r24
 21a:	80 e0       	ldi	r24, 0x00	; 0
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <eeprom_read_byte>
 222:	81 11       	cpse	r24, r1
 224:	13 c0       	rjmp	.+38     	; 0x24c <initCommandProtocolAddr+0x36>
 226:	c1 11       	cpse	r28, r1
 228:	09 c0       	rjmp	.+18     	; 0x23c <initCommandProtocolAddr+0x26>
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <myAddress>
 230:	61 e0       	ldi	r22, 0x01	; 1
 232:	80 e0       	ldi	r24, 0x00	; 0
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	cf 91       	pop	r28
 238:	0c 94 00 07 	jmp	0xe00	; 0xe00 <eeprom_write_byte>
 23c:	c0 93 c6 01 	sts	0x01C6, r28	; 0x8001c6 <myAddress>
 240:	6c 2f       	mov	r22, r28
 242:	80 e0       	ldi	r24, 0x00	; 0
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	cf 91       	pop	r28
 248:	0c 94 00 07 	jmp	0xe00	; 0xe00 <eeprom_write_byte>
 24c:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <myAddress>
 250:	cf 91       	pop	r28
 252:	08 95       	ret

00000254 <getCommandProtocolAddr>:
 254:	80 e0       	ldi	r24, 0x00	; 0
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	0c 94 f8 06 	jmp	0xdf0	; 0xdf0 <eeprom_read_byte>

0000025c <setCommandProtocolAddr>:
 25c:	81 11       	cpse	r24, r1
 25e:	02 c0       	rjmp	.+4      	; 0x264 <setCommandProtocolAddr+0x8>
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	08 95       	ret
 264:	68 2f       	mov	r22, r24
 266:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <myAddress>
 26a:	80 e0       	ldi	r24, 0x00	; 0
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	0e 94 00 07 	call	0xe00	; 0xe00 <eeprom_write_byte>
 272:	80 e0       	ldi	r24, 0x00	; 0
 274:	08 95       	ret

00000276 <sendMsg>:
/************************************************************************
 * sendMsg:
 * 
 * Routine is inline to avoid extra function calls in ISR
 ************************************************************************/
void sendMsg(void) {
 276:	cf 93       	push	r28
 278:	df 93       	push	r29
  if (rxAddrGlobal) {
 27a:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <rxAddrGlobal>
 27e:	81 11       	cpse	r24, r1
 280:	15 c0       	rjmp	.+42     	; 0x2ac <sendMsg+0x36>
    memset(sprintbuf, 0, sizeof(sprintbuf));
    return; // don't send messages for global cmd
  }
  uartSendBuffer(sprintbuf,strlen(sprintbuf));
 282:	ca ec       	ldi	r28, 0xCA	; 202
 284:	d1 e0       	ldi	r29, 0x01	; 1
 286:	fe 01       	movw	r30, r28
 288:	01 90       	ld	r0, Z+
 28a:	00 20       	and	r0, r0
 28c:	e9 f7       	brne	.-6      	; 0x288 <sendMsg+0x12>
 28e:	31 97       	sbiw	r30, 0x01	; 1
 290:	bf 01       	movw	r22, r30
 292:	6a 5c       	subi	r22, 0xCA	; 202
 294:	71 40       	sbci	r23, 0x01	; 1
 296:	ce 01       	movw	r24, r28
 298:	0e 94 13 03 	call	0x626	; 0x626 <uartSendBuffer>
  memset(sprintbuf, 0, sizeof(sprintbuf));
 29c:	80 e5       	ldi	r24, 0x50	; 80
 29e:	fe 01       	movw	r30, r28
 2a0:	11 92       	st	Z+, r1
 2a2:	8a 95       	dec	r24
 2a4:	e9 f7       	brne	.-6      	; 0x2a0 <sendMsg+0x2a>
}
 2a6:	df 91       	pop	r29
 2a8:	cf 91       	pop	r28
 2aa:	08 95       	ret
 * 
 * Routine is inline to avoid extra function calls in ISR
 ************************************************************************/
void sendMsg(void) {
  if (rxAddrGlobal) {
    memset(sprintbuf, 0, sizeof(sprintbuf));
 2ac:	80 e5       	ldi	r24, 0x50	; 80
 2ae:	ea ec       	ldi	r30, 0xCA	; 202
 2b0:	f1 e0       	ldi	r31, 0x01	; 1
 2b2:	df 01       	movw	r26, r30
 2b4:	1d 92       	st	X+, r1
 2b6:	8a 95       	dec	r24
 2b8:	e9 f7       	brne	.-6      	; 0x2b4 <sendMsg+0x3e>
    return; // don't send messages for global cmd
  }
  uartSendBuffer(sprintbuf,strlen(sprintbuf));
  memset(sprintbuf, 0, sizeof(sprintbuf));
}
 2ba:	df 91       	pop	r29
 2bc:	cf 91       	pop	r28
 2be:	08 95       	ret

000002c0 <beginCmdProcessing>:
 * Set up state to process a command.
 *
 * args? [data] [crc code] ?
 ************************************************************************/
void beginCmdProcessing(void) {
  rxCommandProcessing = TRUE; // cmd interpretation in progress
 2c0:	8f ef       	ldi	r24, 0xFF	; 255
 2c2:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <rxCommandProcessing>
  rxCompleteFlag = FALSE;
 2c6:	10 92 c8 01 	sts	0x01C8, r1	; 0x8001c8 <rxCompleteFlag>
 2ca:	08 95       	ret

000002cc <endCmdProcessing>:
/************************************************************************
 * Set up state after done processing a command.
 *
 * args? [data] [crc code] ?
 ************************************************************************/
void endCmdProcessing(void) {
 2cc:	cf 93       	push	r28
 2ce:	df 93       	push	r29
  bufferClear(&uartRxBuffer,UART_RX_BUFFER_SIZE); // clear to get another cmd, so send response.
 2d0:	60 e4       	ldi	r22, 0x40	; 64
 2d2:	70 e0       	ldi	r23, 0x00	; 0
 2d4:	8f e6       	ldi	r24, 0x6F	; 111
 2d6:	97 e0       	ldi	r25, 0x07	; 7
 2d8:	0e 94 95 00 	call	0x12a	; 0x12a <bufferClear>
  if (!customResponse) { // always send a "k" if we're not sending something else.
 2dc:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <customResponse>
 2e0:	88 23       	and	r24, r24
 2e2:	49 f0       	breq	.+18     	; 0x2f6 <endCmdProcessing+0x2a>
    sprintf_P(sprintbuf,PSTR("k$"));
    sendMsg();
  }
  customResponse = FALSE; // reset state
 2e4:	10 92 83 01 	sts	0x0183, r1	; 0x800183 <customResponse>
  rxAddrGlobal = FALSE; // reset address state. this was saved to mute responses on global cmds.
 2e8:	10 92 c9 01 	sts	0x01C9, r1	; 0x8001c9 <rxAddrGlobal>
  rxCommandProcessing = FALSE; // command interpretation and response done
 2ec:	10 92 1a 02 	sts	0x021A, r1	; 0x80021a <rxCommandProcessing>
}
 2f0:	df 91       	pop	r29
 2f2:	cf 91       	pop	r28
 2f4:	08 95       	ret
 * args? [data] [crc code] ?
 ************************************************************************/
void endCmdProcessing(void) {
  bufferClear(&uartRxBuffer,UART_RX_BUFFER_SIZE); // clear to get another cmd, so send response.
  if (!customResponse) { // always send a "k" if we're not sending something else.
    sprintf_P(sprintbuf,PSTR("k$"));
 2f6:	88 e6       	ldi	r24, 0x68	; 104
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	9f 93       	push	r25
 2fc:	8f 93       	push	r24
 2fe:	ca ec       	ldi	r28, 0xCA	; 202
 300:	d1 e0       	ldi	r29, 0x01	; 1
 302:	df 93       	push	r29
 304:	cf 93       	push	r28
 306:	0e 94 45 04 	call	0x88a	; 0x88a <sprintf_P>
 * sendMsg:
 * 
 * Routine is inline to avoid extra function calls in ISR
 ************************************************************************/
void sendMsg(void) {
  if (rxAddrGlobal) {
 30a:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <rxAddrGlobal>
 30e:	0f 90       	pop	r0
 310:	0f 90       	pop	r0
 312:	0f 90       	pop	r0
 314:	0f 90       	pop	r0
 316:	81 11       	cpse	r24, r1
 318:	0c c0       	rjmp	.+24     	; 0x332 <endCmdProcessing+0x66>
    memset(sprintbuf, 0, sizeof(sprintbuf));
    return; // don't send messages for global cmd
  }
  uartSendBuffer(sprintbuf,strlen(sprintbuf));
 31a:	fe 01       	movw	r30, r28
 31c:	01 90       	ld	r0, Z+
 31e:	00 20       	and	r0, r0
 320:	e9 f7       	brne	.-6      	; 0x31c <endCmdProcessing+0x50>
 322:	31 97       	sbiw	r30, 0x01	; 1
 324:	bf 01       	movw	r22, r30
 326:	6a 5c       	subi	r22, 0xCA	; 202
 328:	71 40       	sbci	r23, 0x01	; 1
 32a:	8a ec       	ldi	r24, 0xCA	; 202
 32c:	91 e0       	ldi	r25, 0x01	; 1
 32e:	0e 94 13 03 	call	0x626	; 0x626 <uartSendBuffer>
  memset(sprintbuf, 0, sizeof(sprintbuf));
 332:	80 e5       	ldi	r24, 0x50	; 80
 334:	fe 01       	movw	r30, r28
 336:	11 92       	st	Z+, r1
 338:	8a 95       	dec	r24
 33a:	e9 f7       	brne	.-6      	; 0x336 <endCmdProcessing+0x6a>
 33c:	d3 cf       	rjmp	.-90     	; 0x2e4 <endCmdProcessing+0x18>

0000033e <pointToNextNonNumericChar>:
 *
 * Modify the pointer passed in to point to next non-numeric char.
 * We need the argument passed by address so we can modify the
 * caller's storage.
 *********************************************************************/
void pointToNextNonNumericChar(unsigned char **ppRxDataStr) {
 33e:	dc 01       	movw	r26, r24
 /* Count the digits. Numbers are 0x30 < n < 0x39 */
  while((**ppRxDataStr >= 0x30) & (**ppRxDataStr <= 0x39)) {
 340:	ed 91       	ld	r30, X+
 342:	fc 91       	ld	r31, X
 344:	11 97       	sbiw	r26, 0x01	; 1
 346:	80 81       	ld	r24, Z
 348:	80 53       	subi	r24, 0x30	; 48
 34a:	8a 30       	cpi	r24, 0x0A	; 10
 34c:	68 f4       	brcc	.+26     	; 0x368 <pointToNextNonNumericChar+0x2a>
 34e:	9f 01       	movw	r18, r30
 350:	2f 5f       	subi	r18, 0xFF	; 255
 352:	3f 4f       	sbci	r19, 0xFF	; 255
    (*ppRxDataStr)++;
 354:	f9 01       	movw	r30, r18
 356:	11 96       	adiw	r26, 0x01	; 1
 358:	3c 93       	st	X, r19
 35a:	2e 93       	st	-X, r18
 * We need the argument passed by address so we can modify the
 * caller's storage.
 *********************************************************************/
void pointToNextNonNumericChar(unsigned char **ppRxDataStr) {
 /* Count the digits. Numbers are 0x30 < n < 0x39 */
  while((**ppRxDataStr >= 0x30) & (**ppRxDataStr <= 0x39)) {
 35c:	90 81       	ld	r25, Z
 35e:	2f 5f       	subi	r18, 0xFF	; 255
 360:	3f 4f       	sbci	r19, 0xFF	; 255
 362:	90 53       	subi	r25, 0x30	; 48
 364:	9a 30       	cpi	r25, 0x0A	; 10
 366:	b0 f3       	brcs	.-20     	; 0x354 <pointToNextNonNumericChar+0x16>
 368:	08 95       	ret

0000036a <processCmd>:
 * unless this unit is stuck and does not respond within the specified 
 * response timeout time, 5ms.
 *
 * After successful command processing, send an ack message back to master.
 *********************************************************************/
void processCmd() {
 36a:	2f 92       	push	r2
 36c:	3f 92       	push	r3
 36e:	4f 92       	push	r4
 370:	5f 92       	push	r5
 372:	6f 92       	push	r6
 374:	7f 92       	push	r7
 376:	8f 92       	push	r8
 378:	9f 92       	push	r9
 37a:	af 92       	push	r10
 37c:	bf 92       	push	r11
 37e:	cf 92       	push	r12
 380:	df 92       	push	r13
 382:	ef 92       	push	r14
 384:	ff 92       	push	r15
 386:	0f 93       	push	r16
 388:	1f 93       	push	r17
 38a:	cf 93       	push	r28
 38c:	df 93       	push	r29
 38e:	00 d0       	rcall	.+0      	; 0x390 <processCmd+0x26>
 390:	cd b7       	in	r28, 0x3d	; 61
 392:	de b7       	in	r29, 0x3e	; 62
  u08 rc; // return code from handler funcs
  // get a pointer to the data portion of RX buffer
  cBuffer* myRxBufferPtr;
  unsigned char * myRxBufferDataPtr;
  myRxBufferPtr = uartGetRxBuffer();
 394:	0e 94 07 03 	call	0x60e	; 0x60e <uartGetRxBuffer>
  myRxBufferDataPtr = myRxBufferPtr->dataptr;
 398:	dc 01       	movw	r26, r24
 39a:	ed 91       	ld	r30, X+
 39c:	fc 91       	ld	r31, X
 39e:	fa 83       	std	Y+2, r31	; 0x02
 3a0:	e9 83       	std	Y+1, r30	; 0x01
    switch(*myRxBufferDataPtr++) { // get a char and then increment ptr
      // SET Address
      case 'a':
        rc = setCommandProtocolAddr(atoi((char *)myRxBufferDataPtr));
        if (rc) {
          customResponse = TRUE;
 3a2:	33 24       	eor	r3, r3
 3a4:	3a 94       	dec	r3
          sprintf_P(sprintbuf,PSTR("err-badaddr$"));
 3a6:	8d e8       	ldi	r24, 0x8D	; 141
 3a8:	48 2e       	mov	r4, r24
 3aa:	80 e0       	ldi	r24, 0x00	; 0
 3ac:	58 2e       	mov	r5, r24
 3ae:	0a ec       	ldi	r16, 0xCA	; 202
 3b0:	11 e0       	ldi	r17, 0x01	; 1
        }
        break; // end 'g' command
        
      default:
        customResponse = TRUE;
        sprintf_P(sprintbuf, PSTR("err-cmd$"));
 3b2:	9b e6       	ldi	r25, 0x6B	; 107
 3b4:	e9 2e       	mov	r14, r25
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	f9 2e       	mov	r15, r25
            rxAddrGlobal = FALSE;
            sendMsg();
            break;
          
          case 'b': case 'B':
            sprintf_P(sprintbuf, PSTR("g%s$"), getVolatileString());
 3ba:	26 e4       	ldi	r18, 0x46	; 70
 3bc:	82 2e       	mov	r8, r18
 3be:	27 e0       	ldi	r18, 0x07	; 7
 3c0:	92 2e       	mov	r9, r18
 3c2:	33 e8       	ldi	r19, 0x83	; 131
 3c4:	a3 2e       	mov	r10, r19
 3c6:	30 e0       	ldi	r19, 0x00	; 0
 3c8:	b3 2e       	mov	r11, r19
            sendMsg();
            break;
            
          default:
            sprintf_P(sprintbuf,PSTR("err-getnoprop$"));
 3ca:	44 e7       	ldi	r20, 0x74	; 116
 3cc:	c4 2e       	mov	r12, r20
 3ce:	40 e0       	ldi	r20, 0x00	; 0
 3d0:	d4 2e       	mov	r13, r20
        // Indicate to cmd protocol that we are sending a custom ack
        customResponse = TRUE;
        // select sub-command
        switch(*myRxBufferDataPtr++) {
          case 'a': case 'A':
            sprintf_P(sprintbuf, PSTR("g%d$"), getCommandProtocolAddr());
 3d2:	58 e8       	ldi	r21, 0x88	; 136
 3d4:	65 2e       	mov	r6, r21
 3d6:	50 e0       	ldi	r21, 0x00	; 0
 3d8:	75 2e       	mov	r7, r21
  cBuffer* myRxBufferPtr;
  unsigned char * myRxBufferDataPtr;
  myRxBufferPtr = uartGetRxBuffer();
  myRxBufferDataPtr = myRxBufferPtr->dataptr;
  
  while (*myRxBufferDataPtr) { // do until we are at the null term (end of cmd)
 3da:	80 81       	ld	r24, Z
 3dc:	88 23       	and	r24, r24
 3de:	91 f1       	breq	.+100    	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
    switch(*myRxBufferDataPtr++) { // get a char and then increment ptr
 3e0:	9f 01       	movw	r18, r30
 3e2:	2f 5f       	subi	r18, 0xFF	; 255
 3e4:	3f 4f       	sbci	r19, 0xFF	; 255
 3e6:	3a 83       	std	Y+2, r19	; 0x02
 3e8:	29 83       	std	Y+1, r18	; 0x01
 3ea:	90 81       	ld	r25, Z
 3ec:	91 36       	cpi	r25, 0x61	; 97
 3ee:	09 f4       	brne	.+2      	; 0x3f2 <processCmd+0x88>
 3f0:	6b c0       	rjmp	.+214    	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
 3f2:	08 f0       	brcs	.+2      	; 0x3f6 <processCmd+0x8c>
 3f4:	4d c0       	rjmp	.+154    	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
 3f6:	92 34       	cpi	r25, 0x42	; 66
 3f8:	09 f4       	brne	.+2      	; 0x3fc <processCmd+0x92>
 3fa:	5c c0       	rjmp	.+184    	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
 3fc:	97 34       	cpi	r25, 0x47	; 71
 3fe:	09 f0       	breq	.+2      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 400:	4c c0       	rjmp	.+152    	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
        break; // End 'b' command
       
      // Get info
      case 'g': case 'G':
        // Indicate to cmd protocol that we are sending a custom ack
        customResponse = TRUE;
 402:	30 92 83 01 	sts	0x0183, r3	; 0x800183 <customResponse>
        // select sub-command
        switch(*myRxBufferDataPtr++) {
 406:	cf 01       	movw	r24, r30
 408:	02 96       	adiw	r24, 0x02	; 2
 40a:	9a 83       	std	Y+2, r25	; 0x02
 40c:	89 83       	std	Y+1, r24	; 0x01
 40e:	81 81       	ldd	r24, Z+1	; 0x01
 410:	82 34       	cpi	r24, 0x42	; 66
 412:	69 f1       	breq	.+90     	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
 414:	08 f4       	brcc	.+2      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 416:	64 c0       	rjmp	.+200    	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
 418:	81 36       	cpi	r24, 0x61	; 97
 41a:	09 f4       	brne	.+2      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 41c:	64 c0       	rjmp	.+200    	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
 41e:	82 36       	cpi	r24, 0x62	; 98
 420:	31 f1       	breq	.+76     	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
            sprintf_P(sprintbuf, PSTR("g%s$"), getVolatileString());
            sendMsg();
            break;
            
          default:
            sprintf_P(sprintbuf,PSTR("err-getnoprop$"));
 422:	df 92       	push	r13
 424:	cf 92       	push	r12
 426:	1f 93       	push	r17
 428:	0f 93       	push	r16
 42a:	0e 94 45 04 	call	0x88a	; 0x88a <sprintf_P>
            sendMsg();
 42e:	0e 94 3b 01 	call	0x276	; 0x276 <sendMsg>
 432:	0f 90       	pop	r0
 434:	0f 90       	pop	r0
 436:	0f 90       	pop	r0
 438:	0f 90       	pop	r0
 43a:	e9 81       	ldd	r30, Y+1	; 0x01
 43c:	fa 81       	ldd	r31, Y+2	; 0x02
  cBuffer* myRxBufferPtr;
  unsigned char * myRxBufferDataPtr;
  myRxBufferPtr = uartGetRxBuffer();
  myRxBufferDataPtr = myRxBufferPtr->dataptr;
  
  while (*myRxBufferDataPtr) { // do until we are at the null term (end of cmd)
 43e:	80 81       	ld	r24, Z
 440:	81 11       	cpse	r24, r1
 442:	ce cf       	rjmp	.-100    	; 0x3e0 <processCmd+0x76>
      default:
        customResponse = TRUE;
        sprintf_P(sprintbuf, PSTR("err-cmd$"));
    } // end switch on command
  } // end while more data
}
 444:	0f 90       	pop	r0
 446:	0f 90       	pop	r0
 448:	df 91       	pop	r29
 44a:	cf 91       	pop	r28
 44c:	1f 91       	pop	r17
 44e:	0f 91       	pop	r16
 450:	ff 90       	pop	r15
 452:	ef 90       	pop	r14
 454:	df 90       	pop	r13
 456:	cf 90       	pop	r12
 458:	bf 90       	pop	r11
 45a:	af 90       	pop	r10
 45c:	9f 90       	pop	r9
 45e:	8f 90       	pop	r8
 460:	7f 90       	pop	r7
 462:	6f 90       	pop	r6
 464:	5f 90       	pop	r5
 466:	4f 90       	pop	r4
 468:	3f 90       	pop	r3
 46a:	2f 90       	pop	r2
 46c:	08 95       	ret
            rxAddrGlobal = FALSE;
            sendMsg();
            break;
          
          case 'b': case 'B':
            sprintf_P(sprintbuf, PSTR("g%s$"), getVolatileString());
 46e:	9f 92       	push	r9
 470:	8f 92       	push	r8
 472:	bf 92       	push	r11
 474:	af 92       	push	r10
 476:	1f 93       	push	r17
 478:	0f 93       	push	r16
 47a:	0e 94 45 04 	call	0x88a	; 0x88a <sprintf_P>
            sendMsg();
 47e:	0e 94 3b 01 	call	0x276	; 0x276 <sendMsg>
            break;
 482:	0f 90       	pop	r0
 484:	0f 90       	pop	r0
 486:	0f 90       	pop	r0
 488:	0f 90       	pop	r0
 48a:	0f 90       	pop	r0
 48c:	0f 90       	pop	r0
 48e:	d5 cf       	rjmp	.-86     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
  unsigned char * myRxBufferDataPtr;
  myRxBufferPtr = uartGetRxBuffer();
  myRxBufferDataPtr = myRxBufferPtr->dataptr;
  
  while (*myRxBufferDataPtr) { // do until we are at the null term (end of cmd)
    switch(*myRxBufferDataPtr++) { // get a char and then increment ptr
 490:	92 36       	cpi	r25, 0x62	; 98
 492:	81 f0       	breq	.+32     	; 0x4b4 <__LOCK_REGION_LENGTH__+0xb4>
 494:	97 36       	cpi	r25, 0x67	; 103
 496:	09 f4       	brne	.+2      	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
 498:	b4 cf       	rjmp	.-152    	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
            sendMsg();
        }
        break; // end 'g' command
        
      default:
        customResponse = TRUE;
 49a:	30 92 83 01 	sts	0x0183, r3	; 0x800183 <customResponse>
        sprintf_P(sprintbuf, PSTR("err-cmd$"));
 49e:	ff 92       	push	r15
 4a0:	ef 92       	push	r14
 4a2:	1f 93       	push	r17
 4a4:	0f 93       	push	r16
 4a6:	0e 94 45 04 	call	0x88a	; 0x88a <sprintf_P>
 4aa:	0f 90       	pop	r0
 4ac:	0f 90       	pop	r0
 4ae:	0f 90       	pop	r0
 4b0:	0f 90       	pop	r0
 4b2:	c3 cf       	rjmp	.-122    	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
        break; // End 'a' command
       
      // Input Data String into a volatile variable on the arduino
      case 'b': case 'B':
        //; // "a label can only be a part of a statement" <= the following line declares a variable first
        CRITICAL_SECTION_START;
 4b4:	2f b6       	in	r2, 0x3f	; 63
 4b6:	f8 94       	cli
void setVolatileString(unsigned char *newString) {
  // limit the copy to 
  if (sizeof(newString) >= 39) { // sizeof does ptr len or string+null len??
    strncpy((char *)&myVolatileStr, (char *)newString, 39);
  } else {
    strcpy((char *)&myVolatileStr, (char *)newString);
 4b8:	69 81       	ldd	r22, Y+1	; 0x01
 4ba:	7a 81       	ldd	r23, Y+2	; 0x02
 4bc:	86 e4       	ldi	r24, 0x46	; 70
 4be:	97 e0       	ldi	r25, 0x07	; 7
 4c0:	0e 94 36 04 	call	0x86c	; 0x86c <strcpy>
      // Input Data String into a volatile variable on the arduino
      case 'b': case 'B':
        //; // "a label can only be a part of a statement" <= the following line declares a variable first
        CRITICAL_SECTION_START;
        setVolatileString(myRxBufferDataPtr);
        CRITICAL_SECTION_END;
 4c4:	2f be       	out	0x3f, r2	; 63
        break; // End 'b' command
 4c6:	b9 cf       	rjmp	.-142    	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
  
  while (*myRxBufferDataPtr) { // do until we are at the null term (end of cmd)
    switch(*myRxBufferDataPtr++) { // get a char and then increment ptr
      // SET Address
      case 'a':
        rc = setCommandProtocolAddr(atoi((char *)myRxBufferDataPtr));
 4c8:	c9 01       	movw	r24, r18
 4ca:	0e 94 11 04 	call	0x822	; 0x822 <atoi>
 4ce:	0e 94 2e 01 	call	0x25c	; 0x25c <setCommandProtocolAddr>
        if (rc) {
 4d2:	81 11       	cpse	r24, r1
 4d4:	1d c0       	rjmp	.+58     	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
          customResponse = TRUE;
          sprintf_P(sprintbuf,PSTR("err-badaddr$"));
          sendMsg();
        }
        // use EEPROM to store address between powerups. Only reprogram on non-global addr.
        pointToNextNonNumericChar(&myRxBufferDataPtr);
 4d6:	ce 01       	movw	r24, r28
 4d8:	01 96       	adiw	r24, 0x01	; 1
 4da:	0e 94 9f 01 	call	0x33e	; 0x33e <pointToNextNonNumericChar>
        break; // End 'a' command
 4de:	ad cf       	rjmp	.-166    	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
      // Get info
      case 'g': case 'G':
        // Indicate to cmd protocol that we are sending a custom ack
        customResponse = TRUE;
        // select sub-command
        switch(*myRxBufferDataPtr++) {
 4e0:	81 34       	cpi	r24, 0x41	; 65
 4e2:	09 f0       	breq	.+2      	; 0x4e6 <__LOCK_REGION_LENGTH__+0xe6>
 4e4:	9e cf       	rjmp	.-196    	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
          case 'a': case 'A':
            sprintf_P(sprintbuf, PSTR("g%d$"), getCommandProtocolAddr());
 4e6:	0e 94 2a 01 	call	0x254	; 0x254 <getCommandProtocolAddr>
 4ea:	1f 92       	push	r1
 4ec:	8f 93       	push	r24
 4ee:	7f 92       	push	r7
 4f0:	6f 92       	push	r6
 4f2:	1f 93       	push	r17
 4f4:	0f 93       	push	r16
 4f6:	0e 94 45 04 	call	0x88a	; 0x88a <sprintf_P>
            // SPECIAL CASE!! we WANT to get the address back on a global command!
            // You can only have ONE device on the net for this to work. Otherwise, user beware!
            rxAddrGlobal = FALSE;
 4fa:	10 92 c9 01 	sts	0x01C9, r1	; 0x8001c9 <rxAddrGlobal>
            sendMsg();
 4fe:	0e 94 3b 01 	call	0x276	; 0x276 <sendMsg>
            break;
 502:	0f 90       	pop	r0
 504:	0f 90       	pop	r0
 506:	0f 90       	pop	r0
 508:	0f 90       	pop	r0
 50a:	0f 90       	pop	r0
 50c:	0f 90       	pop	r0
 50e:	95 cf       	rjmp	.-214    	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
    switch(*myRxBufferDataPtr++) { // get a char and then increment ptr
      // SET Address
      case 'a':
        rc = setCommandProtocolAddr(atoi((char *)myRxBufferDataPtr));
        if (rc) {
          customResponse = TRUE;
 510:	30 92 83 01 	sts	0x0183, r3	; 0x800183 <customResponse>
          sprintf_P(sprintbuf,PSTR("err-badaddr$"));
 514:	5f 92       	push	r5
 516:	4f 92       	push	r4
 518:	1f 93       	push	r17
 51a:	0f 93       	push	r16
 51c:	0e 94 45 04 	call	0x88a	; 0x88a <sprintf_P>
          sendMsg();
 520:	0e 94 3b 01 	call	0x276	; 0x276 <sendMsg>
 524:	0f 90       	pop	r0
 526:	0f 90       	pop	r0
 528:	0f 90       	pop	r0
 52a:	0f 90       	pop	r0
 52c:	d4 cf       	rjmp	.-88     	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>

0000052e <main>:
/**************************************************
 * Start of pgm:
 */
int main(void) {
	
	DDRD |= (1 << DDD3); // set PD3 to OUTPUT
 52e:	53 9a       	sbi	0x0a, 3	; 10
	DDRD |= (1 << DDD4); // set PD4 to OUTPUT
 530:	54 9a       	sbi	0x0a, 4	; 10
  
  DDRD |= (1 << DDD5); // set PD4 to OUTPUT for testing - led blink
 532:	55 9a       	sbi	0x0a, 5	; 10
  PORTD |= (1 << PIND5); // DEBUG TURN ON LED INDICATOR
 534:	5d 9a       	sbi	0x0b, 5	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 536:	2f ef       	ldi	r18, 0xFF	; 255
 538:	81 ee       	ldi	r24, 0xE1	; 225
 53a:	94 e0       	ldi	r25, 0x04	; 4
 53c:	21 50       	subi	r18, 0x01	; 1
 53e:	80 40       	sbci	r24, 0x00	; 0
 540:	90 40       	sbci	r25, 0x00	; 0
 542:	e1 f7       	brne	.-8      	; 0x53c <main+0xe>
 544:	00 c0       	rjmp	.+0      	; 0x546 <main+0x18>
 546:	00 00       	nop
  _delay_ms(100);
  PORTD &= ~(1 << PIND5); // DEBUG TURN OFF LED INDICATOR
 548:	5d 98       	cbi	0x0b, 5	; 11

  /*************************
   * UART initialization stuff
   */
  uartInit();
 54a:	0e 94 d7 02 	call	0x5ae	; 0x5ae <uartInit>
  
  /*************************
   * Command Protocol Library initialization stuff
   */
  // set library function to handle bytes received over UART (and other stuff)
  initCmdHandler();
 54e:	0e 94 fd 00 	call	0x1fa	; 0x1fa <initCmdHandler>
  // set address, if not already in eeprom
  initCommandProtocolAddr(CMD_UART_THIS_DEVICE_ADDRESS);
 552:	81 e0       	ldi	r24, 0x01	; 1
 554:	0e 94 0b 01 	call	0x216	; 0x216 <initCommandProtocolAddr>
  sprintf_P((char *)sprintbuf,PSTR("testing %d$"), 10);
 558:	1f 92       	push	r1
 55a:	8a e0       	ldi	r24, 0x0A	; 10
 55c:	8f 93       	push	r24
 55e:	8a e9       	ldi	r24, 0x9A	; 154
 560:	90 e0       	ldi	r25, 0x00	; 0
 562:	9f 93       	push	r25
 564:	8f 93       	push	r24
 566:	8a ec       	ldi	r24, 0xCA	; 202
 568:	91 e0       	ldi	r25, 0x01	; 1
 56a:	9f 93       	push	r25
 56c:	8f 93       	push	r24
 56e:	0e 94 45 04 	call	0x88a	; 0x88a <sprintf_P>
  uartSendBuffer((char *)sprintbuf, 10);
 572:	6a e0       	ldi	r22, 0x0A	; 10
 574:	70 e0       	ldi	r23, 0x00	; 0
 576:	8a ec       	ldi	r24, 0xCA	; 202
 578:	91 e0       	ldi	r25, 0x01	; 1
 57a:	0e 94 13 03 	call	0x626	; 0x626 <uartSendBuffer>
  
  uartSendByte('a');PORTD |= (1 << PIND5); // DEBUG TURN ON LED INDICATOR
 57e:	81 e6       	ldi	r24, 0x61	; 97
 580:	0e 94 0a 03 	call	0x614	; 0x614 <uartSendByte>
 584:	5d 9a       	sbi	0x0b, 5	; 11
  uartSendByte('b');
 586:	82 e6       	ldi	r24, 0x62	; 98
 588:	0e 94 0a 03 	call	0x614	; 0x614 <uartSendByte>
 58c:	0f 90       	pop	r0
 58e:	0f 90       	pop	r0
 590:	0f 90       	pop	r0
 592:	0f 90       	pop	r0
 594:	0f 90       	pop	r0
 596:	0f 90       	pop	r0
  /* Loop forever, handle uart messages if we get any */
  while (1) {
    u08 rc; 
    
    if (rxCompleteFlag) {
 598:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <rxCompleteFlag>
 59c:	88 23       	and	r24, r24
 59e:	e1 f3       	breq	.-8      	; 0x598 <main+0x6a>
      beginCmdProcessing(); // follow command protocol
 5a0:	0e 94 60 01 	call	0x2c0	; 0x2c0 <beginCmdProcessing>
      processCmd(); // interpret the current waiting command
 5a4:	0e 94 b5 01 	call	0x36a	; 0x36a <processCmd>
      endCmdProcessing(); // follow command protocol
 5a8:	0e 94 66 01 	call	0x2cc	; 0x2cc <endCmdProcessing>
 5ac:	f5 cf       	rjmp	.-22     	; 0x598 <main+0x6a>

000005ae <uartInit>:
  #ifdef UART_USE_RS485
  uart485OutputEnable();
  #endif
	outb(UDR0, txData);
	// set ready state to FALSE
	uartReadyTx = FALSE;
 5ae:	cf 93       	push	r28
 5b0:	cf b7       	in	r28, 0x3f	; 63
 5b2:	f8 94       	cli
 5b4:	40 e4       	ldi	r20, 0x40	; 64
 5b6:	50 e0       	ldi	r21, 0x00	; 0
 5b8:	62 e4       	ldi	r22, 0x42	; 66
 5ba:	71 e0       	ldi	r23, 0x01	; 1
 5bc:	8f e6       	ldi	r24, 0x6F	; 111
 5be:	97 e0       	ldi	r25, 0x07	; 7
 5c0:	0e 94 67 00 	call	0xce	; 0xce <bufferInit>
 5c4:	40 e4       	ldi	r20, 0x40	; 64
 5c6:	50 e0       	ldi	r21, 0x00	; 0
 5c8:	62 e0       	ldi	r22, 0x02	; 2
 5ca:	71 e0       	ldi	r23, 0x01	; 1
 5cc:	8a e7       	ldi	r24, 0x7A	; 122
 5ce:	97 e0       	ldi	r25, 0x07	; 7
 5d0:	0e 94 67 00 	call	0xce	; 0xce <bufferInit>
 5d4:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 5d8:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 5dc:	88 ed       	ldi	r24, 0xD8	; 216
 5de:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 5e2:	83 e3       	ldi	r24, 0x33	; 51
 5e4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 5e8:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 5ec:	8f ef       	ldi	r24, 0xFF	; 255
 5ee:	80 93 6e 07 	sts	0x076E, r24	; 0x80076e <uartReadyTx>
 5f2:	10 92 77 07 	sts	0x0777, r1	; 0x800777 <uartBufferedTx>
 5f6:	10 92 83 07 	sts	0x0783, r1	; 0x800783 <uartRxOverflow+0x1>
 5fa:	10 92 82 07 	sts	0x0782, r1	; 0x800782 <uartRxOverflow>
 5fe:	cf bf       	out	0x3f, r28	; 63
 600:	cf 91       	pop	r28
 602:	08 95       	ret

00000604 <uartSetRxHandler>:
 604:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 608:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 60c:	08 95       	ret

0000060e <uartGetRxBuffer>:
 60e:	8f e6       	ldi	r24, 0x6F	; 111
 610:	97 e0       	ldi	r25, 0x07	; 7
 612:	08 95       	ret

00000614 <uartSendByte>:
 614:	90 91 6e 07 	lds	r25, 0x076E	; 0x80076e <uartReadyTx>
 618:	99 23       	and	r25, r25
 61a:	e1 f3       	breq	.-8      	; 0x614 <uartSendByte>
 61c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 620:	10 92 6e 07 	sts	0x076E, r1	; 0x80076e <uartReadyTx>
 624:	08 95       	ret

00000626 <uartSendBuffer>:
  #endif
	uartSendByte(bufferGetFromFront(&uartTxBuffer));
}

// transmit nBytes from buffer out the uart
u08 uartSendBuffer(char *buffer, u16 nBytes) {
 626:	ff 92       	push	r15
 628:	0f 93       	push	r16
 62a:	1f 93       	push	r17
 62c:	cf 93       	push	r28
 62e:	df 93       	push	r29
 630:	fc 01       	movw	r30, r24
	register u08 first;
	register u16 i;
	
	// wait for the transmitter to be ready
	while(!uartReadyTx);
 632:	90 91 6e 07 	lds	r25, 0x076E	; 0x80076e <uartReadyTx>
 636:	99 23       	and	r25, r25
 638:	e1 f3       	breq	.-8      	; 0x632 <uartSendBuffer+0xc>
	
	
	
	// check if there's space (and that we have any bytes to send at all)
	if((uartTxBuffer.datalength + nBytes < uartTxBuffer.size) && nBytes)
 63a:	20 91 7e 07 	lds	r18, 0x077E	; 0x80077e <uartTxBuffer+0x4>
 63e:	30 91 7f 07 	lds	r19, 0x077F	; 0x80077f <uartTxBuffer+0x5>
 642:	26 0f       	add	r18, r22
 644:	37 1f       	adc	r19, r23
 646:	80 91 7c 07 	lds	r24, 0x077C	; 0x80077c <uartTxBuffer+0x2>
 64a:	90 91 7d 07 	lds	r25, 0x077D	; 0x80077d <uartTxBuffer+0x3>
 64e:	28 17       	cp	r18, r24
 650:	39 07       	cpc	r19, r25
 652:	30 f5       	brcc	.+76     	; 0x6a0 <uartSendBuffer+0x7a>
 654:	61 15       	cp	r22, r1
 656:	71 05       	cpc	r23, r1
 658:	19 f1       	breq	.+70     	; 0x6a0 <uartSendBuffer+0x7a>
	{
		// grab first character
		first = *buffer++;
 65a:	ef 01       	movw	r28, r30
 65c:	21 96       	adiw	r28, 0x01	; 1
 65e:	f0 80       	ld	r15, Z
		// copy THE REST OF user buffer to uart transmit buffer
		for(i = 0; i < nBytes-1; i++)
 660:	61 30       	cpi	r22, 0x01	; 1
 662:	71 05       	cpc	r23, r1
 664:	59 f0       	breq	.+22     	; 0x67c <uartSendBuffer+0x56>
 666:	8f 01       	movw	r16, r30
 668:	06 0f       	add	r16, r22
 66a:	17 1f       	adc	r17, r23
		{
			// put data bytes at end of buffer
			bufferAddToEnd(&uartTxBuffer, *buffer++);
 66c:	69 91       	ld	r22, Y+
 66e:	8a e7       	ldi	r24, 0x7A	; 122
 670:	97 e0       	ldi	r25, 0x07	; 7
 672:	0e 94 74 00 	call	0xe8	; 0xe8 <bufferAddToEnd>
	if((uartTxBuffer.datalength + nBytes < uartTxBuffer.size) && nBytes)
	{
		// grab first character
		first = *buffer++;
		// copy THE REST OF user buffer to uart transmit buffer
		for(i = 0; i < nBytes-1; i++)
 676:	c0 17       	cp	r28, r16
 678:	d1 07       	cpc	r29, r17
 67a:	c1 f7       	brne	.-16     	; 0x66c <uartSendBuffer+0x46>
			// put data bytes at end of buffer
			bufferAddToEnd(&uartTxBuffer, *buffer++);
		}

		// send the first byte to get things going by interrupts
		uartBufferedTx = TRUE;
 67c:	8f ef       	ldi	r24, 0xFF	; 255
 67e:	80 93 77 07 	sts	0x0777, r24	; 0x800777 <uartBufferedTx>
}

// transmits a byte over the uart
void uartSendByte(u08 txData) {
	// wait for the transmitter to be ready
	while(!uartReadyTx);
 682:	80 91 6e 07 	lds	r24, 0x076E	; 0x80076e <uartReadyTx>
 686:	88 23       	and	r24, r24
 688:	e1 f3       	breq	.-8      	; 0x682 <uartSendBuffer+0x5c>
	// send byte
  #ifdef UART_USE_RS485
  uart485OutputEnable();
  #endif
	outb(UDR0, txData);
 68a:	f0 92 c6 00 	sts	0x00C6, r15	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	// set ready state to FALSE
	uartReadyTx = FALSE;
 68e:	10 92 6e 07 	sts	0x076E, r1	; 0x80076e <uartReadyTx>
    _delay_us(1);
    #endif
    
		uartSendByte(first);
		// return success
		return TRUE;
 692:	8f ef       	ldi	r24, 0xFF	; 255
	else
	{
		// return failure
		return FALSE;
	}
}
 694:	df 91       	pop	r29
 696:	cf 91       	pop	r28
 698:	1f 91       	pop	r17
 69a:	0f 91       	pop	r16
 69c:	ff 90       	pop	r15
 69e:	08 95       	ret
		return TRUE;
	}
	else
	{
		// return failure
		return FALSE;
 6a0:	80 e0       	ldi	r24, 0x00	; 0
	}
}
 6a2:	df 91       	pop	r29
 6a4:	cf 91       	pop	r28
 6a6:	1f 91       	pop	r17
 6a8:	0f 91       	pop	r16
 6aa:	ff 90       	pop	r15
 6ac:	08 95       	ret

000006ae <__vector_19>:
inline void uart485EnableDriverCntlPin(void) {
  UARTRS485DDR |= BV(RS485PIN);
}
#endif
// UART Data Register Empty Interrupt Handler
UART_INTERRUPT_HANDLER(SIG_UART_DATA) {
 6ae:	1f 92       	push	r1
 6b0:	0f 92       	push	r0
 6b2:	0f b6       	in	r0, 0x3f	; 63
 6b4:	0f 92       	push	r0
 6b6:	11 24       	eor	r1, r1
  // nop
}
 6b8:	0f 90       	pop	r0
 6ba:	0f be       	out	0x3f, r0	; 63
 6bc:	0f 90       	pop	r0
 6be:	1f 90       	pop	r1
 6c0:	18 95       	reti

000006c2 <__vector_20>:

// UART Transmit Complete Interrupt Handler
UART_INTERRUPT_HANDLER(SIG_UART_TRANS) {
 6c2:	1f 92       	push	r1
 6c4:	0f 92       	push	r0
 6c6:	0f b6       	in	r0, 0x3f	; 63
 6c8:	0f 92       	push	r0
 6ca:	11 24       	eor	r1, r1
 6cc:	2f 93       	push	r18
 6ce:	3f 93       	push	r19
 6d0:	4f 93       	push	r20
 6d2:	5f 93       	push	r21
 6d4:	8f 93       	push	r24
 6d6:	9f 93       	push	r25
 6d8:	ef 93       	push	r30
 6da:	ff 93       	push	r31
	PORTD |= (1 << PIND5); // DEBUG TURN ON LED INDICATOR
 6dc:	5d 9a       	sbi	0x0b, 5	; 11
	//UDR0 = uartBufferedTx;
	// check if buffered tx is enabled
	if(uartBufferedTx)
 6de:	80 91 77 07 	lds	r24, 0x0777	; 0x800777 <uartBufferedTx>
 6e2:	88 23       	and	r24, r24
 6e4:	99 f1       	breq	.+102    	; 0x74c <__vector_20+0x8a>
	{
		
		// check if there's data left in the buffer
		if(uartTxBuffer.datalength)
 6e6:	20 91 7e 07 	lds	r18, 0x077E	; 0x80077e <uartTxBuffer+0x4>
 6ea:	30 91 7f 07 	lds	r19, 0x077F	; 0x80077f <uartTxBuffer+0x5>
 6ee:	21 15       	cp	r18, r1
 6f0:	31 05       	cpc	r19, r1
 6f2:	e1 f1       	breq	.+120    	; 0x76c <__vector_20+0xaa>
		{
			// send byte from top of buffer
      /* The Following section is expanded from bufferGetFromFront() */
			//uartTxIntData = bufferGetFromFront(&uartTxBuffer);
      uartTxIntData = 0;
 6f4:	10 92 79 07 	sts	0x0779, r1	; 0x800779 <uartTxIntData>
			if(uartTxBuffer.datalength)
			{
				// get the first character from buffer
				uartTxIntData = uartTxBuffer.dataptr[uartTxBuffer.dataindex];
 6f8:	80 91 80 07 	lds	r24, 0x0780	; 0x800780 <uartTxBuffer+0x6>
 6fc:	90 91 81 07 	lds	r25, 0x0781	; 0x800781 <uartTxBuffer+0x7>
 700:	e0 91 7a 07 	lds	r30, 0x077A	; 0x80077a <uartTxBuffer>
 704:	f0 91 7b 07 	lds	r31, 0x077B	; 0x80077b <uartTxBuffer+0x1>
 708:	e8 0f       	add	r30, r24
 70a:	f9 1f       	adc	r31, r25
 70c:	40 81       	ld	r20, Z
 70e:	40 93 79 07 	sts	0x0779, r20	; 0x800779 <uartTxIntData>
				// move index down and decrement length
				uartTxBuffer.dataindex++;
 712:	01 96       	adiw	r24, 0x01	; 1
 714:	90 93 81 07 	sts	0x0781, r25	; 0x800781 <uartTxBuffer+0x7>
 718:	80 93 80 07 	sts	0x0780, r24	; 0x800780 <uartTxBuffer+0x6>
				if(uartTxBuffer.dataindex >= uartTxBuffer.size)
 71c:	40 91 7c 07 	lds	r20, 0x077C	; 0x80077c <uartTxBuffer+0x2>
 720:	50 91 7d 07 	lds	r21, 0x077D	; 0x80077d <uartTxBuffer+0x3>
 724:	84 17       	cp	r24, r20
 726:	95 07       	cpc	r25, r21
 728:	30 f0       	brcs	.+12     	; 0x736 <__vector_20+0x74>
				{
					uartTxBuffer.dataindex -= uartTxBuffer.size;
 72a:	84 1b       	sub	r24, r20
 72c:	95 0b       	sbc	r25, r21
 72e:	90 93 81 07 	sts	0x0781, r25	; 0x800781 <uartTxBuffer+0x7>
 732:	80 93 80 07 	sts	0x0780, r24	; 0x800780 <uartTxBuffer+0x6>
				}
				uartTxBuffer.datalength--;
 736:	21 50       	subi	r18, 0x01	; 1
 738:	31 09       	sbc	r19, r1
 73a:	30 93 7f 07 	sts	0x077F, r19	; 0x80077f <uartTxBuffer+0x5>
 73e:	20 93 7e 07 	sts	0x077E, r18	; 0x80077e <uartTxBuffer+0x4>
			}
			outb(UDR0, uartTxIntData);
 742:	80 91 79 07 	lds	r24, 0x0779	; 0x800779 <uartTxIntData>
 746:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 74a:	03 c0       	rjmp	.+6      	; 0x752 <__vector_20+0x90>
	}
	else
	{
		// we're using single-byte tx mode
		// indicate transmit complete, back to ready
		uartReadyTx = TRUE;
 74c:	8f ef       	ldi	r24, 0xFF	; 255
 74e:	80 93 6e 07 	sts	0x076E, r24	; 0x80076e <uartReadyTx>
    #ifdef UART_USE_RS485
    uart485OutputDisable();
    #endif
	}
}
 752:	ff 91       	pop	r31
 754:	ef 91       	pop	r30
 756:	9f 91       	pop	r25
 758:	8f 91       	pop	r24
 75a:	5f 91       	pop	r21
 75c:	4f 91       	pop	r20
 75e:	3f 91       	pop	r19
 760:	2f 91       	pop	r18
 762:	0f 90       	pop	r0
 764:	0f be       	out	0x3f, r0	; 63
 766:	0f 90       	pop	r0
 768:	1f 90       	pop	r1
 76a:	18 95       	reti
			outb(UDR0, uartTxIntData);
		}
		else
		{
			// no data left
			uartBufferedTx = FALSE;
 76c:	10 92 77 07 	sts	0x0777, r1	; 0x800777 <uartBufferedTx>
			// return to ready state
			uartReadyTx = TRUE;
 770:	8f ef       	ldi	r24, 0xFF	; 255
 772:	80 93 6e 07 	sts	0x076E, r24	; 0x80076e <uartReadyTx>
 776:	ed cf       	rjmp	.-38     	; 0x752 <__vector_20+0x90>

00000778 <__vector_18>:
	}
}

// UART Receive Complete Interrupt Handler
UART_INTERRUPT_HANDLER(SIG_UART_RECV)
{
 778:	1f 92       	push	r1
 77a:	0f 92       	push	r0
 77c:	0f b6       	in	r0, 0x3f	; 63
 77e:	0f 92       	push	r0
 780:	11 24       	eor	r1, r1
 782:	2f 93       	push	r18
 784:	3f 93       	push	r19
 786:	4f 93       	push	r20
 788:	5f 93       	push	r21
 78a:	6f 93       	push	r22
 78c:	7f 93       	push	r23
 78e:	8f 93       	push	r24
 790:	9f 93       	push	r25
 792:	af 93       	push	r26
 794:	bf 93       	push	r27
 796:	ef 93       	push	r30
 798:	ff 93       	push	r31
	u08 c;
	PORTD |= (1 << PIND5); // DEBUG TURN ON LED INDICATOR
 79a:	5d 9a       	sbi	0x0b, 5	; 11
	// get received char
	c = inb(UDR);
 79c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  
	// if there's a user function to handle this receive event
	if(UartRxFunc)
 7a0:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
 7a4:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <_edata+0x1>
 7a8:	23 2b       	or	r18, r19
 7aa:	b1 f0       	breq	.+44     	; 0x7d8 <__vector_18+0x60>
	{
		// call it and pass the received data
		UartRxFunc(c);
 7ac:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <_edata>
 7b0:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <_edata+0x1>
 7b4:	09 95       	icall
			// no space in buffer
			// count overflow
			uartRxOverflow++;
		}
	}
}
 7b6:	ff 91       	pop	r31
 7b8:	ef 91       	pop	r30
 7ba:	bf 91       	pop	r27
 7bc:	af 91       	pop	r26
 7be:	9f 91       	pop	r25
 7c0:	8f 91       	pop	r24
 7c2:	7f 91       	pop	r23
 7c4:	6f 91       	pop	r22
 7c6:	5f 91       	pop	r21
 7c8:	4f 91       	pop	r20
 7ca:	3f 91       	pop	r19
 7cc:	2f 91       	pop	r18
 7ce:	0f 90       	pop	r0
 7d0:	0f be       	out	0x3f, r0	; 63
 7d2:	0f 90       	pop	r0
 7d4:	1f 90       	pop	r1
 7d6:	18 95       	reti
	else
	{
		// otherwise do default processing
		// put received char in buffer
		// check if there's space
		if( !bufferAddToEnd(&uartRxBuffer, c) )
 7d8:	68 2f       	mov	r22, r24
 7da:	8f e6       	ldi	r24, 0x6F	; 111
 7dc:	97 e0       	ldi	r25, 0x07	; 7
 7de:	0e 94 74 00 	call	0xe8	; 0xe8 <bufferAddToEnd>
 7e2:	81 11       	cpse	r24, r1
 7e4:	e8 cf       	rjmp	.-48     	; 0x7b6 <__vector_18+0x3e>
		{
			// no space in buffer
			// count overflow
			uartRxOverflow++;
 7e6:	80 91 82 07 	lds	r24, 0x0782	; 0x800782 <uartRxOverflow>
 7ea:	90 91 83 07 	lds	r25, 0x0783	; 0x800783 <uartRxOverflow+0x1>
 7ee:	01 96       	adiw	r24, 0x01	; 1
 7f0:	90 93 83 07 	sts	0x0783, r25	; 0x800783 <uartRxOverflow+0x1>
 7f4:	80 93 82 07 	sts	0x0782, r24	; 0x800782 <uartRxOverflow>
		}
	}
}
 7f8:	de cf       	rjmp	.-68     	; 0x7b6 <__vector_18+0x3e>

000007fa <__udivmodhi4>:
 7fa:	aa 1b       	sub	r26, r26
 7fc:	bb 1b       	sub	r27, r27
 7fe:	51 e1       	ldi	r21, 0x11	; 17
 800:	07 c0       	rjmp	.+14     	; 0x810 <__udivmodhi4_ep>

00000802 <__udivmodhi4_loop>:
 802:	aa 1f       	adc	r26, r26
 804:	bb 1f       	adc	r27, r27
 806:	a6 17       	cp	r26, r22
 808:	b7 07       	cpc	r27, r23
 80a:	10 f0       	brcs	.+4      	; 0x810 <__udivmodhi4_ep>
 80c:	a6 1b       	sub	r26, r22
 80e:	b7 0b       	sbc	r27, r23

00000810 <__udivmodhi4_ep>:
 810:	88 1f       	adc	r24, r24
 812:	99 1f       	adc	r25, r25
 814:	5a 95       	dec	r21
 816:	a9 f7       	brne	.-22     	; 0x802 <__udivmodhi4_loop>
 818:	80 95       	com	r24
 81a:	90 95       	com	r25
 81c:	bc 01       	movw	r22, r24
 81e:	cd 01       	movw	r24, r26
 820:	08 95       	ret

00000822 <atoi>:
 822:	fc 01       	movw	r30, r24
 824:	88 27       	eor	r24, r24
 826:	99 27       	eor	r25, r25
 828:	e8 94       	clt
 82a:	21 91       	ld	r18, Z+
 82c:	20 32       	cpi	r18, 0x20	; 32
 82e:	e9 f3       	breq	.-6      	; 0x82a <atoi+0x8>
 830:	29 30       	cpi	r18, 0x09	; 9
 832:	10 f0       	brcs	.+4      	; 0x838 <atoi+0x16>
 834:	2e 30       	cpi	r18, 0x0E	; 14
 836:	c8 f3       	brcs	.-14     	; 0x82a <atoi+0x8>
 838:	2b 32       	cpi	r18, 0x2B	; 43
 83a:	41 f0       	breq	.+16     	; 0x84c <atoi+0x2a>
 83c:	2d 32       	cpi	r18, 0x2D	; 45
 83e:	39 f4       	brne	.+14     	; 0x84e <atoi+0x2c>
 840:	68 94       	set
 842:	04 c0       	rjmp	.+8      	; 0x84c <atoi+0x2a>
 844:	0e 94 3d 04 	call	0x87a	; 0x87a <__mulhi_const_10>
 848:	82 0f       	add	r24, r18
 84a:	91 1d       	adc	r25, r1
 84c:	21 91       	ld	r18, Z+
 84e:	20 53       	subi	r18, 0x30	; 48
 850:	2a 30       	cpi	r18, 0x0A	; 10
 852:	c0 f3       	brcs	.-16     	; 0x844 <atoi+0x22>
 854:	1e f4       	brtc	.+6      	; 0x85c <atoi+0x3a>
 856:	90 95       	com	r25
 858:	81 95       	neg	r24
 85a:	9f 4f       	sbci	r25, 0xFF	; 255
 85c:	08 95       	ret

0000085e <memset>:
 85e:	dc 01       	movw	r26, r24
 860:	01 c0       	rjmp	.+2      	; 0x864 <memset+0x6>
 862:	6d 93       	st	X+, r22
 864:	41 50       	subi	r20, 0x01	; 1
 866:	50 40       	sbci	r21, 0x00	; 0
 868:	e0 f7       	brcc	.-8      	; 0x862 <memset+0x4>
 86a:	08 95       	ret

0000086c <strcpy>:
 86c:	fb 01       	movw	r30, r22
 86e:	dc 01       	movw	r26, r24
 870:	01 90       	ld	r0, Z+
 872:	0d 92       	st	X+, r0
 874:	00 20       	and	r0, r0
 876:	e1 f7       	brne	.-8      	; 0x870 <strcpy+0x4>
 878:	08 95       	ret

0000087a <__mulhi_const_10>:
 87a:	7a e0       	ldi	r23, 0x0A	; 10
 87c:	97 9f       	mul	r25, r23
 87e:	90 2d       	mov	r25, r0
 880:	87 9f       	mul	r24, r23
 882:	80 2d       	mov	r24, r0
 884:	91 0d       	add	r25, r1
 886:	11 24       	eor	r1, r1
 888:	08 95       	ret

0000088a <sprintf_P>:
 88a:	ae e0       	ldi	r26, 0x0E	; 14
 88c:	b0 e0       	ldi	r27, 0x00	; 0
 88e:	eb e4       	ldi	r30, 0x4B	; 75
 890:	f4 e0       	ldi	r31, 0x04	; 4
 892:	0c 94 1c 07 	jmp	0xe38	; 0xe38 <__prologue_saves__+0x1c>
 896:	0d 89       	ldd	r16, Y+21	; 0x15
 898:	1e 89       	ldd	r17, Y+22	; 0x16
 89a:	8e e0       	ldi	r24, 0x0E	; 14
 89c:	8c 83       	std	Y+4, r24	; 0x04
 89e:	1a 83       	std	Y+2, r17	; 0x02
 8a0:	09 83       	std	Y+1, r16	; 0x01
 8a2:	8f ef       	ldi	r24, 0xFF	; 255
 8a4:	9f e7       	ldi	r25, 0x7F	; 127
 8a6:	9e 83       	std	Y+6, r25	; 0x06
 8a8:	8d 83       	std	Y+5, r24	; 0x05
 8aa:	ae 01       	movw	r20, r28
 8ac:	47 5e       	subi	r20, 0xE7	; 231
 8ae:	5f 4f       	sbci	r21, 0xFF	; 255
 8b0:	6f 89       	ldd	r22, Y+23	; 0x17
 8b2:	78 8d       	ldd	r23, Y+24	; 0x18
 8b4:	ce 01       	movw	r24, r28
 8b6:	01 96       	adiw	r24, 0x01	; 1
 8b8:	0e 94 67 04 	call	0x8ce	; 0x8ce <vfprintf>
 8bc:	ef 81       	ldd	r30, Y+7	; 0x07
 8be:	f8 85       	ldd	r31, Y+8	; 0x08
 8c0:	e0 0f       	add	r30, r16
 8c2:	f1 1f       	adc	r31, r17
 8c4:	10 82       	st	Z, r1
 8c6:	2e 96       	adiw	r28, 0x0e	; 14
 8c8:	e4 e0       	ldi	r30, 0x04	; 4
 8ca:	0c 94 38 07 	jmp	0xe70	; 0xe70 <__epilogue_restores__+0x1c>

000008ce <vfprintf>:
 8ce:	ab e0       	ldi	r26, 0x0B	; 11
 8d0:	b0 e0       	ldi	r27, 0x00	; 0
 8d2:	ed e6       	ldi	r30, 0x6D	; 109
 8d4:	f4 e0       	ldi	r31, 0x04	; 4
 8d6:	0c 94 0e 07 	jmp	0xe1c	; 0xe1c <__prologue_saves__>
 8da:	6c 01       	movw	r12, r24
 8dc:	7b 01       	movw	r14, r22
 8de:	8a 01       	movw	r16, r20
 8e0:	fc 01       	movw	r30, r24
 8e2:	17 82       	std	Z+7, r1	; 0x07
 8e4:	16 82       	std	Z+6, r1	; 0x06
 8e6:	83 81       	ldd	r24, Z+3	; 0x03
 8e8:	81 ff       	sbrs	r24, 1
 8ea:	cc c1       	rjmp	.+920    	; 0xc84 <__stack+0x385>
 8ec:	ce 01       	movw	r24, r28
 8ee:	01 96       	adiw	r24, 0x01	; 1
 8f0:	3c 01       	movw	r6, r24
 8f2:	f6 01       	movw	r30, r12
 8f4:	93 81       	ldd	r25, Z+3	; 0x03
 8f6:	f7 01       	movw	r30, r14
 8f8:	93 fd       	sbrc	r25, 3
 8fa:	85 91       	lpm	r24, Z+
 8fc:	93 ff       	sbrs	r25, 3
 8fe:	81 91       	ld	r24, Z+
 900:	7f 01       	movw	r14, r30
 902:	88 23       	and	r24, r24
 904:	09 f4       	brne	.+2      	; 0x908 <__stack+0x9>
 906:	ba c1       	rjmp	.+884    	; 0xc7c <__stack+0x37d>
 908:	85 32       	cpi	r24, 0x25	; 37
 90a:	39 f4       	brne	.+14     	; 0x91a <__stack+0x1b>
 90c:	93 fd       	sbrc	r25, 3
 90e:	85 91       	lpm	r24, Z+
 910:	93 ff       	sbrs	r25, 3
 912:	81 91       	ld	r24, Z+
 914:	7f 01       	movw	r14, r30
 916:	85 32       	cpi	r24, 0x25	; 37
 918:	29 f4       	brne	.+10     	; 0x924 <__stack+0x25>
 91a:	b6 01       	movw	r22, r12
 91c:	90 e0       	ldi	r25, 0x00	; 0
 91e:	0e 94 5e 06 	call	0xcbc	; 0xcbc <fputc>
 922:	e7 cf       	rjmp	.-50     	; 0x8f2 <vfprintf+0x24>
 924:	91 2c       	mov	r9, r1
 926:	21 2c       	mov	r2, r1
 928:	31 2c       	mov	r3, r1
 92a:	ff e1       	ldi	r31, 0x1F	; 31
 92c:	f3 15       	cp	r31, r3
 92e:	d8 f0       	brcs	.+54     	; 0x966 <__stack+0x67>
 930:	8b 32       	cpi	r24, 0x2B	; 43
 932:	79 f0       	breq	.+30     	; 0x952 <__stack+0x53>
 934:	38 f4       	brcc	.+14     	; 0x944 <__stack+0x45>
 936:	80 32       	cpi	r24, 0x20	; 32
 938:	79 f0       	breq	.+30     	; 0x958 <__stack+0x59>
 93a:	83 32       	cpi	r24, 0x23	; 35
 93c:	a1 f4       	brne	.+40     	; 0x966 <__stack+0x67>
 93e:	23 2d       	mov	r18, r3
 940:	20 61       	ori	r18, 0x10	; 16
 942:	1d c0       	rjmp	.+58     	; 0x97e <__stack+0x7f>
 944:	8d 32       	cpi	r24, 0x2D	; 45
 946:	61 f0       	breq	.+24     	; 0x960 <__stack+0x61>
 948:	80 33       	cpi	r24, 0x30	; 48
 94a:	69 f4       	brne	.+26     	; 0x966 <__stack+0x67>
 94c:	23 2d       	mov	r18, r3
 94e:	21 60       	ori	r18, 0x01	; 1
 950:	16 c0       	rjmp	.+44     	; 0x97e <__stack+0x7f>
 952:	83 2d       	mov	r24, r3
 954:	82 60       	ori	r24, 0x02	; 2
 956:	38 2e       	mov	r3, r24
 958:	e3 2d       	mov	r30, r3
 95a:	e4 60       	ori	r30, 0x04	; 4
 95c:	3e 2e       	mov	r3, r30
 95e:	2a c0       	rjmp	.+84     	; 0x9b4 <__stack+0xb5>
 960:	f3 2d       	mov	r31, r3
 962:	f8 60       	ori	r31, 0x08	; 8
 964:	1d c0       	rjmp	.+58     	; 0x9a0 <__stack+0xa1>
 966:	37 fc       	sbrc	r3, 7
 968:	2d c0       	rjmp	.+90     	; 0x9c4 <__stack+0xc5>
 96a:	20 ed       	ldi	r18, 0xD0	; 208
 96c:	28 0f       	add	r18, r24
 96e:	2a 30       	cpi	r18, 0x0A	; 10
 970:	40 f0       	brcs	.+16     	; 0x982 <__stack+0x83>
 972:	8e 32       	cpi	r24, 0x2E	; 46
 974:	b9 f4       	brne	.+46     	; 0x9a4 <__stack+0xa5>
 976:	36 fc       	sbrc	r3, 6
 978:	81 c1       	rjmp	.+770    	; 0xc7c <__stack+0x37d>
 97a:	23 2d       	mov	r18, r3
 97c:	20 64       	ori	r18, 0x40	; 64
 97e:	32 2e       	mov	r3, r18
 980:	19 c0       	rjmp	.+50     	; 0x9b4 <__stack+0xb5>
 982:	36 fe       	sbrs	r3, 6
 984:	06 c0       	rjmp	.+12     	; 0x992 <__stack+0x93>
 986:	8a e0       	ldi	r24, 0x0A	; 10
 988:	98 9e       	mul	r9, r24
 98a:	20 0d       	add	r18, r0
 98c:	11 24       	eor	r1, r1
 98e:	92 2e       	mov	r9, r18
 990:	11 c0       	rjmp	.+34     	; 0x9b4 <__stack+0xb5>
 992:	ea e0       	ldi	r30, 0x0A	; 10
 994:	2e 9e       	mul	r2, r30
 996:	20 0d       	add	r18, r0
 998:	11 24       	eor	r1, r1
 99a:	22 2e       	mov	r2, r18
 99c:	f3 2d       	mov	r31, r3
 99e:	f0 62       	ori	r31, 0x20	; 32
 9a0:	3f 2e       	mov	r3, r31
 9a2:	08 c0       	rjmp	.+16     	; 0x9b4 <__stack+0xb5>
 9a4:	8c 36       	cpi	r24, 0x6C	; 108
 9a6:	21 f4       	brne	.+8      	; 0x9b0 <__stack+0xb1>
 9a8:	83 2d       	mov	r24, r3
 9aa:	80 68       	ori	r24, 0x80	; 128
 9ac:	38 2e       	mov	r3, r24
 9ae:	02 c0       	rjmp	.+4      	; 0x9b4 <__stack+0xb5>
 9b0:	88 36       	cpi	r24, 0x68	; 104
 9b2:	41 f4       	brne	.+16     	; 0x9c4 <__stack+0xc5>
 9b4:	f7 01       	movw	r30, r14
 9b6:	93 fd       	sbrc	r25, 3
 9b8:	85 91       	lpm	r24, Z+
 9ba:	93 ff       	sbrs	r25, 3
 9bc:	81 91       	ld	r24, Z+
 9be:	7f 01       	movw	r14, r30
 9c0:	81 11       	cpse	r24, r1
 9c2:	b3 cf       	rjmp	.-154    	; 0x92a <__stack+0x2b>
 9c4:	98 2f       	mov	r25, r24
 9c6:	9f 7d       	andi	r25, 0xDF	; 223
 9c8:	95 54       	subi	r25, 0x45	; 69
 9ca:	93 30       	cpi	r25, 0x03	; 3
 9cc:	28 f4       	brcc	.+10     	; 0x9d8 <__stack+0xd9>
 9ce:	0c 5f       	subi	r16, 0xFC	; 252
 9d0:	1f 4f       	sbci	r17, 0xFF	; 255
 9d2:	9f e3       	ldi	r25, 0x3F	; 63
 9d4:	99 83       	std	Y+1, r25	; 0x01
 9d6:	0d c0       	rjmp	.+26     	; 0x9f2 <__stack+0xf3>
 9d8:	83 36       	cpi	r24, 0x63	; 99
 9da:	31 f0       	breq	.+12     	; 0x9e8 <__stack+0xe9>
 9dc:	83 37       	cpi	r24, 0x73	; 115
 9de:	71 f0       	breq	.+28     	; 0x9fc <__stack+0xfd>
 9e0:	83 35       	cpi	r24, 0x53	; 83
 9e2:	09 f0       	breq	.+2      	; 0x9e6 <__stack+0xe7>
 9e4:	59 c0       	rjmp	.+178    	; 0xa98 <__stack+0x199>
 9e6:	21 c0       	rjmp	.+66     	; 0xa2a <__stack+0x12b>
 9e8:	f8 01       	movw	r30, r16
 9ea:	80 81       	ld	r24, Z
 9ec:	89 83       	std	Y+1, r24	; 0x01
 9ee:	0e 5f       	subi	r16, 0xFE	; 254
 9f0:	1f 4f       	sbci	r17, 0xFF	; 255
 9f2:	88 24       	eor	r8, r8
 9f4:	83 94       	inc	r8
 9f6:	91 2c       	mov	r9, r1
 9f8:	53 01       	movw	r10, r6
 9fa:	13 c0       	rjmp	.+38     	; 0xa22 <__stack+0x123>
 9fc:	28 01       	movw	r4, r16
 9fe:	f2 e0       	ldi	r31, 0x02	; 2
 a00:	4f 0e       	add	r4, r31
 a02:	51 1c       	adc	r5, r1
 a04:	f8 01       	movw	r30, r16
 a06:	a0 80       	ld	r10, Z
 a08:	b1 80       	ldd	r11, Z+1	; 0x01
 a0a:	36 fe       	sbrs	r3, 6
 a0c:	03 c0       	rjmp	.+6      	; 0xa14 <__stack+0x115>
 a0e:	69 2d       	mov	r22, r9
 a10:	70 e0       	ldi	r23, 0x00	; 0
 a12:	02 c0       	rjmp	.+4      	; 0xa18 <__stack+0x119>
 a14:	6f ef       	ldi	r22, 0xFF	; 255
 a16:	7f ef       	ldi	r23, 0xFF	; 255
 a18:	c5 01       	movw	r24, r10
 a1a:	0e 94 53 06 	call	0xca6	; 0xca6 <strnlen>
 a1e:	4c 01       	movw	r8, r24
 a20:	82 01       	movw	r16, r4
 a22:	f3 2d       	mov	r31, r3
 a24:	ff 77       	andi	r31, 0x7F	; 127
 a26:	3f 2e       	mov	r3, r31
 a28:	16 c0       	rjmp	.+44     	; 0xa56 <__stack+0x157>
 a2a:	28 01       	movw	r4, r16
 a2c:	22 e0       	ldi	r18, 0x02	; 2
 a2e:	42 0e       	add	r4, r18
 a30:	51 1c       	adc	r5, r1
 a32:	f8 01       	movw	r30, r16
 a34:	a0 80       	ld	r10, Z
 a36:	b1 80       	ldd	r11, Z+1	; 0x01
 a38:	36 fe       	sbrs	r3, 6
 a3a:	03 c0       	rjmp	.+6      	; 0xa42 <__stack+0x143>
 a3c:	69 2d       	mov	r22, r9
 a3e:	70 e0       	ldi	r23, 0x00	; 0
 a40:	02 c0       	rjmp	.+4      	; 0xa46 <__stack+0x147>
 a42:	6f ef       	ldi	r22, 0xFF	; 255
 a44:	7f ef       	ldi	r23, 0xFF	; 255
 a46:	c5 01       	movw	r24, r10
 a48:	0e 94 48 06 	call	0xc90	; 0xc90 <strnlen_P>
 a4c:	4c 01       	movw	r8, r24
 a4e:	f3 2d       	mov	r31, r3
 a50:	f0 68       	ori	r31, 0x80	; 128
 a52:	3f 2e       	mov	r3, r31
 a54:	82 01       	movw	r16, r4
 a56:	33 fc       	sbrc	r3, 3
 a58:	1b c0       	rjmp	.+54     	; 0xa90 <__stack+0x191>
 a5a:	82 2d       	mov	r24, r2
 a5c:	90 e0       	ldi	r25, 0x00	; 0
 a5e:	88 16       	cp	r8, r24
 a60:	99 06       	cpc	r9, r25
 a62:	b0 f4       	brcc	.+44     	; 0xa90 <__stack+0x191>
 a64:	b6 01       	movw	r22, r12
 a66:	80 e2       	ldi	r24, 0x20	; 32
 a68:	90 e0       	ldi	r25, 0x00	; 0
 a6a:	0e 94 5e 06 	call	0xcbc	; 0xcbc <fputc>
 a6e:	2a 94       	dec	r2
 a70:	f4 cf       	rjmp	.-24     	; 0xa5a <__stack+0x15b>
 a72:	f5 01       	movw	r30, r10
 a74:	37 fc       	sbrc	r3, 7
 a76:	85 91       	lpm	r24, Z+
 a78:	37 fe       	sbrs	r3, 7
 a7a:	81 91       	ld	r24, Z+
 a7c:	5f 01       	movw	r10, r30
 a7e:	b6 01       	movw	r22, r12
 a80:	90 e0       	ldi	r25, 0x00	; 0
 a82:	0e 94 5e 06 	call	0xcbc	; 0xcbc <fputc>
 a86:	21 10       	cpse	r2, r1
 a88:	2a 94       	dec	r2
 a8a:	21 e0       	ldi	r18, 0x01	; 1
 a8c:	82 1a       	sub	r8, r18
 a8e:	91 08       	sbc	r9, r1
 a90:	81 14       	cp	r8, r1
 a92:	91 04       	cpc	r9, r1
 a94:	71 f7       	brne	.-36     	; 0xa72 <__stack+0x173>
 a96:	e8 c0       	rjmp	.+464    	; 0xc68 <__stack+0x369>
 a98:	84 36       	cpi	r24, 0x64	; 100
 a9a:	11 f0       	breq	.+4      	; 0xaa0 <__stack+0x1a1>
 a9c:	89 36       	cpi	r24, 0x69	; 105
 a9e:	41 f5       	brne	.+80     	; 0xaf0 <__stack+0x1f1>
 aa0:	f8 01       	movw	r30, r16
 aa2:	37 fe       	sbrs	r3, 7
 aa4:	07 c0       	rjmp	.+14     	; 0xab4 <__stack+0x1b5>
 aa6:	60 81       	ld	r22, Z
 aa8:	71 81       	ldd	r23, Z+1	; 0x01
 aaa:	82 81       	ldd	r24, Z+2	; 0x02
 aac:	93 81       	ldd	r25, Z+3	; 0x03
 aae:	0c 5f       	subi	r16, 0xFC	; 252
 ab0:	1f 4f       	sbci	r17, 0xFF	; 255
 ab2:	08 c0       	rjmp	.+16     	; 0xac4 <__stack+0x1c5>
 ab4:	60 81       	ld	r22, Z
 ab6:	71 81       	ldd	r23, Z+1	; 0x01
 ab8:	07 2e       	mov	r0, r23
 aba:	00 0c       	add	r0, r0
 abc:	88 0b       	sbc	r24, r24
 abe:	99 0b       	sbc	r25, r25
 ac0:	0e 5f       	subi	r16, 0xFE	; 254
 ac2:	1f 4f       	sbci	r17, 0xFF	; 255
 ac4:	f3 2d       	mov	r31, r3
 ac6:	ff 76       	andi	r31, 0x6F	; 111
 ac8:	3f 2e       	mov	r3, r31
 aca:	97 ff       	sbrs	r25, 7
 acc:	09 c0       	rjmp	.+18     	; 0xae0 <__stack+0x1e1>
 ace:	90 95       	com	r25
 ad0:	80 95       	com	r24
 ad2:	70 95       	com	r23
 ad4:	61 95       	neg	r22
 ad6:	7f 4f       	sbci	r23, 0xFF	; 255
 ad8:	8f 4f       	sbci	r24, 0xFF	; 255
 ada:	9f 4f       	sbci	r25, 0xFF	; 255
 adc:	f0 68       	ori	r31, 0x80	; 128
 ade:	3f 2e       	mov	r3, r31
 ae0:	2a e0       	ldi	r18, 0x0A	; 10
 ae2:	30 e0       	ldi	r19, 0x00	; 0
 ae4:	a3 01       	movw	r20, r6
 ae6:	0e 94 9a 06 	call	0xd34	; 0xd34 <__ultoa_invert>
 aea:	88 2e       	mov	r8, r24
 aec:	86 18       	sub	r8, r6
 aee:	45 c0       	rjmp	.+138    	; 0xb7a <__stack+0x27b>
 af0:	85 37       	cpi	r24, 0x75	; 117
 af2:	31 f4       	brne	.+12     	; 0xb00 <__stack+0x201>
 af4:	23 2d       	mov	r18, r3
 af6:	2f 7e       	andi	r18, 0xEF	; 239
 af8:	b2 2e       	mov	r11, r18
 afa:	2a e0       	ldi	r18, 0x0A	; 10
 afc:	30 e0       	ldi	r19, 0x00	; 0
 afe:	25 c0       	rjmp	.+74     	; 0xb4a <__stack+0x24b>
 b00:	93 2d       	mov	r25, r3
 b02:	99 7f       	andi	r25, 0xF9	; 249
 b04:	b9 2e       	mov	r11, r25
 b06:	8f 36       	cpi	r24, 0x6F	; 111
 b08:	c1 f0       	breq	.+48     	; 0xb3a <__stack+0x23b>
 b0a:	18 f4       	brcc	.+6      	; 0xb12 <__stack+0x213>
 b0c:	88 35       	cpi	r24, 0x58	; 88
 b0e:	79 f0       	breq	.+30     	; 0xb2e <__stack+0x22f>
 b10:	b5 c0       	rjmp	.+362    	; 0xc7c <__stack+0x37d>
 b12:	80 37       	cpi	r24, 0x70	; 112
 b14:	19 f0       	breq	.+6      	; 0xb1c <__stack+0x21d>
 b16:	88 37       	cpi	r24, 0x78	; 120
 b18:	21 f0       	breq	.+8      	; 0xb22 <__stack+0x223>
 b1a:	b0 c0       	rjmp	.+352    	; 0xc7c <__stack+0x37d>
 b1c:	e9 2f       	mov	r30, r25
 b1e:	e0 61       	ori	r30, 0x10	; 16
 b20:	be 2e       	mov	r11, r30
 b22:	b4 fe       	sbrs	r11, 4
 b24:	0d c0       	rjmp	.+26     	; 0xb40 <__stack+0x241>
 b26:	fb 2d       	mov	r31, r11
 b28:	f4 60       	ori	r31, 0x04	; 4
 b2a:	bf 2e       	mov	r11, r31
 b2c:	09 c0       	rjmp	.+18     	; 0xb40 <__stack+0x241>
 b2e:	34 fe       	sbrs	r3, 4
 b30:	0a c0       	rjmp	.+20     	; 0xb46 <__stack+0x247>
 b32:	29 2f       	mov	r18, r25
 b34:	26 60       	ori	r18, 0x06	; 6
 b36:	b2 2e       	mov	r11, r18
 b38:	06 c0       	rjmp	.+12     	; 0xb46 <__stack+0x247>
 b3a:	28 e0       	ldi	r18, 0x08	; 8
 b3c:	30 e0       	ldi	r19, 0x00	; 0
 b3e:	05 c0       	rjmp	.+10     	; 0xb4a <__stack+0x24b>
 b40:	20 e1       	ldi	r18, 0x10	; 16
 b42:	30 e0       	ldi	r19, 0x00	; 0
 b44:	02 c0       	rjmp	.+4      	; 0xb4a <__stack+0x24b>
 b46:	20 e1       	ldi	r18, 0x10	; 16
 b48:	32 e0       	ldi	r19, 0x02	; 2
 b4a:	f8 01       	movw	r30, r16
 b4c:	b7 fe       	sbrs	r11, 7
 b4e:	07 c0       	rjmp	.+14     	; 0xb5e <__stack+0x25f>
 b50:	60 81       	ld	r22, Z
 b52:	71 81       	ldd	r23, Z+1	; 0x01
 b54:	82 81       	ldd	r24, Z+2	; 0x02
 b56:	93 81       	ldd	r25, Z+3	; 0x03
 b58:	0c 5f       	subi	r16, 0xFC	; 252
 b5a:	1f 4f       	sbci	r17, 0xFF	; 255
 b5c:	06 c0       	rjmp	.+12     	; 0xb6a <__stack+0x26b>
 b5e:	60 81       	ld	r22, Z
 b60:	71 81       	ldd	r23, Z+1	; 0x01
 b62:	80 e0       	ldi	r24, 0x00	; 0
 b64:	90 e0       	ldi	r25, 0x00	; 0
 b66:	0e 5f       	subi	r16, 0xFE	; 254
 b68:	1f 4f       	sbci	r17, 0xFF	; 255
 b6a:	a3 01       	movw	r20, r6
 b6c:	0e 94 9a 06 	call	0xd34	; 0xd34 <__ultoa_invert>
 b70:	88 2e       	mov	r8, r24
 b72:	86 18       	sub	r8, r6
 b74:	fb 2d       	mov	r31, r11
 b76:	ff 77       	andi	r31, 0x7F	; 127
 b78:	3f 2e       	mov	r3, r31
 b7a:	36 fe       	sbrs	r3, 6
 b7c:	0d c0       	rjmp	.+26     	; 0xb98 <__stack+0x299>
 b7e:	23 2d       	mov	r18, r3
 b80:	2e 7f       	andi	r18, 0xFE	; 254
 b82:	a2 2e       	mov	r10, r18
 b84:	89 14       	cp	r8, r9
 b86:	58 f4       	brcc	.+22     	; 0xb9e <__stack+0x29f>
 b88:	34 fe       	sbrs	r3, 4
 b8a:	0b c0       	rjmp	.+22     	; 0xba2 <__stack+0x2a3>
 b8c:	32 fc       	sbrc	r3, 2
 b8e:	09 c0       	rjmp	.+18     	; 0xba2 <__stack+0x2a3>
 b90:	83 2d       	mov	r24, r3
 b92:	8e 7e       	andi	r24, 0xEE	; 238
 b94:	a8 2e       	mov	r10, r24
 b96:	05 c0       	rjmp	.+10     	; 0xba2 <__stack+0x2a3>
 b98:	b8 2c       	mov	r11, r8
 b9a:	a3 2c       	mov	r10, r3
 b9c:	03 c0       	rjmp	.+6      	; 0xba4 <__stack+0x2a5>
 b9e:	b8 2c       	mov	r11, r8
 ba0:	01 c0       	rjmp	.+2      	; 0xba4 <__stack+0x2a5>
 ba2:	b9 2c       	mov	r11, r9
 ba4:	a4 fe       	sbrs	r10, 4
 ba6:	0f c0       	rjmp	.+30     	; 0xbc6 <__stack+0x2c7>
 ba8:	fe 01       	movw	r30, r28
 baa:	e8 0d       	add	r30, r8
 bac:	f1 1d       	adc	r31, r1
 bae:	80 81       	ld	r24, Z
 bb0:	80 33       	cpi	r24, 0x30	; 48
 bb2:	21 f4       	brne	.+8      	; 0xbbc <__stack+0x2bd>
 bb4:	9a 2d       	mov	r25, r10
 bb6:	99 7e       	andi	r25, 0xE9	; 233
 bb8:	a9 2e       	mov	r10, r25
 bba:	09 c0       	rjmp	.+18     	; 0xbce <__stack+0x2cf>
 bbc:	a2 fe       	sbrs	r10, 2
 bbe:	06 c0       	rjmp	.+12     	; 0xbcc <__stack+0x2cd>
 bc0:	b3 94       	inc	r11
 bc2:	b3 94       	inc	r11
 bc4:	04 c0       	rjmp	.+8      	; 0xbce <__stack+0x2cf>
 bc6:	8a 2d       	mov	r24, r10
 bc8:	86 78       	andi	r24, 0x86	; 134
 bca:	09 f0       	breq	.+2      	; 0xbce <__stack+0x2cf>
 bcc:	b3 94       	inc	r11
 bce:	a3 fc       	sbrc	r10, 3
 bd0:	11 c0       	rjmp	.+34     	; 0xbf4 <__stack+0x2f5>
 bd2:	a0 fe       	sbrs	r10, 0
 bd4:	06 c0       	rjmp	.+12     	; 0xbe2 <__stack+0x2e3>
 bd6:	b2 14       	cp	r11, r2
 bd8:	88 f4       	brcc	.+34     	; 0xbfc <__stack+0x2fd>
 bda:	28 0c       	add	r2, r8
 bdc:	92 2c       	mov	r9, r2
 bde:	9b 18       	sub	r9, r11
 be0:	0e c0       	rjmp	.+28     	; 0xbfe <__stack+0x2ff>
 be2:	b2 14       	cp	r11, r2
 be4:	60 f4       	brcc	.+24     	; 0xbfe <__stack+0x2ff>
 be6:	b6 01       	movw	r22, r12
 be8:	80 e2       	ldi	r24, 0x20	; 32
 bea:	90 e0       	ldi	r25, 0x00	; 0
 bec:	0e 94 5e 06 	call	0xcbc	; 0xcbc <fputc>
 bf0:	b3 94       	inc	r11
 bf2:	f7 cf       	rjmp	.-18     	; 0xbe2 <__stack+0x2e3>
 bf4:	b2 14       	cp	r11, r2
 bf6:	18 f4       	brcc	.+6      	; 0xbfe <__stack+0x2ff>
 bf8:	2b 18       	sub	r2, r11
 bfa:	02 c0       	rjmp	.+4      	; 0xc00 <__stack+0x301>
 bfc:	98 2c       	mov	r9, r8
 bfe:	21 2c       	mov	r2, r1
 c00:	a4 fe       	sbrs	r10, 4
 c02:	10 c0       	rjmp	.+32     	; 0xc24 <__stack+0x325>
 c04:	b6 01       	movw	r22, r12
 c06:	80 e3       	ldi	r24, 0x30	; 48
 c08:	90 e0       	ldi	r25, 0x00	; 0
 c0a:	0e 94 5e 06 	call	0xcbc	; 0xcbc <fputc>
 c0e:	a2 fe       	sbrs	r10, 2
 c10:	17 c0       	rjmp	.+46     	; 0xc40 <__stack+0x341>
 c12:	a1 fc       	sbrc	r10, 1
 c14:	03 c0       	rjmp	.+6      	; 0xc1c <__stack+0x31d>
 c16:	88 e7       	ldi	r24, 0x78	; 120
 c18:	90 e0       	ldi	r25, 0x00	; 0
 c1a:	02 c0       	rjmp	.+4      	; 0xc20 <__stack+0x321>
 c1c:	88 e5       	ldi	r24, 0x58	; 88
 c1e:	90 e0       	ldi	r25, 0x00	; 0
 c20:	b6 01       	movw	r22, r12
 c22:	0c c0       	rjmp	.+24     	; 0xc3c <__stack+0x33d>
 c24:	8a 2d       	mov	r24, r10
 c26:	86 78       	andi	r24, 0x86	; 134
 c28:	59 f0       	breq	.+22     	; 0xc40 <__stack+0x341>
 c2a:	a1 fe       	sbrs	r10, 1
 c2c:	02 c0       	rjmp	.+4      	; 0xc32 <__stack+0x333>
 c2e:	8b e2       	ldi	r24, 0x2B	; 43
 c30:	01 c0       	rjmp	.+2      	; 0xc34 <__stack+0x335>
 c32:	80 e2       	ldi	r24, 0x20	; 32
 c34:	a7 fc       	sbrc	r10, 7
 c36:	8d e2       	ldi	r24, 0x2D	; 45
 c38:	b6 01       	movw	r22, r12
 c3a:	90 e0       	ldi	r25, 0x00	; 0
 c3c:	0e 94 5e 06 	call	0xcbc	; 0xcbc <fputc>
 c40:	89 14       	cp	r8, r9
 c42:	38 f4       	brcc	.+14     	; 0xc52 <__stack+0x353>
 c44:	b6 01       	movw	r22, r12
 c46:	80 e3       	ldi	r24, 0x30	; 48
 c48:	90 e0       	ldi	r25, 0x00	; 0
 c4a:	0e 94 5e 06 	call	0xcbc	; 0xcbc <fputc>
 c4e:	9a 94       	dec	r9
 c50:	f7 cf       	rjmp	.-18     	; 0xc40 <__stack+0x341>
 c52:	8a 94       	dec	r8
 c54:	f3 01       	movw	r30, r6
 c56:	e8 0d       	add	r30, r8
 c58:	f1 1d       	adc	r31, r1
 c5a:	80 81       	ld	r24, Z
 c5c:	b6 01       	movw	r22, r12
 c5e:	90 e0       	ldi	r25, 0x00	; 0
 c60:	0e 94 5e 06 	call	0xcbc	; 0xcbc <fputc>
 c64:	81 10       	cpse	r8, r1
 c66:	f5 cf       	rjmp	.-22     	; 0xc52 <__stack+0x353>
 c68:	22 20       	and	r2, r2
 c6a:	09 f4       	brne	.+2      	; 0xc6e <__stack+0x36f>
 c6c:	42 ce       	rjmp	.-892    	; 0x8f2 <vfprintf+0x24>
 c6e:	b6 01       	movw	r22, r12
 c70:	80 e2       	ldi	r24, 0x20	; 32
 c72:	90 e0       	ldi	r25, 0x00	; 0
 c74:	0e 94 5e 06 	call	0xcbc	; 0xcbc <fputc>
 c78:	2a 94       	dec	r2
 c7a:	f6 cf       	rjmp	.-20     	; 0xc68 <__stack+0x369>
 c7c:	f6 01       	movw	r30, r12
 c7e:	86 81       	ldd	r24, Z+6	; 0x06
 c80:	97 81       	ldd	r25, Z+7	; 0x07
 c82:	02 c0       	rjmp	.+4      	; 0xc88 <__stack+0x389>
 c84:	8f ef       	ldi	r24, 0xFF	; 255
 c86:	9f ef       	ldi	r25, 0xFF	; 255
 c88:	2b 96       	adiw	r28, 0x0b	; 11
 c8a:	e2 e1       	ldi	r30, 0x12	; 18
 c8c:	0c 94 2a 07 	jmp	0xe54	; 0xe54 <__epilogue_restores__>

00000c90 <strnlen_P>:
 c90:	fc 01       	movw	r30, r24
 c92:	05 90       	lpm	r0, Z+
 c94:	61 50       	subi	r22, 0x01	; 1
 c96:	70 40       	sbci	r23, 0x00	; 0
 c98:	01 10       	cpse	r0, r1
 c9a:	d8 f7       	brcc	.-10     	; 0xc92 <strnlen_P+0x2>
 c9c:	80 95       	com	r24
 c9e:	90 95       	com	r25
 ca0:	8e 0f       	add	r24, r30
 ca2:	9f 1f       	adc	r25, r31
 ca4:	08 95       	ret

00000ca6 <strnlen>:
 ca6:	fc 01       	movw	r30, r24
 ca8:	61 50       	subi	r22, 0x01	; 1
 caa:	70 40       	sbci	r23, 0x00	; 0
 cac:	01 90       	ld	r0, Z+
 cae:	01 10       	cpse	r0, r1
 cb0:	d8 f7       	brcc	.-10     	; 0xca8 <strnlen+0x2>
 cb2:	80 95       	com	r24
 cb4:	90 95       	com	r25
 cb6:	8e 0f       	add	r24, r30
 cb8:	9f 1f       	adc	r25, r31
 cba:	08 95       	ret

00000cbc <fputc>:
 cbc:	0f 93       	push	r16
 cbe:	1f 93       	push	r17
 cc0:	cf 93       	push	r28
 cc2:	df 93       	push	r29
 cc4:	fb 01       	movw	r30, r22
 cc6:	23 81       	ldd	r18, Z+3	; 0x03
 cc8:	21 fd       	sbrc	r18, 1
 cca:	03 c0       	rjmp	.+6      	; 0xcd2 <fputc+0x16>
 ccc:	8f ef       	ldi	r24, 0xFF	; 255
 cce:	9f ef       	ldi	r25, 0xFF	; 255
 cd0:	2c c0       	rjmp	.+88     	; 0xd2a <fputc+0x6e>
 cd2:	22 ff       	sbrs	r18, 2
 cd4:	16 c0       	rjmp	.+44     	; 0xd02 <fputc+0x46>
 cd6:	46 81       	ldd	r20, Z+6	; 0x06
 cd8:	57 81       	ldd	r21, Z+7	; 0x07
 cda:	24 81       	ldd	r18, Z+4	; 0x04
 cdc:	35 81       	ldd	r19, Z+5	; 0x05
 cde:	42 17       	cp	r20, r18
 ce0:	53 07       	cpc	r21, r19
 ce2:	44 f4       	brge	.+16     	; 0xcf4 <fputc+0x38>
 ce4:	a0 81       	ld	r26, Z
 ce6:	b1 81       	ldd	r27, Z+1	; 0x01
 ce8:	9d 01       	movw	r18, r26
 cea:	2f 5f       	subi	r18, 0xFF	; 255
 cec:	3f 4f       	sbci	r19, 0xFF	; 255
 cee:	31 83       	std	Z+1, r19	; 0x01
 cf0:	20 83       	st	Z, r18
 cf2:	8c 93       	st	X, r24
 cf4:	26 81       	ldd	r18, Z+6	; 0x06
 cf6:	37 81       	ldd	r19, Z+7	; 0x07
 cf8:	2f 5f       	subi	r18, 0xFF	; 255
 cfa:	3f 4f       	sbci	r19, 0xFF	; 255
 cfc:	37 83       	std	Z+7, r19	; 0x07
 cfe:	26 83       	std	Z+6, r18	; 0x06
 d00:	14 c0       	rjmp	.+40     	; 0xd2a <fputc+0x6e>
 d02:	8b 01       	movw	r16, r22
 d04:	ec 01       	movw	r28, r24
 d06:	fb 01       	movw	r30, r22
 d08:	00 84       	ldd	r0, Z+8	; 0x08
 d0a:	f1 85       	ldd	r31, Z+9	; 0x09
 d0c:	e0 2d       	mov	r30, r0
 d0e:	09 95       	icall
 d10:	89 2b       	or	r24, r25
 d12:	e1 f6       	brne	.-72     	; 0xccc <fputc+0x10>
 d14:	d8 01       	movw	r26, r16
 d16:	16 96       	adiw	r26, 0x06	; 6
 d18:	8d 91       	ld	r24, X+
 d1a:	9c 91       	ld	r25, X
 d1c:	17 97       	sbiw	r26, 0x07	; 7
 d1e:	01 96       	adiw	r24, 0x01	; 1
 d20:	17 96       	adiw	r26, 0x07	; 7
 d22:	9c 93       	st	X, r25
 d24:	8e 93       	st	-X, r24
 d26:	16 97       	sbiw	r26, 0x06	; 6
 d28:	ce 01       	movw	r24, r28
 d2a:	df 91       	pop	r29
 d2c:	cf 91       	pop	r28
 d2e:	1f 91       	pop	r17
 d30:	0f 91       	pop	r16
 d32:	08 95       	ret

00000d34 <__ultoa_invert>:
 d34:	fa 01       	movw	r30, r20
 d36:	aa 27       	eor	r26, r26
 d38:	28 30       	cpi	r18, 0x08	; 8
 d3a:	51 f1       	breq	.+84     	; 0xd90 <__ultoa_invert+0x5c>
 d3c:	20 31       	cpi	r18, 0x10	; 16
 d3e:	81 f1       	breq	.+96     	; 0xda0 <__ultoa_invert+0x6c>
 d40:	e8 94       	clt
 d42:	6f 93       	push	r22
 d44:	6e 7f       	andi	r22, 0xFE	; 254
 d46:	6e 5f       	subi	r22, 0xFE	; 254
 d48:	7f 4f       	sbci	r23, 0xFF	; 255
 d4a:	8f 4f       	sbci	r24, 0xFF	; 255
 d4c:	9f 4f       	sbci	r25, 0xFF	; 255
 d4e:	af 4f       	sbci	r26, 0xFF	; 255
 d50:	b1 e0       	ldi	r27, 0x01	; 1
 d52:	3e d0       	rcall	.+124    	; 0xdd0 <__ultoa_invert+0x9c>
 d54:	b4 e0       	ldi	r27, 0x04	; 4
 d56:	3c d0       	rcall	.+120    	; 0xdd0 <__ultoa_invert+0x9c>
 d58:	67 0f       	add	r22, r23
 d5a:	78 1f       	adc	r23, r24
 d5c:	89 1f       	adc	r24, r25
 d5e:	9a 1f       	adc	r25, r26
 d60:	a1 1d       	adc	r26, r1
 d62:	68 0f       	add	r22, r24
 d64:	79 1f       	adc	r23, r25
 d66:	8a 1f       	adc	r24, r26
 d68:	91 1d       	adc	r25, r1
 d6a:	a1 1d       	adc	r26, r1
 d6c:	6a 0f       	add	r22, r26
 d6e:	71 1d       	adc	r23, r1
 d70:	81 1d       	adc	r24, r1
 d72:	91 1d       	adc	r25, r1
 d74:	a1 1d       	adc	r26, r1
 d76:	20 d0       	rcall	.+64     	; 0xdb8 <__ultoa_invert+0x84>
 d78:	09 f4       	brne	.+2      	; 0xd7c <__ultoa_invert+0x48>
 d7a:	68 94       	set
 d7c:	3f 91       	pop	r19
 d7e:	2a e0       	ldi	r18, 0x0A	; 10
 d80:	26 9f       	mul	r18, r22
 d82:	11 24       	eor	r1, r1
 d84:	30 19       	sub	r19, r0
 d86:	30 5d       	subi	r19, 0xD0	; 208
 d88:	31 93       	st	Z+, r19
 d8a:	de f6       	brtc	.-74     	; 0xd42 <__ultoa_invert+0xe>
 d8c:	cf 01       	movw	r24, r30
 d8e:	08 95       	ret
 d90:	46 2f       	mov	r20, r22
 d92:	47 70       	andi	r20, 0x07	; 7
 d94:	40 5d       	subi	r20, 0xD0	; 208
 d96:	41 93       	st	Z+, r20
 d98:	b3 e0       	ldi	r27, 0x03	; 3
 d9a:	0f d0       	rcall	.+30     	; 0xdba <__ultoa_invert+0x86>
 d9c:	c9 f7       	brne	.-14     	; 0xd90 <__ultoa_invert+0x5c>
 d9e:	f6 cf       	rjmp	.-20     	; 0xd8c <__ultoa_invert+0x58>
 da0:	46 2f       	mov	r20, r22
 da2:	4f 70       	andi	r20, 0x0F	; 15
 da4:	40 5d       	subi	r20, 0xD0	; 208
 da6:	4a 33       	cpi	r20, 0x3A	; 58
 da8:	18 f0       	brcs	.+6      	; 0xdb0 <__ultoa_invert+0x7c>
 daa:	49 5d       	subi	r20, 0xD9	; 217
 dac:	31 fd       	sbrc	r19, 1
 dae:	40 52       	subi	r20, 0x20	; 32
 db0:	41 93       	st	Z+, r20
 db2:	02 d0       	rcall	.+4      	; 0xdb8 <__ultoa_invert+0x84>
 db4:	a9 f7       	brne	.-22     	; 0xda0 <__ultoa_invert+0x6c>
 db6:	ea cf       	rjmp	.-44     	; 0xd8c <__ultoa_invert+0x58>
 db8:	b4 e0       	ldi	r27, 0x04	; 4
 dba:	a6 95       	lsr	r26
 dbc:	97 95       	ror	r25
 dbe:	87 95       	ror	r24
 dc0:	77 95       	ror	r23
 dc2:	67 95       	ror	r22
 dc4:	ba 95       	dec	r27
 dc6:	c9 f7       	brne	.-14     	; 0xdba <__ultoa_invert+0x86>
 dc8:	00 97       	sbiw	r24, 0x00	; 0
 dca:	61 05       	cpc	r22, r1
 dcc:	71 05       	cpc	r23, r1
 dce:	08 95       	ret
 dd0:	9b 01       	movw	r18, r22
 dd2:	ac 01       	movw	r20, r24
 dd4:	0a 2e       	mov	r0, r26
 dd6:	06 94       	lsr	r0
 dd8:	57 95       	ror	r21
 dda:	47 95       	ror	r20
 ddc:	37 95       	ror	r19
 dde:	27 95       	ror	r18
 de0:	ba 95       	dec	r27
 de2:	c9 f7       	brne	.-14     	; 0xdd6 <__ultoa_invert+0xa2>
 de4:	62 0f       	add	r22, r18
 de6:	73 1f       	adc	r23, r19
 de8:	84 1f       	adc	r24, r20
 dea:	95 1f       	adc	r25, r21
 dec:	a0 1d       	adc	r26, r0
 dee:	08 95       	ret

00000df0 <eeprom_read_byte>:
 df0:	f9 99       	sbic	0x1f, 1	; 31
 df2:	fe cf       	rjmp	.-4      	; 0xdf0 <eeprom_read_byte>
 df4:	92 bd       	out	0x22, r25	; 34
 df6:	81 bd       	out	0x21, r24	; 33
 df8:	f8 9a       	sbi	0x1f, 0	; 31
 dfa:	99 27       	eor	r25, r25
 dfc:	80 b5       	in	r24, 0x20	; 32
 dfe:	08 95       	ret

00000e00 <eeprom_write_byte>:
 e00:	26 2f       	mov	r18, r22

00000e02 <eeprom_write_r18>:
 e02:	f9 99       	sbic	0x1f, 1	; 31
 e04:	fe cf       	rjmp	.-4      	; 0xe02 <eeprom_write_r18>
 e06:	1f ba       	out	0x1f, r1	; 31
 e08:	92 bd       	out	0x22, r25	; 34
 e0a:	81 bd       	out	0x21, r24	; 33
 e0c:	20 bd       	out	0x20, r18	; 32
 e0e:	0f b6       	in	r0, 0x3f	; 63
 e10:	f8 94       	cli
 e12:	fa 9a       	sbi	0x1f, 2	; 31
 e14:	f9 9a       	sbi	0x1f, 1	; 31
 e16:	0f be       	out	0x3f, r0	; 63
 e18:	01 96       	adiw	r24, 0x01	; 1
 e1a:	08 95       	ret

00000e1c <__prologue_saves__>:
 e1c:	2f 92       	push	r2
 e1e:	3f 92       	push	r3
 e20:	4f 92       	push	r4
 e22:	5f 92       	push	r5
 e24:	6f 92       	push	r6
 e26:	7f 92       	push	r7
 e28:	8f 92       	push	r8
 e2a:	9f 92       	push	r9
 e2c:	af 92       	push	r10
 e2e:	bf 92       	push	r11
 e30:	cf 92       	push	r12
 e32:	df 92       	push	r13
 e34:	ef 92       	push	r14
 e36:	ff 92       	push	r15
 e38:	0f 93       	push	r16
 e3a:	1f 93       	push	r17
 e3c:	cf 93       	push	r28
 e3e:	df 93       	push	r29
 e40:	cd b7       	in	r28, 0x3d	; 61
 e42:	de b7       	in	r29, 0x3e	; 62
 e44:	ca 1b       	sub	r28, r26
 e46:	db 0b       	sbc	r29, r27
 e48:	0f b6       	in	r0, 0x3f	; 63
 e4a:	f8 94       	cli
 e4c:	de bf       	out	0x3e, r29	; 62
 e4e:	0f be       	out	0x3f, r0	; 63
 e50:	cd bf       	out	0x3d, r28	; 61
 e52:	09 94       	ijmp

00000e54 <__epilogue_restores__>:
 e54:	2a 88       	ldd	r2, Y+18	; 0x12
 e56:	39 88       	ldd	r3, Y+17	; 0x11
 e58:	48 88       	ldd	r4, Y+16	; 0x10
 e5a:	5f 84       	ldd	r5, Y+15	; 0x0f
 e5c:	6e 84       	ldd	r6, Y+14	; 0x0e
 e5e:	7d 84       	ldd	r7, Y+13	; 0x0d
 e60:	8c 84       	ldd	r8, Y+12	; 0x0c
 e62:	9b 84       	ldd	r9, Y+11	; 0x0b
 e64:	aa 84       	ldd	r10, Y+10	; 0x0a
 e66:	b9 84       	ldd	r11, Y+9	; 0x09
 e68:	c8 84       	ldd	r12, Y+8	; 0x08
 e6a:	df 80       	ldd	r13, Y+7	; 0x07
 e6c:	ee 80       	ldd	r14, Y+6	; 0x06
 e6e:	fd 80       	ldd	r15, Y+5	; 0x05
 e70:	0c 81       	ldd	r16, Y+4	; 0x04
 e72:	1b 81       	ldd	r17, Y+3	; 0x03
 e74:	aa 81       	ldd	r26, Y+2	; 0x02
 e76:	b9 81       	ldd	r27, Y+1	; 0x01
 e78:	ce 0f       	add	r28, r30
 e7a:	d1 1d       	adc	r29, r1
 e7c:	0f b6       	in	r0, 0x3f	; 63
 e7e:	f8 94       	cli
 e80:	de bf       	out	0x3e, r29	; 62
 e82:	0f be       	out	0x3f, r0	; 63
 e84:	cd bf       	out	0x3d, r28	; 61
 e86:	ed 01       	movw	r28, r26
 e88:	08 95       	ret

00000e8a <_exit>:
 e8a:	f8 94       	cli

00000e8c <__stop_program>:
 e8c:	ff cf       	rjmp	.-2      	; 0xe8c <__stop_program>
