
LEDSTR1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000f06  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e92  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000684  00800100  00800100  00000f06  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000f06  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f64  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e8  00000000  00000000  00000fa8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000229a  00000000  00000000  00001190  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ec1  00000000  00000000  0000342a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000018d7  00000000  00000000  000042eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000458  00000000  00000000  00005bc4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00009a05  00000000  00000000  0000601c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001676  00000000  00000000  0000fa21  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000200  00000000  00000000  00011097  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000399e  00000000  00000000  00011297  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 bf 03 	jmp	0x77e	; 0x77e <__vector_18>
  4c:	0c 94 5b 03 	jmp	0x6b6	; 0x6b6 <__vector_19>
  50:	0c 94 65 03 	jmp	0x6ca	; 0x6ca <__vector_20>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	6b 24       	eor	r6, r11
	...

0000006b <__c.2584>:
  6b:	65 72 72 2d 63 6d 64 24 00                          err-cmd$.

00000074 <__c.2581>:
  74:	65 72 72 2d 67 65 74 6e 6f 70 72 6f 70 24 00        err-getnoprop$.

00000083 <__c.2578>:
  83:	67 25 73 24 00                                      g%s$.

00000088 <__c.2573>:
  88:	67 25 64 24 00                                      g%d$.

0000008d <__c.2563>:
  8d:	65 72 72 2d 62 61 64 61 64 64 72 24 00              err-badaddr$.

0000009a <__c.2553>:
  9a:	74 65 73 74 69 6e 67 20 25 64 24 00                 testing %d$.

000000a6 <__ctors_end>:
  a6:	11 24       	eor	r1, r1
  a8:	1f be       	out	0x3f, r1	; 63
  aa:	cf ef       	ldi	r28, 0xFF	; 255
  ac:	d8 e0       	ldi	r29, 0x08	; 8
  ae:	de bf       	out	0x3e, r29	; 62
  b0:	cd bf       	out	0x3d, r28	; 61

000000b2 <__do_clear_bss>:
  b2:	27 e0       	ldi	r18, 0x07	; 7
  b4:	a0 e0       	ldi	r26, 0x00	; 0
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a4 38       	cpi	r26, 0x84	; 132
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	0e 94 a5 02 	call	0x54a	; 0x54a <main>
  c6:	0c 94 47 07 	jmp	0xe8e	; 0xe8e <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <bufferInit>:
	// begin critical section
	CRITICAL_SECTION_START;
	// flush contents of the buffer
	buffer->datalength = 0;
	// end critical section
	CRITICAL_SECTION_END;
  ce:	fc 01       	movw	r30, r24
  d0:	8f b7       	in	r24, 0x3f	; 63
  d2:	f8 94       	cli
  d4:	71 83       	std	Z+1, r23	; 0x01
  d6:	60 83       	st	Z, r22
  d8:	53 83       	std	Z+3, r21	; 0x03
  da:	42 83       	std	Z+2, r20	; 0x02
  dc:	17 82       	std	Z+7, r1	; 0x07
  de:	16 82       	std	Z+6, r1	; 0x06
  e0:	15 82       	std	Z+5, r1	; 0x05
  e2:	14 82       	std	Z+4, r1	; 0x04
  e4:	8f bf       	out	0x3f, r24	; 63
  e6:	08 95       	ret

000000e8 <bufferAddToEnd>:
  e8:	fc 01       	movw	r30, r24
  ea:	36 2f       	mov	r19, r22
  ec:	2f b7       	in	r18, 0x3f	; 63
  ee:	f8 94       	cli
  f0:	84 81       	ldd	r24, Z+4	; 0x04
  f2:	95 81       	ldd	r25, Z+5	; 0x05
  f4:	62 81       	ldd	r22, Z+2	; 0x02
  f6:	73 81       	ldd	r23, Z+3	; 0x03
  f8:	86 17       	cp	r24, r22
  fa:	97 07       	cpc	r25, r23
  fc:	18 f0       	brcs	.+6      	; 0x104 <bufferAddToEnd+0x1c>
  fe:	2f bf       	out	0x3f, r18	; 63
 100:	8f ef       	ldi	r24, 0xFF	; 255
 102:	08 95       	ret
 104:	46 81       	ldd	r20, Z+6	; 0x06
 106:	57 81       	ldd	r21, Z+7	; 0x07
 108:	84 0f       	add	r24, r20
 10a:	95 1f       	adc	r25, r21
 10c:	0e 94 ff 03 	call	0x7fe	; 0x7fe <__udivmodhi4>
 110:	a0 81       	ld	r26, Z
 112:	b1 81       	ldd	r27, Z+1	; 0x01
 114:	a8 0f       	add	r26, r24
 116:	b9 1f       	adc	r27, r25
 118:	3c 93       	st	X, r19
 11a:	84 81       	ldd	r24, Z+4	; 0x04
 11c:	95 81       	ldd	r25, Z+5	; 0x05
 11e:	01 96       	adiw	r24, 0x01	; 1
 120:	95 83       	std	Z+5, r25	; 0x05
 122:	84 83       	std	Z+4, r24	; 0x04
 124:	2f bf       	out	0x3f, r18	; 63
 126:	80 e0       	ldi	r24, 0x00	; 0
 128:	08 95       	ret

0000012a <bufferClear>:
}

void bufferClear(cBuffer* buffer, unsigned short size) {
 12a:	ab 01       	movw	r20, r22
  // begin critical section
  CRITICAL_SECTION_START;
 12c:	2f b7       	in	r18, 0x3f	; 63
 12e:	f8 94       	cli
  // flush contents of the buffer
  buffer->datalength = 0;
 130:	fc 01       	movw	r30, r24
 132:	15 82       	std	Z+5, r1	; 0x05
 134:	14 82       	std	Z+4, r1	; 0x04
  // end critical section
  CRITICAL_SECTION_END;
 136:	2f bf       	out	0x3f, r18	; 63
  memset(buffer->dataptr,0,size);
 138:	60 e0       	ldi	r22, 0x00	; 0
 13a:	70 e0       	ldi	r23, 0x00	; 0
 13c:	80 81       	ld	r24, Z
 13e:	91 81       	ldd	r25, Z+1	; 0x01
 140:	0c 94 31 04 	jmp	0x862	; 0x862 <memset>

00000144 <myUartRx>:
  if (inAddr == CMD_UART_GLOBAL_CMD_ADDR) {
    // disable MPCM mode, start looking for data bytes
    return TRUE;
  }
  return FALSE;
}
 144:	cf 93       	push	r28
 146:	df 93       	push	r29
 148:	c8 2f       	mov	r28, r24
 14a:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <rxAddrNext>
 14e:	81 11       	cpse	r24, r1
 150:	16 c0       	rjmp	.+44     	; 0x17e <myUartRx+0x3a>
 152:	c1 32       	cpi	r28, 0x21	; 33
 154:	09 f4       	brne	.+2      	; 0x158 <myUartRx+0x14>
 156:	3f c0       	rjmp	.+126    	; 0x1d6 <myUartRx+0x92>
 158:	c4 32       	cpi	r28, 0x24	; 36
 15a:	51 f4       	brne	.+20     	; 0x170 <myUartRx+0x2c>
 15c:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <rxAddressed>
 160:	88 23       	and	r24, r24
 162:	31 f0       	breq	.+12     	; 0x170 <myUartRx+0x2c>
 164:	8f ef       	ldi	r24, 0xFF	; 255
 166:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <rxCompleteFlag>
 16a:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <rxAddressed>
 16e:	5d 98       	cbi	0x0b, 5	; 11
 170:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <rxAddressed>
 174:	81 11       	cpse	r24, r1
 176:	1e c0       	rjmp	.+60     	; 0x1b4 <myUartRx+0x70>
 178:	df 91       	pop	r29
 17a:	cf 91       	pop	r28
 17c:	08 95       	ret
 17e:	10 92 c7 01 	sts	0x01C7, r1	; 0x8001c7 <rxAddrNext>
 182:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <myAddress>
 186:	c8 17       	cp	r28, r24
 188:	51 f0       	breq	.+20     	; 0x19e <myUartRx+0x5a>
 18a:	c1 11       	cpse	r28, r1
 18c:	f5 cf       	rjmp	.-22     	; 0x178 <myUartRx+0x34>
 18e:	8f ef       	ldi	r24, 0xFF	; 255
 190:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <rxAddrGlobal>
 194:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <rxAddressed>
 198:	df 91       	pop	r29
 19a:	cf 91       	pop	r28
 19c:	08 95       	ret
 19e:	5d 9a       	sbi	0x0b, 5	; 11
 1a0:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <rxCommandProcessing>
 1a4:	81 11       	cpse	r24, r1
 1a6:	1f c0       	rjmp	.+62     	; 0x1e6 <myUartRx+0xa2>
 1a8:	8f ef       	ldi	r24, 0xFF	; 255
 1aa:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <rxAddressed>
 1ae:	cc 23       	and	r28, r28
 1b0:	71 f3       	breq	.-36     	; 0x18e <myUartRx+0x4a>
 1b2:	e2 cf       	rjmp	.-60     	; 0x178 <myUartRx+0x34>
 1b4:	6c 2f       	mov	r22, r28
 1b6:	8f e6       	ldi	r24, 0x6F	; 111
 1b8:	97 e0       	ldi	r25, 0x07	; 7
 1ba:	0e 94 74 00 	call	0xe8	; 0xe8 <bufferAddToEnd>
 1be:	81 11       	cpse	r24, r1
 1c0:	db cf       	rjmp	.-74     	; 0x178 <myUartRx+0x34>
 1c2:	80 91 82 07 	lds	r24, 0x0782	; 0x800782 <uartRxOverflow>
 1c6:	90 91 83 07 	lds	r25, 0x0783	; 0x800783 <uartRxOverflow+0x1>
 1ca:	01 96       	adiw	r24, 0x01	; 1
 1cc:	90 93 83 07 	sts	0x0783, r25	; 0x800783 <uartRxOverflow+0x1>
 1d0:	80 93 82 07 	sts	0x0782, r24	; 0x800782 <uartRxOverflow>
 1d4:	d1 cf       	rjmp	.-94     	; 0x178 <myUartRx+0x34>
 1d6:	8f ef       	ldi	r24, 0xFF	; 255
 1d8:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <rxAddrNext>
 1dc:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <rxAddressed>
 1e0:	88 23       	and	r24, r24
 1e2:	51 f2       	breq	.-108    	; 0x178 <myUartRx+0x34>
 1e4:	e7 cf       	rjmp	.-50     	; 0x1b4 <myUartRx+0x70>
 1e6:	df ef       	ldi	r29, 0xFF	; 255
 1e8:	d0 93 c5 01 	sts	0x01C5, r29	; 0x8001c5 <rxCommandOverloaded>
 1ec:	60 e4       	ldi	r22, 0x40	; 64
 1ee:	70 e0       	ldi	r23, 0x00	; 0
 1f0:	8f e6       	ldi	r24, 0x6F	; 111
 1f2:	97 e0       	ldi	r25, 0x07	; 7
 1f4:	0e 94 95 00 	call	0x12a	; 0x12a <bufferClear>
 1f8:	d0 93 82 01 	sts	0x0182, r29	; 0x800182 <rxAddressed>
 1fc:	c6 cf       	rjmp	.-116    	; 0x18a <myUartRx+0x46>

000001fe <initCmdHandler>:
 1fe:	10 92 c8 01 	sts	0x01C8, r1	; 0x8001c8 <rxCompleteFlag>
 202:	10 92 c7 01 	sts	0x01C7, r1	; 0x8001c7 <rxAddrNext>
 206:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <rxAddressed>
 20a:	10 92 c9 01 	sts	0x01C9, r1	; 0x8001c9 <rxAddrGlobal>
 20e:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <rxCommandOverloaded>
 212:	82 ea       	ldi	r24, 0xA2	; 162
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	0c 94 0f 03 	jmp	0x61e	; 0x61e <uartSetRxHandler>

0000021a <initCommandProtocolAddr>:
 21a:	cf 93       	push	r28
 21c:	c8 2f       	mov	r28, r24
 21e:	80 e0       	ldi	r24, 0x00	; 0
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <eeprom_read_byte>
 226:	81 11       	cpse	r24, r1
 228:	13 c0       	rjmp	.+38     	; 0x250 <initCommandProtocolAddr+0x36>
 22a:	c1 11       	cpse	r28, r1
 22c:	09 c0       	rjmp	.+18     	; 0x240 <initCommandProtocolAddr+0x26>
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <myAddress>
 234:	61 e0       	ldi	r22, 0x01	; 1
 236:	80 e0       	ldi	r24, 0x00	; 0
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	cf 91       	pop	r28
 23c:	0c 94 02 07 	jmp	0xe04	; 0xe04 <eeprom_write_byte>
 240:	c0 93 c6 01 	sts	0x01C6, r28	; 0x8001c6 <myAddress>
 244:	6c 2f       	mov	r22, r28
 246:	80 e0       	ldi	r24, 0x00	; 0
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	cf 91       	pop	r28
 24c:	0c 94 02 07 	jmp	0xe04	; 0xe04 <eeprom_write_byte>
 250:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <myAddress>
 254:	cf 91       	pop	r28
 256:	08 95       	ret

00000258 <getCommandProtocolAddr>:
 258:	80 e0       	ldi	r24, 0x00	; 0
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	0c 94 fa 06 	jmp	0xdf4	; 0xdf4 <eeprom_read_byte>

00000260 <setCommandProtocolAddr>:
 260:	81 11       	cpse	r24, r1
 262:	02 c0       	rjmp	.+4      	; 0x268 <setCommandProtocolAddr+0x8>
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	08 95       	ret
 268:	68 2f       	mov	r22, r24
 26a:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <myAddress>
 26e:	80 e0       	ldi	r24, 0x00	; 0
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	0e 94 02 07 	call	0xe04	; 0xe04 <eeprom_write_byte>
 276:	80 e0       	ldi	r24, 0x00	; 0
 278:	08 95       	ret

0000027a <sendMsg>:
/************************************************************************
 * sendMsg:
 * 
 * Routine is inline to avoid extra function calls in ISR
 ************************************************************************/
void sendMsg(void) {
 27a:	cf 93       	push	r28
 27c:	df 93       	push	r29
  if (rxAddrGlobal) {
 27e:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <rxAddrGlobal>
 282:	81 11       	cpse	r24, r1
 284:	15 c0       	rjmp	.+42     	; 0x2b0 <sendMsg+0x36>
    memset(sprintbuf, 0, sizeof(sprintbuf));
    return; // don't send messages for global cmd
  }
  uartSendBuffer(sprintbuf,strlen(sprintbuf));
 286:	ca ec       	ldi	r28, 0xCA	; 202
 288:	d1 e0       	ldi	r29, 0x01	; 1
 28a:	fe 01       	movw	r30, r28
 28c:	01 90       	ld	r0, Z+
 28e:	00 20       	and	r0, r0
 290:	e9 f7       	brne	.-6      	; 0x28c <sendMsg+0x12>
 292:	31 97       	sbiw	r30, 0x01	; 1
 294:	bf 01       	movw	r22, r30
 296:	6a 5c       	subi	r22, 0xCA	; 202
 298:	71 40       	sbci	r23, 0x01	; 1
 29a:	ce 01       	movw	r24, r28
 29c:	0e 94 17 03 	call	0x62e	; 0x62e <uartSendBuffer>
  memset(sprintbuf, 0, sizeof(sprintbuf));
 2a0:	80 e5       	ldi	r24, 0x50	; 80
 2a2:	fe 01       	movw	r30, r28
 2a4:	11 92       	st	Z+, r1
 2a6:	8a 95       	dec	r24
 2a8:	e9 f7       	brne	.-6      	; 0x2a4 <sendMsg+0x2a>
}
 2aa:	df 91       	pop	r29
 2ac:	cf 91       	pop	r28
 2ae:	08 95       	ret
 * 
 * Routine is inline to avoid extra function calls in ISR
 ************************************************************************/
void sendMsg(void) {
  if (rxAddrGlobal) {
    memset(sprintbuf, 0, sizeof(sprintbuf));
 2b0:	80 e5       	ldi	r24, 0x50	; 80
 2b2:	ea ec       	ldi	r30, 0xCA	; 202
 2b4:	f1 e0       	ldi	r31, 0x01	; 1
 2b6:	df 01       	movw	r26, r30
 2b8:	1d 92       	st	X+, r1
 2ba:	8a 95       	dec	r24
 2bc:	e9 f7       	brne	.-6      	; 0x2b8 <sendMsg+0x3e>
    return; // don't send messages for global cmd
  }
  uartSendBuffer(sprintbuf,strlen(sprintbuf));
  memset(sprintbuf, 0, sizeof(sprintbuf));
}
 2be:	df 91       	pop	r29
 2c0:	cf 91       	pop	r28
 2c2:	08 95       	ret

000002c4 <beginCmdProcessing>:
 * Set up state to process a command.
 *
 * args? [data] [crc code] ?
 ************************************************************************/
void beginCmdProcessing(void) {
  rxCommandProcessing = TRUE; // cmd interpretation in progress
 2c4:	8f ef       	ldi	r24, 0xFF	; 255
 2c6:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <rxCommandProcessing>
  rxCompleteFlag = FALSE;
 2ca:	10 92 c8 01 	sts	0x01C8, r1	; 0x8001c8 <rxCompleteFlag>
 2ce:	08 95       	ret

000002d0 <endCmdProcessing>:
/************************************************************************
 * Set up state after done processing a command.
 *
 * args? [data] [crc code] ?
 ************************************************************************/
void endCmdProcessing(void) {
 2d0:	cf 93       	push	r28
 2d2:	df 93       	push	r29
  bufferClear(&uartRxBuffer,UART_RX_BUFFER_SIZE); // clear to get another cmd, so send response.
 2d4:	60 e4       	ldi	r22, 0x40	; 64
 2d6:	70 e0       	ldi	r23, 0x00	; 0
 2d8:	8f e6       	ldi	r24, 0x6F	; 111
 2da:	97 e0       	ldi	r25, 0x07	; 7
 2dc:	0e 94 95 00 	call	0x12a	; 0x12a <bufferClear>
  if (!customResponse) { // always send a "k" if we're not sending something else.
 2e0:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <customResponse>
 2e4:	88 23       	and	r24, r24
 2e6:	49 f0       	breq	.+18     	; 0x2fa <endCmdProcessing+0x2a>
    sprintf_P(sprintbuf,PSTR("k$"));
    sendMsg();
  }
  customResponse = FALSE; // reset state
 2e8:	10 92 83 01 	sts	0x0183, r1	; 0x800183 <customResponse>
  rxAddrGlobal = FALSE; // reset address state. this was saved to mute responses on global cmds.
 2ec:	10 92 c9 01 	sts	0x01C9, r1	; 0x8001c9 <rxAddrGlobal>
  rxCommandProcessing = FALSE; // command interpretation and response done
 2f0:	10 92 1a 02 	sts	0x021A, r1	; 0x80021a <rxCommandProcessing>
}
 2f4:	df 91       	pop	r29
 2f6:	cf 91       	pop	r28
 2f8:	08 95       	ret
 * args? [data] [crc code] ?
 ************************************************************************/
void endCmdProcessing(void) {
  bufferClear(&uartRxBuffer,UART_RX_BUFFER_SIZE); // clear to get another cmd, so send response.
  if (!customResponse) { // always send a "k" if we're not sending something else.
    sprintf_P(sprintbuf,PSTR("k$"));
 2fa:	88 e6       	ldi	r24, 0x68	; 104
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	9f 93       	push	r25
 300:	8f 93       	push	r24
 302:	ca ec       	ldi	r28, 0xCA	; 202
 304:	d1 e0       	ldi	r29, 0x01	; 1
 306:	df 93       	push	r29
 308:	cf 93       	push	r28
 30a:	0e 94 47 04 	call	0x88e	; 0x88e <sprintf_P>
 * sendMsg:
 * 
 * Routine is inline to avoid extra function calls in ISR
 ************************************************************************/
void sendMsg(void) {
  if (rxAddrGlobal) {
 30e:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <rxAddrGlobal>
 312:	0f 90       	pop	r0
 314:	0f 90       	pop	r0
 316:	0f 90       	pop	r0
 318:	0f 90       	pop	r0
 31a:	81 11       	cpse	r24, r1
 31c:	0c c0       	rjmp	.+24     	; 0x336 <endCmdProcessing+0x66>
    memset(sprintbuf, 0, sizeof(sprintbuf));
    return; // don't send messages for global cmd
  }
  uartSendBuffer(sprintbuf,strlen(sprintbuf));
 31e:	fe 01       	movw	r30, r28
 320:	01 90       	ld	r0, Z+
 322:	00 20       	and	r0, r0
 324:	e9 f7       	brne	.-6      	; 0x320 <endCmdProcessing+0x50>
 326:	31 97       	sbiw	r30, 0x01	; 1
 328:	bf 01       	movw	r22, r30
 32a:	6a 5c       	subi	r22, 0xCA	; 202
 32c:	71 40       	sbci	r23, 0x01	; 1
 32e:	8a ec       	ldi	r24, 0xCA	; 202
 330:	91 e0       	ldi	r25, 0x01	; 1
 332:	0e 94 17 03 	call	0x62e	; 0x62e <uartSendBuffer>
  memset(sprintbuf, 0, sizeof(sprintbuf));
 336:	80 e5       	ldi	r24, 0x50	; 80
 338:	fe 01       	movw	r30, r28
 33a:	11 92       	st	Z+, r1
 33c:	8a 95       	dec	r24
 33e:	e9 f7       	brne	.-6      	; 0x33a <endCmdProcessing+0x6a>
 340:	d3 cf       	rjmp	.-90     	; 0x2e8 <endCmdProcessing+0x18>

00000342 <pointToNextNonNumericChar>:
 *
 * Modify the pointer passed in to point to next non-numeric char.
 * We need the argument passed by address so we can modify the
 * caller's storage.
 *********************************************************************/
void pointToNextNonNumericChar(unsigned char **ppRxDataStr) {
 342:	dc 01       	movw	r26, r24
 /* Count the digits. Numbers are 0x30 < n < 0x39 */
  while((**ppRxDataStr >= 0x30) & (**ppRxDataStr <= 0x39)) {
 344:	ed 91       	ld	r30, X+
 346:	fc 91       	ld	r31, X
 348:	11 97       	sbiw	r26, 0x01	; 1
 34a:	80 81       	ld	r24, Z
 34c:	80 53       	subi	r24, 0x30	; 48
 34e:	8a 30       	cpi	r24, 0x0A	; 10
 350:	68 f4       	brcc	.+26     	; 0x36c <pointToNextNonNumericChar+0x2a>
 352:	9f 01       	movw	r18, r30
 354:	2f 5f       	subi	r18, 0xFF	; 255
 356:	3f 4f       	sbci	r19, 0xFF	; 255
    (*ppRxDataStr)++;
 358:	f9 01       	movw	r30, r18
 35a:	11 96       	adiw	r26, 0x01	; 1
 35c:	3c 93       	st	X, r19
 35e:	2e 93       	st	-X, r18
 * We need the argument passed by address so we can modify the
 * caller's storage.
 *********************************************************************/
void pointToNextNonNumericChar(unsigned char **ppRxDataStr) {
 /* Count the digits. Numbers are 0x30 < n < 0x39 */
  while((**ppRxDataStr >= 0x30) & (**ppRxDataStr <= 0x39)) {
 360:	90 81       	ld	r25, Z
 362:	2f 5f       	subi	r18, 0xFF	; 255
 364:	3f 4f       	sbci	r19, 0xFF	; 255
 366:	90 53       	subi	r25, 0x30	; 48
 368:	9a 30       	cpi	r25, 0x0A	; 10
 36a:	b0 f3       	brcs	.-20     	; 0x358 <pointToNextNonNumericChar+0x16>
 36c:	08 95       	ret

0000036e <processCmd>:
 * unless this unit is stuck and does not respond within the specified 
 * response timeout time, 5ms.
 *
 * After successful command processing, send an ack message back to master.
 *********************************************************************/
void processCmd() {
 36e:	2f 92       	push	r2
 370:	3f 92       	push	r3
 372:	4f 92       	push	r4
 374:	5f 92       	push	r5
 376:	6f 92       	push	r6
 378:	7f 92       	push	r7
 37a:	8f 92       	push	r8
 37c:	9f 92       	push	r9
 37e:	af 92       	push	r10
 380:	bf 92       	push	r11
 382:	cf 92       	push	r12
 384:	df 92       	push	r13
 386:	ef 92       	push	r14
 388:	ff 92       	push	r15
 38a:	0f 93       	push	r16
 38c:	1f 93       	push	r17
 38e:	cf 93       	push	r28
 390:	df 93       	push	r29
 392:	00 d0       	rcall	.+0      	; 0x394 <processCmd+0x26>
 394:	cd b7       	in	r28, 0x3d	; 61
 396:	de b7       	in	r29, 0x3e	; 62
  u08 rc; // return code from handler funcs
  // get a pointer to the data portion of RX buffer
  cBuffer* myRxBufferPtr;
  char * myRxBufferDataPtr;
  myRxBufferPtr = uartGetRxBuffer();
 398:	0e 94 14 03 	call	0x628	; 0x628 <uartGetRxBuffer>
 39c:	fc 01       	movw	r30, r24
  myRxBufferDataPtr = myRxBufferPtr->dataptr;
 39e:	90 81       	ld	r25, Z
 3a0:	81 81       	ldd	r24, Z+1	; 0x01
 3a2:	99 83       	std	Y+1, r25	; 0x01
 3a4:	8a 83       	std	Y+2, r24	; 0x02
  
  while (*myRxBufferDataPtr) { // do until we are at the null term (end of cmd)
 3a6:	e9 2f       	mov	r30, r25
 3a8:	f8 2f       	mov	r31, r24
    switch(*myRxBufferDataPtr++) { // get a char and then increment ptr
      // SET Address
      case 'a':
        rc = setCommandProtocolAddr(atoi((char *)myRxBufferDataPtr));
        if (rc) {
          customResponse = TRUE;
 3aa:	33 24       	eor	r3, r3
 3ac:	3a 94       	dec	r3
          sprintf_P(sprintbuf,PSTR("err-badaddr$"));
 3ae:	8a ec       	ldi	r24, 0xCA	; 202
 3b0:	e8 2e       	mov	r14, r24
 3b2:	81 e0       	ldi	r24, 0x01	; 1
 3b4:	f8 2e       	mov	r15, r24
        }
        break; // end 'g' command
        
      default:
        customResponse = TRUE;
        sprintf_P(sprintbuf, PSTR("err-cmd$"));
 3b6:	9b e6       	ldi	r25, 0x6B	; 107
 3b8:	c9 2e       	mov	r12, r25
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	d9 2e       	mov	r13, r25
            rxAddrGlobal = FALSE;
            sendMsg();
            break;
          
          case 'b': case 'B':
            sprintf_P(sprintbuf, PSTR("g%s$"), getVolatileString());
 3be:	26 e4       	ldi	r18, 0x46	; 70
 3c0:	82 2e       	mov	r8, r18
 3c2:	27 e0       	ldi	r18, 0x07	; 7
 3c4:	92 2e       	mov	r9, r18
 3c6:	33 e8       	ldi	r19, 0x83	; 131
 3c8:	a3 2e       	mov	r10, r19
 3ca:	30 e0       	ldi	r19, 0x00	; 0
 3cc:	b3 2e       	mov	r11, r19
            sendMsg();
            break;
            
          default:
            sprintf_P(sprintbuf,PSTR("err-getnoprop$"));
 3ce:	44 e7       	ldi	r20, 0x74	; 116
 3d0:	64 2e       	mov	r6, r20
 3d2:	40 e0       	ldi	r20, 0x00	; 0
 3d4:	74 2e       	mov	r7, r20
        // Indicate to cmd protocol that we are sending a custom ack
        customResponse = TRUE;
        // select sub-command
        switch(*myRxBufferDataPtr++) {
          case 'a': case 'A':
            sprintf_P(sprintbuf, PSTR("g%d$"), getCommandProtocolAddr());
 3d6:	58 e8       	ldi	r21, 0x88	; 136
 3d8:	45 2e       	mov	r4, r21
 3da:	50 e0       	ldi	r21, 0x00	; 0
 3dc:	55 2e       	mov	r5, r21
  cBuffer* myRxBufferPtr;
  char * myRxBufferDataPtr;
  myRxBufferPtr = uartGetRxBuffer();
  myRxBufferDataPtr = myRxBufferPtr->dataptr;
  
  while (*myRxBufferDataPtr) { // do until we are at the null term (end of cmd)
 3de:	80 81       	ld	r24, Z
 3e0:	88 23       	and	r24, r24
 3e2:	91 f1       	breq	.+100    	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
    switch(*myRxBufferDataPtr++) { // get a char and then increment ptr
 3e4:	9f 01       	movw	r18, r30
 3e6:	2f 5f       	subi	r18, 0xFF	; 255
 3e8:	3f 4f       	sbci	r19, 0xFF	; 255
 3ea:	3a 83       	std	Y+2, r19	; 0x02
 3ec:	29 83       	std	Y+1, r18	; 0x01
 3ee:	90 81       	ld	r25, Z
 3f0:	91 36       	cpi	r25, 0x61	; 97
 3f2:	09 f4       	brne	.+2      	; 0x3f6 <processCmd+0x88>
 3f4:	75 c0       	rjmp	.+234    	; 0x4e0 <__LOCK_REGION_LENGTH__+0xe0>
 3f6:	0c f0       	brlt	.+2      	; 0x3fa <processCmd+0x8c>
 3f8:	4d c0       	rjmp	.+154    	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
 3fa:	92 34       	cpi	r25, 0x42	; 66
 3fc:	09 f4       	brne	.+2      	; 0x400 <__LOCK_REGION_LENGTH__>
 3fe:	5c c0       	rjmp	.+184    	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
 400:	97 34       	cpi	r25, 0x47	; 71
 402:	09 f0       	breq	.+2      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 404:	4c c0       	rjmp	.+152    	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
        break; // End 'b' command
       
      // Get info
      case 'g': case 'G':
        // Indicate to cmd protocol that we are sending a custom ack
        customResponse = TRUE;
 406:	30 92 83 01 	sts	0x0183, r3	; 0x800183 <customResponse>
        // select sub-command
        switch(*myRxBufferDataPtr++) {
 40a:	cf 01       	movw	r24, r30
 40c:	02 96       	adiw	r24, 0x02	; 2
 40e:	9a 83       	std	Y+2, r25	; 0x02
 410:	89 83       	std	Y+1, r24	; 0x01
 412:	81 81       	ldd	r24, Z+1	; 0x01
 414:	82 34       	cpi	r24, 0x42	; 66
 416:	69 f1       	breq	.+90     	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
 418:	0c f4       	brge	.+2      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 41a:	6e c0       	rjmp	.+220    	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
 41c:	81 36       	cpi	r24, 0x61	; 97
 41e:	09 f4       	brne	.+2      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 420:	6e c0       	rjmp	.+220    	; 0x4fe <__LOCK_REGION_LENGTH__+0xfe>
 422:	82 36       	cpi	r24, 0x62	; 98
 424:	31 f1       	breq	.+76     	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
            sprintf_P(sprintbuf, PSTR("g%s$"), getVolatileString());
            sendMsg();
            break;
            
          default:
            sprintf_P(sprintbuf,PSTR("err-getnoprop$"));
 426:	7f 92       	push	r7
 428:	6f 92       	push	r6
 42a:	ff 92       	push	r15
 42c:	ef 92       	push	r14
 42e:	0e 94 47 04 	call	0x88e	; 0x88e <sprintf_P>
            sendMsg();
 432:	0e 94 3d 01 	call	0x27a	; 0x27a <sendMsg>
 436:	0f 90       	pop	r0
 438:	0f 90       	pop	r0
 43a:	0f 90       	pop	r0
 43c:	0f 90       	pop	r0
 43e:	e9 81       	ldd	r30, Y+1	; 0x01
 440:	fa 81       	ldd	r31, Y+2	; 0x02
  cBuffer* myRxBufferPtr;
  char * myRxBufferDataPtr;
  myRxBufferPtr = uartGetRxBuffer();
  myRxBufferDataPtr = myRxBufferPtr->dataptr;
  
  while (*myRxBufferDataPtr) { // do until we are at the null term (end of cmd)
 442:	80 81       	ld	r24, Z
 444:	81 11       	cpse	r24, r1
 446:	ce cf       	rjmp	.-100    	; 0x3e4 <processCmd+0x76>
      default:
        customResponse = TRUE;
        sprintf_P(sprintbuf, PSTR("err-cmd$"));
    } // end switch on command
  } // end while more data
}
 448:	0f 90       	pop	r0
 44a:	0f 90       	pop	r0
 44c:	df 91       	pop	r29
 44e:	cf 91       	pop	r28
 450:	1f 91       	pop	r17
 452:	0f 91       	pop	r16
 454:	ff 90       	pop	r15
 456:	ef 90       	pop	r14
 458:	df 90       	pop	r13
 45a:	cf 90       	pop	r12
 45c:	bf 90       	pop	r11
 45e:	af 90       	pop	r10
 460:	9f 90       	pop	r9
 462:	8f 90       	pop	r8
 464:	7f 90       	pop	r7
 466:	6f 90       	pop	r6
 468:	5f 90       	pop	r5
 46a:	4f 90       	pop	r4
 46c:	3f 90       	pop	r3
 46e:	2f 90       	pop	r2
 470:	08 95       	ret
            rxAddrGlobal = FALSE;
            sendMsg();
            break;
          
          case 'b': case 'B':
            sprintf_P(sprintbuf, PSTR("g%s$"), getVolatileString());
 472:	9f 92       	push	r9
 474:	8f 92       	push	r8
 476:	bf 92       	push	r11
 478:	af 92       	push	r10
 47a:	ff 92       	push	r15
 47c:	ef 92       	push	r14
 47e:	0e 94 47 04 	call	0x88e	; 0x88e <sprintf_P>
            sendMsg();
 482:	0e 94 3d 01 	call	0x27a	; 0x27a <sendMsg>
            break;
 486:	0f 90       	pop	r0
 488:	0f 90       	pop	r0
 48a:	0f 90       	pop	r0
 48c:	0f 90       	pop	r0
 48e:	0f 90       	pop	r0
 490:	0f 90       	pop	r0
 492:	d5 cf       	rjmp	.-86     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
  char * myRxBufferDataPtr;
  myRxBufferPtr = uartGetRxBuffer();
  myRxBufferDataPtr = myRxBufferPtr->dataptr;
  
  while (*myRxBufferDataPtr) { // do until we are at the null term (end of cmd)
    switch(*myRxBufferDataPtr++) { // get a char and then increment ptr
 494:	92 36       	cpi	r25, 0x62	; 98
 496:	81 f0       	breq	.+32     	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
 498:	97 36       	cpi	r25, 0x67	; 103
 49a:	09 f4       	brne	.+2      	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
 49c:	b4 cf       	rjmp	.-152    	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
            sendMsg();
        }
        break; // end 'g' command
        
      default:
        customResponse = TRUE;
 49e:	30 92 83 01 	sts	0x0183, r3	; 0x800183 <customResponse>
        sprintf_P(sprintbuf, PSTR("err-cmd$"));
 4a2:	df 92       	push	r13
 4a4:	cf 92       	push	r12
 4a6:	ff 92       	push	r15
 4a8:	ef 92       	push	r14
 4aa:	0e 94 47 04 	call	0x88e	; 0x88e <sprintf_P>
 4ae:	0f 90       	pop	r0
 4b0:	0f 90       	pop	r0
 4b2:	0f 90       	pop	r0
 4b4:	0f 90       	pop	r0
 4b6:	c3 cf       	rjmp	.-122    	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
        break; // End 'a' command
       
      // Input Data String into a volatile variable on the arduino
      case 'b': case 'B':
        //; // "a label can only be a part of a statement" <= the following line declares a variable first
        CRITICAL_SECTION_START;
 4b8:	2f b6       	in	r2, 0x3f	; 63
 4ba:	f8 94       	cli
        setVolatileString(myRxBufferDataPtr);
 4bc:	09 81       	ldd	r16, Y+1	; 0x01
 4be:	1a 81       	ldd	r17, Y+2	; 0x02
void setVolatileString(unsigned char *newString) {
  // limit the copy to 
  if (sizeof(newString) >= 39) { // sizeof does ptr len or string+null len??
    strncpy((char *)&myVolatileStr, (char *)newString, 39);
  } else {
    strcpy((char *)&myVolatileStr, (char *)newString);
 4c0:	b8 01       	movw	r22, r16
 4c2:	86 e4       	ldi	r24, 0x46	; 70
 4c4:	97 e0       	ldi	r25, 0x07	; 7
 4c6:	0e 94 38 04 	call	0x870	; 0x870 <strcpy>
      // Input Data String into a volatile variable on the arduino
      case 'b': case 'B':
        //; // "a label can only be a part of a statement" <= the following line declares a variable first
        CRITICAL_SECTION_START;
        setVolatileString(myRxBufferDataPtr);
        myRxBufferDataPtr += strlen(myRxBufferDataPtr);
 4ca:	f8 01       	movw	r30, r16
 4cc:	01 90       	ld	r0, Z+
 4ce:	00 20       	and	r0, r0
 4d0:	e9 f7       	brne	.-6      	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
 4d2:	8f 01       	movw	r16, r30
 4d4:	01 50       	subi	r16, 0x01	; 1
 4d6:	11 09       	sbc	r17, r1
 4d8:	1a 83       	std	Y+2, r17	; 0x02
 4da:	09 83       	std	Y+1, r16	; 0x01
        CRITICAL_SECTION_END;
 4dc:	2f be       	out	0x3f, r2	; 63
        break; // End 'b' command
 4de:	af cf       	rjmp	.-162    	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
  
  while (*myRxBufferDataPtr) { // do until we are at the null term (end of cmd)
    switch(*myRxBufferDataPtr++) { // get a char and then increment ptr
      // SET Address
      case 'a':
        rc = setCommandProtocolAddr(atoi((char *)myRxBufferDataPtr));
 4e0:	c9 01       	movw	r24, r18
 4e2:	0e 94 13 04 	call	0x826	; 0x826 <atoi>
 4e6:	0e 94 30 01 	call	0x260	; 0x260 <setCommandProtocolAddr>
        if (rc) {
 4ea:	81 11       	cpse	r24, r1
 4ec:	1d c0       	rjmp	.+58     	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
          customResponse = TRUE;
          sprintf_P(sprintbuf,PSTR("err-badaddr$"));
          sendMsg();
        }
        // use EEPROM to store address between powerups. Only reprogram on non-global addr.
        pointToNextNonNumericChar(&myRxBufferDataPtr);
 4ee:	ce 01       	movw	r24, r28
 4f0:	01 96       	adiw	r24, 0x01	; 1
 4f2:	0e 94 a1 01 	call	0x342	; 0x342 <pointToNextNonNumericChar>
        break; // End 'a' command
 4f6:	a3 cf       	rjmp	.-186    	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
      // Get info
      case 'g': case 'G':
        // Indicate to cmd protocol that we are sending a custom ack
        customResponse = TRUE;
        // select sub-command
        switch(*myRxBufferDataPtr++) {
 4f8:	81 34       	cpi	r24, 0x41	; 65
 4fa:	09 f0       	breq	.+2      	; 0x4fe <__LOCK_REGION_LENGTH__+0xfe>
 4fc:	94 cf       	rjmp	.-216    	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
          case 'a': case 'A':
            sprintf_P(sprintbuf, PSTR("g%d$"), getCommandProtocolAddr());
 4fe:	0e 94 2c 01 	call	0x258	; 0x258 <getCommandProtocolAddr>
 502:	1f 92       	push	r1
 504:	8f 93       	push	r24
 506:	5f 92       	push	r5
 508:	4f 92       	push	r4
 50a:	ff 92       	push	r15
 50c:	ef 92       	push	r14
 50e:	0e 94 47 04 	call	0x88e	; 0x88e <sprintf_P>
            // SPECIAL CASE!! we WANT to get the address back on a global command!
            // You can only have ONE device on the net for this to work. Otherwise, user beware!
            rxAddrGlobal = FALSE;
 512:	10 92 c9 01 	sts	0x01C9, r1	; 0x8001c9 <rxAddrGlobal>
            sendMsg();
 516:	0e 94 3d 01 	call	0x27a	; 0x27a <sendMsg>
            break;
 51a:	0f 90       	pop	r0
 51c:	0f 90       	pop	r0
 51e:	0f 90       	pop	r0
 520:	0f 90       	pop	r0
 522:	0f 90       	pop	r0
 524:	0f 90       	pop	r0
 526:	8b cf       	rjmp	.-234    	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
    switch(*myRxBufferDataPtr++) { // get a char and then increment ptr
      // SET Address
      case 'a':
        rc = setCommandProtocolAddr(atoi((char *)myRxBufferDataPtr));
        if (rc) {
          customResponse = TRUE;
 528:	30 92 83 01 	sts	0x0183, r3	; 0x800183 <customResponse>
          sprintf_P(sprintbuf,PSTR("err-badaddr$"));
 52c:	8d e8       	ldi	r24, 0x8D	; 141
 52e:	90 e0       	ldi	r25, 0x00	; 0
 530:	9f 93       	push	r25
 532:	8f 93       	push	r24
 534:	ff 92       	push	r15
 536:	ef 92       	push	r14
 538:	0e 94 47 04 	call	0x88e	; 0x88e <sprintf_P>
          sendMsg();
 53c:	0e 94 3d 01 	call	0x27a	; 0x27a <sendMsg>
 540:	0f 90       	pop	r0
 542:	0f 90       	pop	r0
 544:	0f 90       	pop	r0
 546:	0f 90       	pop	r0
 548:	d2 cf       	rjmp	.-92     	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>

0000054a <main>:
/**************************************************
 * Start of pgm:
 */
int main(void) {
	
	DDRD |= (1 << DDD3); // set PD3 to OUTPUT
 54a:	53 9a       	sbi	0x0a, 3	; 10
	DDRD |= (1 << DDD4); // set PD4 to OUTPUT
 54c:	54 9a       	sbi	0x0a, 4	; 10
  
  DDRD |= (1 << DDD5); // set PD4 to OUTPUT for testing - led blink
 54e:	55 9a       	sbi	0x0a, 5	; 10
  PORTD |= (1 << PIND5); // DEBUG TURN ON LED INDICATOR
 550:	5d 9a       	sbi	0x0b, 5	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 552:	2f ef       	ldi	r18, 0xFF	; 255
 554:	81 ee       	ldi	r24, 0xE1	; 225
 556:	94 e0       	ldi	r25, 0x04	; 4
 558:	21 50       	subi	r18, 0x01	; 1
 55a:	80 40       	sbci	r24, 0x00	; 0
 55c:	90 40       	sbci	r25, 0x00	; 0
 55e:	e1 f7       	brne	.-8      	; 0x558 <main+0xe>
 560:	00 c0       	rjmp	.+0      	; 0x562 <main+0x18>
 562:	00 00       	nop
  _delay_ms(100);
  PORTD &= ~(1 << PIND5); // DEBUG TURN OFF LED INDICATOR
 564:	5d 98       	cbi	0x0b, 5	; 11

  /*************************
   * UART initialization stuff
   */
  uartInit();
 566:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <uartInit>
  
  /*************************
   * Command Protocol Library initialization stuff
   */
  // set library function to handle bytes received over UART (and other stuff)
  initCmdHandler();
 56a:	0e 94 ff 00 	call	0x1fe	; 0x1fe <initCmdHandler>
  // set address, if not already in eeprom
  initCommandProtocolAddr(CMD_UART_THIS_DEVICE_ADDRESS);
 56e:	81 e0       	ldi	r24, 0x01	; 1
 570:	0e 94 0d 01 	call	0x21a	; 0x21a <initCommandProtocolAddr>
  
  // Globally Enable Interrupts
  // This MUST occur before ANY UART IO happens!!
  sei();
 574:	78 94       	sei
  
  sprintf_P((char *)sprintbuf,PSTR("testing %d$"), 10);
 576:	1f 92       	push	r1
 578:	8a e0       	ldi	r24, 0x0A	; 10
 57a:	8f 93       	push	r24
 57c:	8a e9       	ldi	r24, 0x9A	; 154
 57e:	90 e0       	ldi	r25, 0x00	; 0
 580:	9f 93       	push	r25
 582:	8f 93       	push	r24
 584:	ca ec       	ldi	r28, 0xCA	; 202
 586:	d1 e0       	ldi	r29, 0x01	; 1
 588:	df 93       	push	r29
 58a:	cf 93       	push	r28
 58c:	0e 94 47 04 	call	0x88e	; 0x88e <sprintf_P>
  uartSendBuffer(sprintbuf,strlen(sprintbuf));
 590:	09 90       	ld	r0, Y+
 592:	00 20       	and	r0, r0
 594:	e9 f7       	brne	.-6      	; 0x590 <main+0x46>
 596:	21 97       	sbiw	r28, 0x01	; 1
 598:	be 01       	movw	r22, r28
 59a:	6a 5c       	subi	r22, 0xCA	; 202
 59c:	71 40       	sbci	r23, 0x01	; 1
 59e:	8a ec       	ldi	r24, 0xCA	; 202
 5a0:	91 e0       	ldi	r25, 0x01	; 1
 5a2:	0e 94 17 03 	call	0x62e	; 0x62e <uartSendBuffer>
 5a6:	0f 90       	pop	r0
 5a8:	0f 90       	pop	r0
 5aa:	0f 90       	pop	r0
 5ac:	0f 90       	pop	r0
 5ae:	0f 90       	pop	r0
 5b0:	0f 90       	pop	r0
  
  /* Loop forever, handle uart messages if we get any */
  while (1) {
    u08 rc; 
    
    if (rxCompleteFlag) {
 5b2:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <rxCompleteFlag>
 5b6:	88 23       	and	r24, r24
 5b8:	e1 f3       	breq	.-8      	; 0x5b2 <main+0x68>
      beginCmdProcessing(); // follow command protocol
 5ba:	0e 94 62 01 	call	0x2c4	; 0x2c4 <beginCmdProcessing>
      processCmd(); // interpret the current waiting command
 5be:	0e 94 b7 01 	call	0x36e	; 0x36e <processCmd>
      endCmdProcessing(); // follow command protocol
 5c2:	0e 94 68 01 	call	0x2d0	; 0x2d0 <endCmdProcessing>
 5c6:	f5 cf       	rjmp	.-22     	; 0x5b2 <main+0x68>

000005c8 <uartInit>:
  #ifdef UART_USE_RS485
  uart485OutputEnable();
  #endif
	outb(UDR0, txData);
	// set ready state to FALSE
	uartReadyTx = FALSE;
 5c8:	cf 93       	push	r28
 5ca:	cf b7       	in	r28, 0x3f	; 63
 5cc:	f8 94       	cli
 5ce:	40 e4       	ldi	r20, 0x40	; 64
 5d0:	50 e0       	ldi	r21, 0x00	; 0
 5d2:	62 e4       	ldi	r22, 0x42	; 66
 5d4:	71 e0       	ldi	r23, 0x01	; 1
 5d6:	8f e6       	ldi	r24, 0x6F	; 111
 5d8:	97 e0       	ldi	r25, 0x07	; 7
 5da:	0e 94 67 00 	call	0xce	; 0xce <bufferInit>
 5de:	40 e4       	ldi	r20, 0x40	; 64
 5e0:	50 e0       	ldi	r21, 0x00	; 0
 5e2:	62 e0       	ldi	r22, 0x02	; 2
 5e4:	71 e0       	ldi	r23, 0x01	; 1
 5e6:	8a e7       	ldi	r24, 0x7A	; 122
 5e8:	97 e0       	ldi	r25, 0x07	; 7
 5ea:	0e 94 67 00 	call	0xce	; 0xce <bufferInit>
 5ee:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 5f2:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 5f6:	88 ed       	ldi	r24, 0xD8	; 216
 5f8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 5fc:	83 e3       	ldi	r24, 0x33	; 51
 5fe:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 602:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 606:	8f ef       	ldi	r24, 0xFF	; 255
 608:	80 93 6e 07 	sts	0x076E, r24	; 0x80076e <uartReadyTx>
 60c:	10 92 77 07 	sts	0x0777, r1	; 0x800777 <uartBufferedTx>
 610:	10 92 83 07 	sts	0x0783, r1	; 0x800783 <uartRxOverflow+0x1>
 614:	10 92 82 07 	sts	0x0782, r1	; 0x800782 <uartRxOverflow>
 618:	cf bf       	out	0x3f, r28	; 63
 61a:	cf 91       	pop	r28
 61c:	08 95       	ret

0000061e <uartSetRxHandler>:
 61e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 622:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 626:	08 95       	ret

00000628 <uartGetRxBuffer>:
 628:	8f e6       	ldi	r24, 0x6F	; 111
 62a:	97 e0       	ldi	r25, 0x07	; 7
 62c:	08 95       	ret

0000062e <uartSendBuffer>:
  #endif
	uartSendByte(bufferGetFromFront(&uartTxBuffer));
}

// transmit nBytes from buffer out the uart
u08 uartSendBuffer(char *buffer, u16 nBytes) {
 62e:	ff 92       	push	r15
 630:	0f 93       	push	r16
 632:	1f 93       	push	r17
 634:	cf 93       	push	r28
 636:	df 93       	push	r29
 638:	fc 01       	movw	r30, r24
	register u08 first;
	register u16 i;
	
	// wait for the transmitter to be ready
	while(!uartReadyTx);
 63a:	90 91 6e 07 	lds	r25, 0x076E	; 0x80076e <uartReadyTx>
 63e:	99 23       	and	r25, r25
 640:	e1 f3       	breq	.-8      	; 0x63a <uartSendBuffer+0xc>
	
	
	
	// check if there's space (and that we have any bytes to send at all)
	if((uartTxBuffer.datalength + nBytes < uartTxBuffer.size) && nBytes)
 642:	20 91 7e 07 	lds	r18, 0x077E	; 0x80077e <uartTxBuffer+0x4>
 646:	30 91 7f 07 	lds	r19, 0x077F	; 0x80077f <uartTxBuffer+0x5>
 64a:	26 0f       	add	r18, r22
 64c:	37 1f       	adc	r19, r23
 64e:	80 91 7c 07 	lds	r24, 0x077C	; 0x80077c <uartTxBuffer+0x2>
 652:	90 91 7d 07 	lds	r25, 0x077D	; 0x80077d <uartTxBuffer+0x3>
 656:	28 17       	cp	r18, r24
 658:	39 07       	cpc	r19, r25
 65a:	30 f5       	brcc	.+76     	; 0x6a8 <uartSendBuffer+0x7a>
 65c:	61 15       	cp	r22, r1
 65e:	71 05       	cpc	r23, r1
 660:	19 f1       	breq	.+70     	; 0x6a8 <uartSendBuffer+0x7a>
	{
		// grab first character
		first = *buffer++;
 662:	ef 01       	movw	r28, r30
 664:	21 96       	adiw	r28, 0x01	; 1
 666:	f0 80       	ld	r15, Z
		// copy THE REST OF user buffer to uart transmit buffer
		for(i = 0; i < nBytes-1; i++)
 668:	61 30       	cpi	r22, 0x01	; 1
 66a:	71 05       	cpc	r23, r1
 66c:	59 f0       	breq	.+22     	; 0x684 <uartSendBuffer+0x56>
 66e:	8f 01       	movw	r16, r30
 670:	06 0f       	add	r16, r22
 672:	17 1f       	adc	r17, r23
		{
			// put data bytes at end of buffer
			bufferAddToEnd(&uartTxBuffer, *buffer++);
 674:	69 91       	ld	r22, Y+
 676:	8a e7       	ldi	r24, 0x7A	; 122
 678:	97 e0       	ldi	r25, 0x07	; 7
 67a:	0e 94 74 00 	call	0xe8	; 0xe8 <bufferAddToEnd>
	if((uartTxBuffer.datalength + nBytes < uartTxBuffer.size) && nBytes)
	{
		// grab first character
		first = *buffer++;
		// copy THE REST OF user buffer to uart transmit buffer
		for(i = 0; i < nBytes-1; i++)
 67e:	c0 17       	cp	r28, r16
 680:	d1 07       	cpc	r29, r17
 682:	c1 f7       	brne	.-16     	; 0x674 <uartSendBuffer+0x46>
			// put data bytes at end of buffer
			bufferAddToEnd(&uartTxBuffer, *buffer++);
		}

		// send the first byte to get things going by interrupts
		uartBufferedTx = TRUE;
 684:	8f ef       	ldi	r24, 0xFF	; 255
 686:	80 93 77 07 	sts	0x0777, r24	; 0x800777 <uartBufferedTx>
}

// transmits a byte over the uart
void uartSendByte(u08 txData) {
	// wait for the transmitter to be ready
	while(!uartReadyTx);
 68a:	80 91 6e 07 	lds	r24, 0x076E	; 0x80076e <uartReadyTx>
 68e:	88 23       	and	r24, r24
 690:	e1 f3       	breq	.-8      	; 0x68a <uartSendBuffer+0x5c>
	// send byte
  #ifdef UART_USE_RS485
  uart485OutputEnable();
  #endif
	outb(UDR0, txData);
 692:	f0 92 c6 00 	sts	0x00C6, r15	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	// set ready state to FALSE
	uartReadyTx = FALSE;
 696:	10 92 6e 07 	sts	0x076E, r1	; 0x80076e <uartReadyTx>
    _delay_us(1);
    #endif
    
		uartSendByte(first);
		// return success
		return TRUE;
 69a:	8f ef       	ldi	r24, 0xFF	; 255
	else
	{
		// return failure
		return FALSE;
	}
}
 69c:	df 91       	pop	r29
 69e:	cf 91       	pop	r28
 6a0:	1f 91       	pop	r17
 6a2:	0f 91       	pop	r16
 6a4:	ff 90       	pop	r15
 6a6:	08 95       	ret
		return TRUE;
	}
	else
	{
		// return failure
		return FALSE;
 6a8:	80 e0       	ldi	r24, 0x00	; 0
	}
}
 6aa:	df 91       	pop	r29
 6ac:	cf 91       	pop	r28
 6ae:	1f 91       	pop	r17
 6b0:	0f 91       	pop	r16
 6b2:	ff 90       	pop	r15
 6b4:	08 95       	ret

000006b6 <__vector_19>:
inline void uart485EnableDriverCntlPin(void) {
  UARTRS485DDR |= BV(RS485PIN);
}
#endif
// UART Data Register Empty Interrupt Handler
UART_INTERRUPT_HANDLER(SIG_UART_DATA) {
 6b6:	1f 92       	push	r1
 6b8:	0f 92       	push	r0
 6ba:	0f b6       	in	r0, 0x3f	; 63
 6bc:	0f 92       	push	r0
 6be:	11 24       	eor	r1, r1
  // nop
}
 6c0:	0f 90       	pop	r0
 6c2:	0f be       	out	0x3f, r0	; 63
 6c4:	0f 90       	pop	r0
 6c6:	1f 90       	pop	r1
 6c8:	18 95       	reti

000006ca <__vector_20>:

// UART Transmit Complete Interrupt Handler
UART_INTERRUPT_HANDLER(SIG_UART_TRANS) {
 6ca:	1f 92       	push	r1
 6cc:	0f 92       	push	r0
 6ce:	0f b6       	in	r0, 0x3f	; 63
 6d0:	0f 92       	push	r0
 6d2:	11 24       	eor	r1, r1
 6d4:	2f 93       	push	r18
 6d6:	3f 93       	push	r19
 6d8:	4f 93       	push	r20
 6da:	5f 93       	push	r21
 6dc:	8f 93       	push	r24
 6de:	9f 93       	push	r25
 6e0:	ef 93       	push	r30
 6e2:	ff 93       	push	r31
	//UDR0 = uartBufferedTx;
	// check if buffered tx is enabled
	if(uartBufferedTx)
 6e4:	80 91 77 07 	lds	r24, 0x0777	; 0x800777 <uartBufferedTx>
 6e8:	88 23       	and	r24, r24
 6ea:	99 f1       	breq	.+102    	; 0x752 <__vector_20+0x88>
	{
		
		// check if there's data left in the buffer
		if(uartTxBuffer.datalength)
 6ec:	20 91 7e 07 	lds	r18, 0x077E	; 0x80077e <uartTxBuffer+0x4>
 6f0:	30 91 7f 07 	lds	r19, 0x077F	; 0x80077f <uartTxBuffer+0x5>
 6f4:	21 15       	cp	r18, r1
 6f6:	31 05       	cpc	r19, r1
 6f8:	e1 f1       	breq	.+120    	; 0x772 <__vector_20+0xa8>
		{
			// send byte from top of buffer
      /* The Following section is expanded from bufferGetFromFront() */
			//uartTxIntData = bufferGetFromFront(&uartTxBuffer);
      uartTxIntData = 0;
 6fa:	10 92 79 07 	sts	0x0779, r1	; 0x800779 <uartTxIntData>
			if(uartTxBuffer.datalength)
			{
				// get the first character from buffer
				uartTxIntData = uartTxBuffer.dataptr[uartTxBuffer.dataindex];
 6fe:	80 91 80 07 	lds	r24, 0x0780	; 0x800780 <uartTxBuffer+0x6>
 702:	90 91 81 07 	lds	r25, 0x0781	; 0x800781 <uartTxBuffer+0x7>
 706:	e0 91 7a 07 	lds	r30, 0x077A	; 0x80077a <uartTxBuffer>
 70a:	f0 91 7b 07 	lds	r31, 0x077B	; 0x80077b <uartTxBuffer+0x1>
 70e:	e8 0f       	add	r30, r24
 710:	f9 1f       	adc	r31, r25
 712:	40 81       	ld	r20, Z
 714:	40 93 79 07 	sts	0x0779, r20	; 0x800779 <uartTxIntData>
				// move index down and decrement length
				uartTxBuffer.dataindex++;
 718:	01 96       	adiw	r24, 0x01	; 1
 71a:	90 93 81 07 	sts	0x0781, r25	; 0x800781 <uartTxBuffer+0x7>
 71e:	80 93 80 07 	sts	0x0780, r24	; 0x800780 <uartTxBuffer+0x6>
				if(uartTxBuffer.dataindex >= uartTxBuffer.size)
 722:	40 91 7c 07 	lds	r20, 0x077C	; 0x80077c <uartTxBuffer+0x2>
 726:	50 91 7d 07 	lds	r21, 0x077D	; 0x80077d <uartTxBuffer+0x3>
 72a:	84 17       	cp	r24, r20
 72c:	95 07       	cpc	r25, r21
 72e:	30 f0       	brcs	.+12     	; 0x73c <__vector_20+0x72>
				{
					uartTxBuffer.dataindex -= uartTxBuffer.size;
 730:	84 1b       	sub	r24, r20
 732:	95 0b       	sbc	r25, r21
 734:	90 93 81 07 	sts	0x0781, r25	; 0x800781 <uartTxBuffer+0x7>
 738:	80 93 80 07 	sts	0x0780, r24	; 0x800780 <uartTxBuffer+0x6>
				}
				uartTxBuffer.datalength--;
 73c:	21 50       	subi	r18, 0x01	; 1
 73e:	31 09       	sbc	r19, r1
 740:	30 93 7f 07 	sts	0x077F, r19	; 0x80077f <uartTxBuffer+0x5>
 744:	20 93 7e 07 	sts	0x077E, r18	; 0x80077e <uartTxBuffer+0x4>
			}
			outb(UDR0, uartTxIntData);
 748:	80 91 79 07 	lds	r24, 0x0779	; 0x800779 <uartTxIntData>
 74c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 750:	03 c0       	rjmp	.+6      	; 0x758 <__vector_20+0x8e>
	}
	else
	{
		// we're using single-byte tx mode
		// indicate transmit complete, back to ready
		uartReadyTx = TRUE;
 752:	8f ef       	ldi	r24, 0xFF	; 255
 754:	80 93 6e 07 	sts	0x076E, r24	; 0x80076e <uartReadyTx>
    #ifdef UART_USE_RS485
    uart485OutputDisable();
    #endif
	}
}
 758:	ff 91       	pop	r31
 75a:	ef 91       	pop	r30
 75c:	9f 91       	pop	r25
 75e:	8f 91       	pop	r24
 760:	5f 91       	pop	r21
 762:	4f 91       	pop	r20
 764:	3f 91       	pop	r19
 766:	2f 91       	pop	r18
 768:	0f 90       	pop	r0
 76a:	0f be       	out	0x3f, r0	; 63
 76c:	0f 90       	pop	r0
 76e:	1f 90       	pop	r1
 770:	18 95       	reti
			outb(UDR0, uartTxIntData);
		}
		else
		{
			// no data left
			uartBufferedTx = FALSE;
 772:	10 92 77 07 	sts	0x0777, r1	; 0x800777 <uartBufferedTx>
			// return to ready state
			uartReadyTx = TRUE;
 776:	8f ef       	ldi	r24, 0xFF	; 255
 778:	80 93 6e 07 	sts	0x076E, r24	; 0x80076e <uartReadyTx>
 77c:	ed cf       	rjmp	.-38     	; 0x758 <__vector_20+0x8e>

0000077e <__vector_18>:
	}
}

// UART Receive Complete Interrupt Handler
UART_INTERRUPT_HANDLER(SIG_UART_RECV)
{
 77e:	1f 92       	push	r1
 780:	0f 92       	push	r0
 782:	0f b6       	in	r0, 0x3f	; 63
 784:	0f 92       	push	r0
 786:	11 24       	eor	r1, r1
 788:	2f 93       	push	r18
 78a:	3f 93       	push	r19
 78c:	4f 93       	push	r20
 78e:	5f 93       	push	r21
 790:	6f 93       	push	r22
 792:	7f 93       	push	r23
 794:	8f 93       	push	r24
 796:	9f 93       	push	r25
 798:	af 93       	push	r26
 79a:	bf 93       	push	r27
 79c:	ef 93       	push	r30
 79e:	ff 93       	push	r31
	u08 c;
	// get received char
	c = inb(UDR);
 7a0:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  
	// if there's a user function to handle this receive event
	if(UartRxFunc)
 7a4:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
 7a8:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <_edata+0x1>
 7ac:	23 2b       	or	r18, r19
 7ae:	b1 f0       	breq	.+44     	; 0x7dc <__vector_18+0x5e>
	{
		// call it and pass the received data
		UartRxFunc(c);
 7b0:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <_edata>
 7b4:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <_edata+0x1>
 7b8:	09 95       	icall
			// no space in buffer
			// count overflow
			uartRxOverflow++;
		}
	}
}
 7ba:	ff 91       	pop	r31
 7bc:	ef 91       	pop	r30
 7be:	bf 91       	pop	r27
 7c0:	af 91       	pop	r26
 7c2:	9f 91       	pop	r25
 7c4:	8f 91       	pop	r24
 7c6:	7f 91       	pop	r23
 7c8:	6f 91       	pop	r22
 7ca:	5f 91       	pop	r21
 7cc:	4f 91       	pop	r20
 7ce:	3f 91       	pop	r19
 7d0:	2f 91       	pop	r18
 7d2:	0f 90       	pop	r0
 7d4:	0f be       	out	0x3f, r0	; 63
 7d6:	0f 90       	pop	r0
 7d8:	1f 90       	pop	r1
 7da:	18 95       	reti
	else
	{
		// otherwise do default processing
		// put received char in buffer
		// check if there's space
		if( !bufferAddToEnd(&uartRxBuffer, c) )
 7dc:	68 2f       	mov	r22, r24
 7de:	8f e6       	ldi	r24, 0x6F	; 111
 7e0:	97 e0       	ldi	r25, 0x07	; 7
 7e2:	0e 94 74 00 	call	0xe8	; 0xe8 <bufferAddToEnd>
 7e6:	81 11       	cpse	r24, r1
 7e8:	e8 cf       	rjmp	.-48     	; 0x7ba <__vector_18+0x3c>
		{
			// no space in buffer
			// count overflow
			uartRxOverflow++;
 7ea:	80 91 82 07 	lds	r24, 0x0782	; 0x800782 <uartRxOverflow>
 7ee:	90 91 83 07 	lds	r25, 0x0783	; 0x800783 <uartRxOverflow+0x1>
 7f2:	01 96       	adiw	r24, 0x01	; 1
 7f4:	90 93 83 07 	sts	0x0783, r25	; 0x800783 <uartRxOverflow+0x1>
 7f8:	80 93 82 07 	sts	0x0782, r24	; 0x800782 <uartRxOverflow>
		}
	}
}
 7fc:	de cf       	rjmp	.-68     	; 0x7ba <__vector_18+0x3c>

000007fe <__udivmodhi4>:
 7fe:	aa 1b       	sub	r26, r26
 800:	bb 1b       	sub	r27, r27
 802:	51 e1       	ldi	r21, 0x11	; 17
 804:	07 c0       	rjmp	.+14     	; 0x814 <__udivmodhi4_ep>

00000806 <__udivmodhi4_loop>:
 806:	aa 1f       	adc	r26, r26
 808:	bb 1f       	adc	r27, r27
 80a:	a6 17       	cp	r26, r22
 80c:	b7 07       	cpc	r27, r23
 80e:	10 f0       	brcs	.+4      	; 0x814 <__udivmodhi4_ep>
 810:	a6 1b       	sub	r26, r22
 812:	b7 0b       	sbc	r27, r23

00000814 <__udivmodhi4_ep>:
 814:	88 1f       	adc	r24, r24
 816:	99 1f       	adc	r25, r25
 818:	5a 95       	dec	r21
 81a:	a9 f7       	brne	.-22     	; 0x806 <__udivmodhi4_loop>
 81c:	80 95       	com	r24
 81e:	90 95       	com	r25
 820:	bc 01       	movw	r22, r24
 822:	cd 01       	movw	r24, r26
 824:	08 95       	ret

00000826 <atoi>:
 826:	fc 01       	movw	r30, r24
 828:	88 27       	eor	r24, r24
 82a:	99 27       	eor	r25, r25
 82c:	e8 94       	clt
 82e:	21 91       	ld	r18, Z+
 830:	20 32       	cpi	r18, 0x20	; 32
 832:	e9 f3       	breq	.-6      	; 0x82e <atoi+0x8>
 834:	29 30       	cpi	r18, 0x09	; 9
 836:	10 f0       	brcs	.+4      	; 0x83c <atoi+0x16>
 838:	2e 30       	cpi	r18, 0x0E	; 14
 83a:	c8 f3       	brcs	.-14     	; 0x82e <atoi+0x8>
 83c:	2b 32       	cpi	r18, 0x2B	; 43
 83e:	41 f0       	breq	.+16     	; 0x850 <atoi+0x2a>
 840:	2d 32       	cpi	r18, 0x2D	; 45
 842:	39 f4       	brne	.+14     	; 0x852 <atoi+0x2c>
 844:	68 94       	set
 846:	04 c0       	rjmp	.+8      	; 0x850 <atoi+0x2a>
 848:	0e 94 3f 04 	call	0x87e	; 0x87e <__mulhi_const_10>
 84c:	82 0f       	add	r24, r18
 84e:	91 1d       	adc	r25, r1
 850:	21 91       	ld	r18, Z+
 852:	20 53       	subi	r18, 0x30	; 48
 854:	2a 30       	cpi	r18, 0x0A	; 10
 856:	c0 f3       	brcs	.-16     	; 0x848 <atoi+0x22>
 858:	1e f4       	brtc	.+6      	; 0x860 <atoi+0x3a>
 85a:	90 95       	com	r25
 85c:	81 95       	neg	r24
 85e:	9f 4f       	sbci	r25, 0xFF	; 255
 860:	08 95       	ret

00000862 <memset>:
 862:	dc 01       	movw	r26, r24
 864:	01 c0       	rjmp	.+2      	; 0x868 <memset+0x6>
 866:	6d 93       	st	X+, r22
 868:	41 50       	subi	r20, 0x01	; 1
 86a:	50 40       	sbci	r21, 0x00	; 0
 86c:	e0 f7       	brcc	.-8      	; 0x866 <memset+0x4>
 86e:	08 95       	ret

00000870 <strcpy>:
 870:	fb 01       	movw	r30, r22
 872:	dc 01       	movw	r26, r24
 874:	01 90       	ld	r0, Z+
 876:	0d 92       	st	X+, r0
 878:	00 20       	and	r0, r0
 87a:	e1 f7       	brne	.-8      	; 0x874 <strcpy+0x4>
 87c:	08 95       	ret

0000087e <__mulhi_const_10>:
 87e:	7a e0       	ldi	r23, 0x0A	; 10
 880:	97 9f       	mul	r25, r23
 882:	90 2d       	mov	r25, r0
 884:	87 9f       	mul	r24, r23
 886:	80 2d       	mov	r24, r0
 888:	91 0d       	add	r25, r1
 88a:	11 24       	eor	r1, r1
 88c:	08 95       	ret

0000088e <sprintf_P>:
 88e:	ae e0       	ldi	r26, 0x0E	; 14
 890:	b0 e0       	ldi	r27, 0x00	; 0
 892:	ed e4       	ldi	r30, 0x4D	; 77
 894:	f4 e0       	ldi	r31, 0x04	; 4
 896:	0c 94 1e 07 	jmp	0xe3c	; 0xe3c <__prologue_saves__+0x1c>
 89a:	0d 89       	ldd	r16, Y+21	; 0x15
 89c:	1e 89       	ldd	r17, Y+22	; 0x16
 89e:	8e e0       	ldi	r24, 0x0E	; 14
 8a0:	8c 83       	std	Y+4, r24	; 0x04
 8a2:	1a 83       	std	Y+2, r17	; 0x02
 8a4:	09 83       	std	Y+1, r16	; 0x01
 8a6:	8f ef       	ldi	r24, 0xFF	; 255
 8a8:	9f e7       	ldi	r25, 0x7F	; 127
 8aa:	9e 83       	std	Y+6, r25	; 0x06
 8ac:	8d 83       	std	Y+5, r24	; 0x05
 8ae:	ae 01       	movw	r20, r28
 8b0:	47 5e       	subi	r20, 0xE7	; 231
 8b2:	5f 4f       	sbci	r21, 0xFF	; 255
 8b4:	6f 89       	ldd	r22, Y+23	; 0x17
 8b6:	78 8d       	ldd	r23, Y+24	; 0x18
 8b8:	ce 01       	movw	r24, r28
 8ba:	01 96       	adiw	r24, 0x01	; 1
 8bc:	0e 94 69 04 	call	0x8d2	; 0x8d2 <vfprintf>
 8c0:	ef 81       	ldd	r30, Y+7	; 0x07
 8c2:	f8 85       	ldd	r31, Y+8	; 0x08
 8c4:	e0 0f       	add	r30, r16
 8c6:	f1 1f       	adc	r31, r17
 8c8:	10 82       	st	Z, r1
 8ca:	2e 96       	adiw	r28, 0x0e	; 14
 8cc:	e4 e0       	ldi	r30, 0x04	; 4
 8ce:	0c 94 3a 07 	jmp	0xe74	; 0xe74 <__epilogue_restores__+0x1c>

000008d2 <vfprintf>:
 8d2:	ab e0       	ldi	r26, 0x0B	; 11
 8d4:	b0 e0       	ldi	r27, 0x00	; 0
 8d6:	ef e6       	ldi	r30, 0x6F	; 111
 8d8:	f4 e0       	ldi	r31, 0x04	; 4
 8da:	0c 94 10 07 	jmp	0xe20	; 0xe20 <__prologue_saves__>
 8de:	6c 01       	movw	r12, r24
 8e0:	7b 01       	movw	r14, r22
 8e2:	8a 01       	movw	r16, r20
 8e4:	fc 01       	movw	r30, r24
 8e6:	17 82       	std	Z+7, r1	; 0x07
 8e8:	16 82       	std	Z+6, r1	; 0x06
 8ea:	83 81       	ldd	r24, Z+3	; 0x03
 8ec:	81 ff       	sbrs	r24, 1
 8ee:	cc c1       	rjmp	.+920    	; 0xc88 <__stack+0x389>
 8f0:	ce 01       	movw	r24, r28
 8f2:	01 96       	adiw	r24, 0x01	; 1
 8f4:	3c 01       	movw	r6, r24
 8f6:	f6 01       	movw	r30, r12
 8f8:	93 81       	ldd	r25, Z+3	; 0x03
 8fa:	f7 01       	movw	r30, r14
 8fc:	93 fd       	sbrc	r25, 3
 8fe:	85 91       	lpm	r24, Z+
 900:	93 ff       	sbrs	r25, 3
 902:	81 91       	ld	r24, Z+
 904:	7f 01       	movw	r14, r30
 906:	88 23       	and	r24, r24
 908:	09 f4       	brne	.+2      	; 0x90c <__stack+0xd>
 90a:	ba c1       	rjmp	.+884    	; 0xc80 <__stack+0x381>
 90c:	85 32       	cpi	r24, 0x25	; 37
 90e:	39 f4       	brne	.+14     	; 0x91e <__stack+0x1f>
 910:	93 fd       	sbrc	r25, 3
 912:	85 91       	lpm	r24, Z+
 914:	93 ff       	sbrs	r25, 3
 916:	81 91       	ld	r24, Z+
 918:	7f 01       	movw	r14, r30
 91a:	85 32       	cpi	r24, 0x25	; 37
 91c:	29 f4       	brne	.+10     	; 0x928 <__stack+0x29>
 91e:	b6 01       	movw	r22, r12
 920:	90 e0       	ldi	r25, 0x00	; 0
 922:	0e 94 60 06 	call	0xcc0	; 0xcc0 <fputc>
 926:	e7 cf       	rjmp	.-50     	; 0x8f6 <vfprintf+0x24>
 928:	91 2c       	mov	r9, r1
 92a:	21 2c       	mov	r2, r1
 92c:	31 2c       	mov	r3, r1
 92e:	ff e1       	ldi	r31, 0x1F	; 31
 930:	f3 15       	cp	r31, r3
 932:	d8 f0       	brcs	.+54     	; 0x96a <__stack+0x6b>
 934:	8b 32       	cpi	r24, 0x2B	; 43
 936:	79 f0       	breq	.+30     	; 0x956 <__stack+0x57>
 938:	38 f4       	brcc	.+14     	; 0x948 <__stack+0x49>
 93a:	80 32       	cpi	r24, 0x20	; 32
 93c:	79 f0       	breq	.+30     	; 0x95c <__stack+0x5d>
 93e:	83 32       	cpi	r24, 0x23	; 35
 940:	a1 f4       	brne	.+40     	; 0x96a <__stack+0x6b>
 942:	23 2d       	mov	r18, r3
 944:	20 61       	ori	r18, 0x10	; 16
 946:	1d c0       	rjmp	.+58     	; 0x982 <__stack+0x83>
 948:	8d 32       	cpi	r24, 0x2D	; 45
 94a:	61 f0       	breq	.+24     	; 0x964 <__stack+0x65>
 94c:	80 33       	cpi	r24, 0x30	; 48
 94e:	69 f4       	brne	.+26     	; 0x96a <__stack+0x6b>
 950:	23 2d       	mov	r18, r3
 952:	21 60       	ori	r18, 0x01	; 1
 954:	16 c0       	rjmp	.+44     	; 0x982 <__stack+0x83>
 956:	83 2d       	mov	r24, r3
 958:	82 60       	ori	r24, 0x02	; 2
 95a:	38 2e       	mov	r3, r24
 95c:	e3 2d       	mov	r30, r3
 95e:	e4 60       	ori	r30, 0x04	; 4
 960:	3e 2e       	mov	r3, r30
 962:	2a c0       	rjmp	.+84     	; 0x9b8 <__stack+0xb9>
 964:	f3 2d       	mov	r31, r3
 966:	f8 60       	ori	r31, 0x08	; 8
 968:	1d c0       	rjmp	.+58     	; 0x9a4 <__stack+0xa5>
 96a:	37 fc       	sbrc	r3, 7
 96c:	2d c0       	rjmp	.+90     	; 0x9c8 <__stack+0xc9>
 96e:	20 ed       	ldi	r18, 0xD0	; 208
 970:	28 0f       	add	r18, r24
 972:	2a 30       	cpi	r18, 0x0A	; 10
 974:	40 f0       	brcs	.+16     	; 0x986 <__stack+0x87>
 976:	8e 32       	cpi	r24, 0x2E	; 46
 978:	b9 f4       	brne	.+46     	; 0x9a8 <__stack+0xa9>
 97a:	36 fc       	sbrc	r3, 6
 97c:	81 c1       	rjmp	.+770    	; 0xc80 <__stack+0x381>
 97e:	23 2d       	mov	r18, r3
 980:	20 64       	ori	r18, 0x40	; 64
 982:	32 2e       	mov	r3, r18
 984:	19 c0       	rjmp	.+50     	; 0x9b8 <__stack+0xb9>
 986:	36 fe       	sbrs	r3, 6
 988:	06 c0       	rjmp	.+12     	; 0x996 <__stack+0x97>
 98a:	8a e0       	ldi	r24, 0x0A	; 10
 98c:	98 9e       	mul	r9, r24
 98e:	20 0d       	add	r18, r0
 990:	11 24       	eor	r1, r1
 992:	92 2e       	mov	r9, r18
 994:	11 c0       	rjmp	.+34     	; 0x9b8 <__stack+0xb9>
 996:	ea e0       	ldi	r30, 0x0A	; 10
 998:	2e 9e       	mul	r2, r30
 99a:	20 0d       	add	r18, r0
 99c:	11 24       	eor	r1, r1
 99e:	22 2e       	mov	r2, r18
 9a0:	f3 2d       	mov	r31, r3
 9a2:	f0 62       	ori	r31, 0x20	; 32
 9a4:	3f 2e       	mov	r3, r31
 9a6:	08 c0       	rjmp	.+16     	; 0x9b8 <__stack+0xb9>
 9a8:	8c 36       	cpi	r24, 0x6C	; 108
 9aa:	21 f4       	brne	.+8      	; 0x9b4 <__stack+0xb5>
 9ac:	83 2d       	mov	r24, r3
 9ae:	80 68       	ori	r24, 0x80	; 128
 9b0:	38 2e       	mov	r3, r24
 9b2:	02 c0       	rjmp	.+4      	; 0x9b8 <__stack+0xb9>
 9b4:	88 36       	cpi	r24, 0x68	; 104
 9b6:	41 f4       	brne	.+16     	; 0x9c8 <__stack+0xc9>
 9b8:	f7 01       	movw	r30, r14
 9ba:	93 fd       	sbrc	r25, 3
 9bc:	85 91       	lpm	r24, Z+
 9be:	93 ff       	sbrs	r25, 3
 9c0:	81 91       	ld	r24, Z+
 9c2:	7f 01       	movw	r14, r30
 9c4:	81 11       	cpse	r24, r1
 9c6:	b3 cf       	rjmp	.-154    	; 0x92e <__stack+0x2f>
 9c8:	98 2f       	mov	r25, r24
 9ca:	9f 7d       	andi	r25, 0xDF	; 223
 9cc:	95 54       	subi	r25, 0x45	; 69
 9ce:	93 30       	cpi	r25, 0x03	; 3
 9d0:	28 f4       	brcc	.+10     	; 0x9dc <__stack+0xdd>
 9d2:	0c 5f       	subi	r16, 0xFC	; 252
 9d4:	1f 4f       	sbci	r17, 0xFF	; 255
 9d6:	9f e3       	ldi	r25, 0x3F	; 63
 9d8:	99 83       	std	Y+1, r25	; 0x01
 9da:	0d c0       	rjmp	.+26     	; 0x9f6 <__stack+0xf7>
 9dc:	83 36       	cpi	r24, 0x63	; 99
 9de:	31 f0       	breq	.+12     	; 0x9ec <__stack+0xed>
 9e0:	83 37       	cpi	r24, 0x73	; 115
 9e2:	71 f0       	breq	.+28     	; 0xa00 <__stack+0x101>
 9e4:	83 35       	cpi	r24, 0x53	; 83
 9e6:	09 f0       	breq	.+2      	; 0x9ea <__stack+0xeb>
 9e8:	59 c0       	rjmp	.+178    	; 0xa9c <__stack+0x19d>
 9ea:	21 c0       	rjmp	.+66     	; 0xa2e <__stack+0x12f>
 9ec:	f8 01       	movw	r30, r16
 9ee:	80 81       	ld	r24, Z
 9f0:	89 83       	std	Y+1, r24	; 0x01
 9f2:	0e 5f       	subi	r16, 0xFE	; 254
 9f4:	1f 4f       	sbci	r17, 0xFF	; 255
 9f6:	88 24       	eor	r8, r8
 9f8:	83 94       	inc	r8
 9fa:	91 2c       	mov	r9, r1
 9fc:	53 01       	movw	r10, r6
 9fe:	13 c0       	rjmp	.+38     	; 0xa26 <__stack+0x127>
 a00:	28 01       	movw	r4, r16
 a02:	f2 e0       	ldi	r31, 0x02	; 2
 a04:	4f 0e       	add	r4, r31
 a06:	51 1c       	adc	r5, r1
 a08:	f8 01       	movw	r30, r16
 a0a:	a0 80       	ld	r10, Z
 a0c:	b1 80       	ldd	r11, Z+1	; 0x01
 a0e:	36 fe       	sbrs	r3, 6
 a10:	03 c0       	rjmp	.+6      	; 0xa18 <__stack+0x119>
 a12:	69 2d       	mov	r22, r9
 a14:	70 e0       	ldi	r23, 0x00	; 0
 a16:	02 c0       	rjmp	.+4      	; 0xa1c <__stack+0x11d>
 a18:	6f ef       	ldi	r22, 0xFF	; 255
 a1a:	7f ef       	ldi	r23, 0xFF	; 255
 a1c:	c5 01       	movw	r24, r10
 a1e:	0e 94 55 06 	call	0xcaa	; 0xcaa <strnlen>
 a22:	4c 01       	movw	r8, r24
 a24:	82 01       	movw	r16, r4
 a26:	f3 2d       	mov	r31, r3
 a28:	ff 77       	andi	r31, 0x7F	; 127
 a2a:	3f 2e       	mov	r3, r31
 a2c:	16 c0       	rjmp	.+44     	; 0xa5a <__stack+0x15b>
 a2e:	28 01       	movw	r4, r16
 a30:	22 e0       	ldi	r18, 0x02	; 2
 a32:	42 0e       	add	r4, r18
 a34:	51 1c       	adc	r5, r1
 a36:	f8 01       	movw	r30, r16
 a38:	a0 80       	ld	r10, Z
 a3a:	b1 80       	ldd	r11, Z+1	; 0x01
 a3c:	36 fe       	sbrs	r3, 6
 a3e:	03 c0       	rjmp	.+6      	; 0xa46 <__stack+0x147>
 a40:	69 2d       	mov	r22, r9
 a42:	70 e0       	ldi	r23, 0x00	; 0
 a44:	02 c0       	rjmp	.+4      	; 0xa4a <__stack+0x14b>
 a46:	6f ef       	ldi	r22, 0xFF	; 255
 a48:	7f ef       	ldi	r23, 0xFF	; 255
 a4a:	c5 01       	movw	r24, r10
 a4c:	0e 94 4a 06 	call	0xc94	; 0xc94 <strnlen_P>
 a50:	4c 01       	movw	r8, r24
 a52:	f3 2d       	mov	r31, r3
 a54:	f0 68       	ori	r31, 0x80	; 128
 a56:	3f 2e       	mov	r3, r31
 a58:	82 01       	movw	r16, r4
 a5a:	33 fc       	sbrc	r3, 3
 a5c:	1b c0       	rjmp	.+54     	; 0xa94 <__stack+0x195>
 a5e:	82 2d       	mov	r24, r2
 a60:	90 e0       	ldi	r25, 0x00	; 0
 a62:	88 16       	cp	r8, r24
 a64:	99 06       	cpc	r9, r25
 a66:	b0 f4       	brcc	.+44     	; 0xa94 <__stack+0x195>
 a68:	b6 01       	movw	r22, r12
 a6a:	80 e2       	ldi	r24, 0x20	; 32
 a6c:	90 e0       	ldi	r25, 0x00	; 0
 a6e:	0e 94 60 06 	call	0xcc0	; 0xcc0 <fputc>
 a72:	2a 94       	dec	r2
 a74:	f4 cf       	rjmp	.-24     	; 0xa5e <__stack+0x15f>
 a76:	f5 01       	movw	r30, r10
 a78:	37 fc       	sbrc	r3, 7
 a7a:	85 91       	lpm	r24, Z+
 a7c:	37 fe       	sbrs	r3, 7
 a7e:	81 91       	ld	r24, Z+
 a80:	5f 01       	movw	r10, r30
 a82:	b6 01       	movw	r22, r12
 a84:	90 e0       	ldi	r25, 0x00	; 0
 a86:	0e 94 60 06 	call	0xcc0	; 0xcc0 <fputc>
 a8a:	21 10       	cpse	r2, r1
 a8c:	2a 94       	dec	r2
 a8e:	21 e0       	ldi	r18, 0x01	; 1
 a90:	82 1a       	sub	r8, r18
 a92:	91 08       	sbc	r9, r1
 a94:	81 14       	cp	r8, r1
 a96:	91 04       	cpc	r9, r1
 a98:	71 f7       	brne	.-36     	; 0xa76 <__stack+0x177>
 a9a:	e8 c0       	rjmp	.+464    	; 0xc6c <__stack+0x36d>
 a9c:	84 36       	cpi	r24, 0x64	; 100
 a9e:	11 f0       	breq	.+4      	; 0xaa4 <__stack+0x1a5>
 aa0:	89 36       	cpi	r24, 0x69	; 105
 aa2:	41 f5       	brne	.+80     	; 0xaf4 <__stack+0x1f5>
 aa4:	f8 01       	movw	r30, r16
 aa6:	37 fe       	sbrs	r3, 7
 aa8:	07 c0       	rjmp	.+14     	; 0xab8 <__stack+0x1b9>
 aaa:	60 81       	ld	r22, Z
 aac:	71 81       	ldd	r23, Z+1	; 0x01
 aae:	82 81       	ldd	r24, Z+2	; 0x02
 ab0:	93 81       	ldd	r25, Z+3	; 0x03
 ab2:	0c 5f       	subi	r16, 0xFC	; 252
 ab4:	1f 4f       	sbci	r17, 0xFF	; 255
 ab6:	08 c0       	rjmp	.+16     	; 0xac8 <__stack+0x1c9>
 ab8:	60 81       	ld	r22, Z
 aba:	71 81       	ldd	r23, Z+1	; 0x01
 abc:	07 2e       	mov	r0, r23
 abe:	00 0c       	add	r0, r0
 ac0:	88 0b       	sbc	r24, r24
 ac2:	99 0b       	sbc	r25, r25
 ac4:	0e 5f       	subi	r16, 0xFE	; 254
 ac6:	1f 4f       	sbci	r17, 0xFF	; 255
 ac8:	f3 2d       	mov	r31, r3
 aca:	ff 76       	andi	r31, 0x6F	; 111
 acc:	3f 2e       	mov	r3, r31
 ace:	97 ff       	sbrs	r25, 7
 ad0:	09 c0       	rjmp	.+18     	; 0xae4 <__stack+0x1e5>
 ad2:	90 95       	com	r25
 ad4:	80 95       	com	r24
 ad6:	70 95       	com	r23
 ad8:	61 95       	neg	r22
 ada:	7f 4f       	sbci	r23, 0xFF	; 255
 adc:	8f 4f       	sbci	r24, 0xFF	; 255
 ade:	9f 4f       	sbci	r25, 0xFF	; 255
 ae0:	f0 68       	ori	r31, 0x80	; 128
 ae2:	3f 2e       	mov	r3, r31
 ae4:	2a e0       	ldi	r18, 0x0A	; 10
 ae6:	30 e0       	ldi	r19, 0x00	; 0
 ae8:	a3 01       	movw	r20, r6
 aea:	0e 94 9c 06 	call	0xd38	; 0xd38 <__ultoa_invert>
 aee:	88 2e       	mov	r8, r24
 af0:	86 18       	sub	r8, r6
 af2:	45 c0       	rjmp	.+138    	; 0xb7e <__stack+0x27f>
 af4:	85 37       	cpi	r24, 0x75	; 117
 af6:	31 f4       	brne	.+12     	; 0xb04 <__stack+0x205>
 af8:	23 2d       	mov	r18, r3
 afa:	2f 7e       	andi	r18, 0xEF	; 239
 afc:	b2 2e       	mov	r11, r18
 afe:	2a e0       	ldi	r18, 0x0A	; 10
 b00:	30 e0       	ldi	r19, 0x00	; 0
 b02:	25 c0       	rjmp	.+74     	; 0xb4e <__stack+0x24f>
 b04:	93 2d       	mov	r25, r3
 b06:	99 7f       	andi	r25, 0xF9	; 249
 b08:	b9 2e       	mov	r11, r25
 b0a:	8f 36       	cpi	r24, 0x6F	; 111
 b0c:	c1 f0       	breq	.+48     	; 0xb3e <__stack+0x23f>
 b0e:	18 f4       	brcc	.+6      	; 0xb16 <__stack+0x217>
 b10:	88 35       	cpi	r24, 0x58	; 88
 b12:	79 f0       	breq	.+30     	; 0xb32 <__stack+0x233>
 b14:	b5 c0       	rjmp	.+362    	; 0xc80 <__stack+0x381>
 b16:	80 37       	cpi	r24, 0x70	; 112
 b18:	19 f0       	breq	.+6      	; 0xb20 <__stack+0x221>
 b1a:	88 37       	cpi	r24, 0x78	; 120
 b1c:	21 f0       	breq	.+8      	; 0xb26 <__stack+0x227>
 b1e:	b0 c0       	rjmp	.+352    	; 0xc80 <__stack+0x381>
 b20:	e9 2f       	mov	r30, r25
 b22:	e0 61       	ori	r30, 0x10	; 16
 b24:	be 2e       	mov	r11, r30
 b26:	b4 fe       	sbrs	r11, 4
 b28:	0d c0       	rjmp	.+26     	; 0xb44 <__stack+0x245>
 b2a:	fb 2d       	mov	r31, r11
 b2c:	f4 60       	ori	r31, 0x04	; 4
 b2e:	bf 2e       	mov	r11, r31
 b30:	09 c0       	rjmp	.+18     	; 0xb44 <__stack+0x245>
 b32:	34 fe       	sbrs	r3, 4
 b34:	0a c0       	rjmp	.+20     	; 0xb4a <__stack+0x24b>
 b36:	29 2f       	mov	r18, r25
 b38:	26 60       	ori	r18, 0x06	; 6
 b3a:	b2 2e       	mov	r11, r18
 b3c:	06 c0       	rjmp	.+12     	; 0xb4a <__stack+0x24b>
 b3e:	28 e0       	ldi	r18, 0x08	; 8
 b40:	30 e0       	ldi	r19, 0x00	; 0
 b42:	05 c0       	rjmp	.+10     	; 0xb4e <__stack+0x24f>
 b44:	20 e1       	ldi	r18, 0x10	; 16
 b46:	30 e0       	ldi	r19, 0x00	; 0
 b48:	02 c0       	rjmp	.+4      	; 0xb4e <__stack+0x24f>
 b4a:	20 e1       	ldi	r18, 0x10	; 16
 b4c:	32 e0       	ldi	r19, 0x02	; 2
 b4e:	f8 01       	movw	r30, r16
 b50:	b7 fe       	sbrs	r11, 7
 b52:	07 c0       	rjmp	.+14     	; 0xb62 <__stack+0x263>
 b54:	60 81       	ld	r22, Z
 b56:	71 81       	ldd	r23, Z+1	; 0x01
 b58:	82 81       	ldd	r24, Z+2	; 0x02
 b5a:	93 81       	ldd	r25, Z+3	; 0x03
 b5c:	0c 5f       	subi	r16, 0xFC	; 252
 b5e:	1f 4f       	sbci	r17, 0xFF	; 255
 b60:	06 c0       	rjmp	.+12     	; 0xb6e <__stack+0x26f>
 b62:	60 81       	ld	r22, Z
 b64:	71 81       	ldd	r23, Z+1	; 0x01
 b66:	80 e0       	ldi	r24, 0x00	; 0
 b68:	90 e0       	ldi	r25, 0x00	; 0
 b6a:	0e 5f       	subi	r16, 0xFE	; 254
 b6c:	1f 4f       	sbci	r17, 0xFF	; 255
 b6e:	a3 01       	movw	r20, r6
 b70:	0e 94 9c 06 	call	0xd38	; 0xd38 <__ultoa_invert>
 b74:	88 2e       	mov	r8, r24
 b76:	86 18       	sub	r8, r6
 b78:	fb 2d       	mov	r31, r11
 b7a:	ff 77       	andi	r31, 0x7F	; 127
 b7c:	3f 2e       	mov	r3, r31
 b7e:	36 fe       	sbrs	r3, 6
 b80:	0d c0       	rjmp	.+26     	; 0xb9c <__stack+0x29d>
 b82:	23 2d       	mov	r18, r3
 b84:	2e 7f       	andi	r18, 0xFE	; 254
 b86:	a2 2e       	mov	r10, r18
 b88:	89 14       	cp	r8, r9
 b8a:	58 f4       	brcc	.+22     	; 0xba2 <__stack+0x2a3>
 b8c:	34 fe       	sbrs	r3, 4
 b8e:	0b c0       	rjmp	.+22     	; 0xba6 <__stack+0x2a7>
 b90:	32 fc       	sbrc	r3, 2
 b92:	09 c0       	rjmp	.+18     	; 0xba6 <__stack+0x2a7>
 b94:	83 2d       	mov	r24, r3
 b96:	8e 7e       	andi	r24, 0xEE	; 238
 b98:	a8 2e       	mov	r10, r24
 b9a:	05 c0       	rjmp	.+10     	; 0xba6 <__stack+0x2a7>
 b9c:	b8 2c       	mov	r11, r8
 b9e:	a3 2c       	mov	r10, r3
 ba0:	03 c0       	rjmp	.+6      	; 0xba8 <__stack+0x2a9>
 ba2:	b8 2c       	mov	r11, r8
 ba4:	01 c0       	rjmp	.+2      	; 0xba8 <__stack+0x2a9>
 ba6:	b9 2c       	mov	r11, r9
 ba8:	a4 fe       	sbrs	r10, 4
 baa:	0f c0       	rjmp	.+30     	; 0xbca <__stack+0x2cb>
 bac:	fe 01       	movw	r30, r28
 bae:	e8 0d       	add	r30, r8
 bb0:	f1 1d       	adc	r31, r1
 bb2:	80 81       	ld	r24, Z
 bb4:	80 33       	cpi	r24, 0x30	; 48
 bb6:	21 f4       	brne	.+8      	; 0xbc0 <__stack+0x2c1>
 bb8:	9a 2d       	mov	r25, r10
 bba:	99 7e       	andi	r25, 0xE9	; 233
 bbc:	a9 2e       	mov	r10, r25
 bbe:	09 c0       	rjmp	.+18     	; 0xbd2 <__stack+0x2d3>
 bc0:	a2 fe       	sbrs	r10, 2
 bc2:	06 c0       	rjmp	.+12     	; 0xbd0 <__stack+0x2d1>
 bc4:	b3 94       	inc	r11
 bc6:	b3 94       	inc	r11
 bc8:	04 c0       	rjmp	.+8      	; 0xbd2 <__stack+0x2d3>
 bca:	8a 2d       	mov	r24, r10
 bcc:	86 78       	andi	r24, 0x86	; 134
 bce:	09 f0       	breq	.+2      	; 0xbd2 <__stack+0x2d3>
 bd0:	b3 94       	inc	r11
 bd2:	a3 fc       	sbrc	r10, 3
 bd4:	11 c0       	rjmp	.+34     	; 0xbf8 <__stack+0x2f9>
 bd6:	a0 fe       	sbrs	r10, 0
 bd8:	06 c0       	rjmp	.+12     	; 0xbe6 <__stack+0x2e7>
 bda:	b2 14       	cp	r11, r2
 bdc:	88 f4       	brcc	.+34     	; 0xc00 <__stack+0x301>
 bde:	28 0c       	add	r2, r8
 be0:	92 2c       	mov	r9, r2
 be2:	9b 18       	sub	r9, r11
 be4:	0e c0       	rjmp	.+28     	; 0xc02 <__stack+0x303>
 be6:	b2 14       	cp	r11, r2
 be8:	60 f4       	brcc	.+24     	; 0xc02 <__stack+0x303>
 bea:	b6 01       	movw	r22, r12
 bec:	80 e2       	ldi	r24, 0x20	; 32
 bee:	90 e0       	ldi	r25, 0x00	; 0
 bf0:	0e 94 60 06 	call	0xcc0	; 0xcc0 <fputc>
 bf4:	b3 94       	inc	r11
 bf6:	f7 cf       	rjmp	.-18     	; 0xbe6 <__stack+0x2e7>
 bf8:	b2 14       	cp	r11, r2
 bfa:	18 f4       	brcc	.+6      	; 0xc02 <__stack+0x303>
 bfc:	2b 18       	sub	r2, r11
 bfe:	02 c0       	rjmp	.+4      	; 0xc04 <__stack+0x305>
 c00:	98 2c       	mov	r9, r8
 c02:	21 2c       	mov	r2, r1
 c04:	a4 fe       	sbrs	r10, 4
 c06:	10 c0       	rjmp	.+32     	; 0xc28 <__stack+0x329>
 c08:	b6 01       	movw	r22, r12
 c0a:	80 e3       	ldi	r24, 0x30	; 48
 c0c:	90 e0       	ldi	r25, 0x00	; 0
 c0e:	0e 94 60 06 	call	0xcc0	; 0xcc0 <fputc>
 c12:	a2 fe       	sbrs	r10, 2
 c14:	17 c0       	rjmp	.+46     	; 0xc44 <__stack+0x345>
 c16:	a1 fc       	sbrc	r10, 1
 c18:	03 c0       	rjmp	.+6      	; 0xc20 <__stack+0x321>
 c1a:	88 e7       	ldi	r24, 0x78	; 120
 c1c:	90 e0       	ldi	r25, 0x00	; 0
 c1e:	02 c0       	rjmp	.+4      	; 0xc24 <__stack+0x325>
 c20:	88 e5       	ldi	r24, 0x58	; 88
 c22:	90 e0       	ldi	r25, 0x00	; 0
 c24:	b6 01       	movw	r22, r12
 c26:	0c c0       	rjmp	.+24     	; 0xc40 <__stack+0x341>
 c28:	8a 2d       	mov	r24, r10
 c2a:	86 78       	andi	r24, 0x86	; 134
 c2c:	59 f0       	breq	.+22     	; 0xc44 <__stack+0x345>
 c2e:	a1 fe       	sbrs	r10, 1
 c30:	02 c0       	rjmp	.+4      	; 0xc36 <__stack+0x337>
 c32:	8b e2       	ldi	r24, 0x2B	; 43
 c34:	01 c0       	rjmp	.+2      	; 0xc38 <__stack+0x339>
 c36:	80 e2       	ldi	r24, 0x20	; 32
 c38:	a7 fc       	sbrc	r10, 7
 c3a:	8d e2       	ldi	r24, 0x2D	; 45
 c3c:	b6 01       	movw	r22, r12
 c3e:	90 e0       	ldi	r25, 0x00	; 0
 c40:	0e 94 60 06 	call	0xcc0	; 0xcc0 <fputc>
 c44:	89 14       	cp	r8, r9
 c46:	38 f4       	brcc	.+14     	; 0xc56 <__stack+0x357>
 c48:	b6 01       	movw	r22, r12
 c4a:	80 e3       	ldi	r24, 0x30	; 48
 c4c:	90 e0       	ldi	r25, 0x00	; 0
 c4e:	0e 94 60 06 	call	0xcc0	; 0xcc0 <fputc>
 c52:	9a 94       	dec	r9
 c54:	f7 cf       	rjmp	.-18     	; 0xc44 <__stack+0x345>
 c56:	8a 94       	dec	r8
 c58:	f3 01       	movw	r30, r6
 c5a:	e8 0d       	add	r30, r8
 c5c:	f1 1d       	adc	r31, r1
 c5e:	80 81       	ld	r24, Z
 c60:	b6 01       	movw	r22, r12
 c62:	90 e0       	ldi	r25, 0x00	; 0
 c64:	0e 94 60 06 	call	0xcc0	; 0xcc0 <fputc>
 c68:	81 10       	cpse	r8, r1
 c6a:	f5 cf       	rjmp	.-22     	; 0xc56 <__stack+0x357>
 c6c:	22 20       	and	r2, r2
 c6e:	09 f4       	brne	.+2      	; 0xc72 <__stack+0x373>
 c70:	42 ce       	rjmp	.-892    	; 0x8f6 <vfprintf+0x24>
 c72:	b6 01       	movw	r22, r12
 c74:	80 e2       	ldi	r24, 0x20	; 32
 c76:	90 e0       	ldi	r25, 0x00	; 0
 c78:	0e 94 60 06 	call	0xcc0	; 0xcc0 <fputc>
 c7c:	2a 94       	dec	r2
 c7e:	f6 cf       	rjmp	.-20     	; 0xc6c <__stack+0x36d>
 c80:	f6 01       	movw	r30, r12
 c82:	86 81       	ldd	r24, Z+6	; 0x06
 c84:	97 81       	ldd	r25, Z+7	; 0x07
 c86:	02 c0       	rjmp	.+4      	; 0xc8c <__stack+0x38d>
 c88:	8f ef       	ldi	r24, 0xFF	; 255
 c8a:	9f ef       	ldi	r25, 0xFF	; 255
 c8c:	2b 96       	adiw	r28, 0x0b	; 11
 c8e:	e2 e1       	ldi	r30, 0x12	; 18
 c90:	0c 94 2c 07 	jmp	0xe58	; 0xe58 <__epilogue_restores__>

00000c94 <strnlen_P>:
 c94:	fc 01       	movw	r30, r24
 c96:	05 90       	lpm	r0, Z+
 c98:	61 50       	subi	r22, 0x01	; 1
 c9a:	70 40       	sbci	r23, 0x00	; 0
 c9c:	01 10       	cpse	r0, r1
 c9e:	d8 f7       	brcc	.-10     	; 0xc96 <strnlen_P+0x2>
 ca0:	80 95       	com	r24
 ca2:	90 95       	com	r25
 ca4:	8e 0f       	add	r24, r30
 ca6:	9f 1f       	adc	r25, r31
 ca8:	08 95       	ret

00000caa <strnlen>:
 caa:	fc 01       	movw	r30, r24
 cac:	61 50       	subi	r22, 0x01	; 1
 cae:	70 40       	sbci	r23, 0x00	; 0
 cb0:	01 90       	ld	r0, Z+
 cb2:	01 10       	cpse	r0, r1
 cb4:	d8 f7       	brcc	.-10     	; 0xcac <strnlen+0x2>
 cb6:	80 95       	com	r24
 cb8:	90 95       	com	r25
 cba:	8e 0f       	add	r24, r30
 cbc:	9f 1f       	adc	r25, r31
 cbe:	08 95       	ret

00000cc0 <fputc>:
 cc0:	0f 93       	push	r16
 cc2:	1f 93       	push	r17
 cc4:	cf 93       	push	r28
 cc6:	df 93       	push	r29
 cc8:	fb 01       	movw	r30, r22
 cca:	23 81       	ldd	r18, Z+3	; 0x03
 ccc:	21 fd       	sbrc	r18, 1
 cce:	03 c0       	rjmp	.+6      	; 0xcd6 <fputc+0x16>
 cd0:	8f ef       	ldi	r24, 0xFF	; 255
 cd2:	9f ef       	ldi	r25, 0xFF	; 255
 cd4:	2c c0       	rjmp	.+88     	; 0xd2e <fputc+0x6e>
 cd6:	22 ff       	sbrs	r18, 2
 cd8:	16 c0       	rjmp	.+44     	; 0xd06 <fputc+0x46>
 cda:	46 81       	ldd	r20, Z+6	; 0x06
 cdc:	57 81       	ldd	r21, Z+7	; 0x07
 cde:	24 81       	ldd	r18, Z+4	; 0x04
 ce0:	35 81       	ldd	r19, Z+5	; 0x05
 ce2:	42 17       	cp	r20, r18
 ce4:	53 07       	cpc	r21, r19
 ce6:	44 f4       	brge	.+16     	; 0xcf8 <fputc+0x38>
 ce8:	a0 81       	ld	r26, Z
 cea:	b1 81       	ldd	r27, Z+1	; 0x01
 cec:	9d 01       	movw	r18, r26
 cee:	2f 5f       	subi	r18, 0xFF	; 255
 cf0:	3f 4f       	sbci	r19, 0xFF	; 255
 cf2:	31 83       	std	Z+1, r19	; 0x01
 cf4:	20 83       	st	Z, r18
 cf6:	8c 93       	st	X, r24
 cf8:	26 81       	ldd	r18, Z+6	; 0x06
 cfa:	37 81       	ldd	r19, Z+7	; 0x07
 cfc:	2f 5f       	subi	r18, 0xFF	; 255
 cfe:	3f 4f       	sbci	r19, 0xFF	; 255
 d00:	37 83       	std	Z+7, r19	; 0x07
 d02:	26 83       	std	Z+6, r18	; 0x06
 d04:	14 c0       	rjmp	.+40     	; 0xd2e <fputc+0x6e>
 d06:	8b 01       	movw	r16, r22
 d08:	ec 01       	movw	r28, r24
 d0a:	fb 01       	movw	r30, r22
 d0c:	00 84       	ldd	r0, Z+8	; 0x08
 d0e:	f1 85       	ldd	r31, Z+9	; 0x09
 d10:	e0 2d       	mov	r30, r0
 d12:	09 95       	icall
 d14:	89 2b       	or	r24, r25
 d16:	e1 f6       	brne	.-72     	; 0xcd0 <fputc+0x10>
 d18:	d8 01       	movw	r26, r16
 d1a:	16 96       	adiw	r26, 0x06	; 6
 d1c:	8d 91       	ld	r24, X+
 d1e:	9c 91       	ld	r25, X
 d20:	17 97       	sbiw	r26, 0x07	; 7
 d22:	01 96       	adiw	r24, 0x01	; 1
 d24:	17 96       	adiw	r26, 0x07	; 7
 d26:	9c 93       	st	X, r25
 d28:	8e 93       	st	-X, r24
 d2a:	16 97       	sbiw	r26, 0x06	; 6
 d2c:	ce 01       	movw	r24, r28
 d2e:	df 91       	pop	r29
 d30:	cf 91       	pop	r28
 d32:	1f 91       	pop	r17
 d34:	0f 91       	pop	r16
 d36:	08 95       	ret

00000d38 <__ultoa_invert>:
 d38:	fa 01       	movw	r30, r20
 d3a:	aa 27       	eor	r26, r26
 d3c:	28 30       	cpi	r18, 0x08	; 8
 d3e:	51 f1       	breq	.+84     	; 0xd94 <__ultoa_invert+0x5c>
 d40:	20 31       	cpi	r18, 0x10	; 16
 d42:	81 f1       	breq	.+96     	; 0xda4 <__ultoa_invert+0x6c>
 d44:	e8 94       	clt
 d46:	6f 93       	push	r22
 d48:	6e 7f       	andi	r22, 0xFE	; 254
 d4a:	6e 5f       	subi	r22, 0xFE	; 254
 d4c:	7f 4f       	sbci	r23, 0xFF	; 255
 d4e:	8f 4f       	sbci	r24, 0xFF	; 255
 d50:	9f 4f       	sbci	r25, 0xFF	; 255
 d52:	af 4f       	sbci	r26, 0xFF	; 255
 d54:	b1 e0       	ldi	r27, 0x01	; 1
 d56:	3e d0       	rcall	.+124    	; 0xdd4 <__ultoa_invert+0x9c>
 d58:	b4 e0       	ldi	r27, 0x04	; 4
 d5a:	3c d0       	rcall	.+120    	; 0xdd4 <__ultoa_invert+0x9c>
 d5c:	67 0f       	add	r22, r23
 d5e:	78 1f       	adc	r23, r24
 d60:	89 1f       	adc	r24, r25
 d62:	9a 1f       	adc	r25, r26
 d64:	a1 1d       	adc	r26, r1
 d66:	68 0f       	add	r22, r24
 d68:	79 1f       	adc	r23, r25
 d6a:	8a 1f       	adc	r24, r26
 d6c:	91 1d       	adc	r25, r1
 d6e:	a1 1d       	adc	r26, r1
 d70:	6a 0f       	add	r22, r26
 d72:	71 1d       	adc	r23, r1
 d74:	81 1d       	adc	r24, r1
 d76:	91 1d       	adc	r25, r1
 d78:	a1 1d       	adc	r26, r1
 d7a:	20 d0       	rcall	.+64     	; 0xdbc <__ultoa_invert+0x84>
 d7c:	09 f4       	brne	.+2      	; 0xd80 <__ultoa_invert+0x48>
 d7e:	68 94       	set
 d80:	3f 91       	pop	r19
 d82:	2a e0       	ldi	r18, 0x0A	; 10
 d84:	26 9f       	mul	r18, r22
 d86:	11 24       	eor	r1, r1
 d88:	30 19       	sub	r19, r0
 d8a:	30 5d       	subi	r19, 0xD0	; 208
 d8c:	31 93       	st	Z+, r19
 d8e:	de f6       	brtc	.-74     	; 0xd46 <__ultoa_invert+0xe>
 d90:	cf 01       	movw	r24, r30
 d92:	08 95       	ret
 d94:	46 2f       	mov	r20, r22
 d96:	47 70       	andi	r20, 0x07	; 7
 d98:	40 5d       	subi	r20, 0xD0	; 208
 d9a:	41 93       	st	Z+, r20
 d9c:	b3 e0       	ldi	r27, 0x03	; 3
 d9e:	0f d0       	rcall	.+30     	; 0xdbe <__ultoa_invert+0x86>
 da0:	c9 f7       	brne	.-14     	; 0xd94 <__ultoa_invert+0x5c>
 da2:	f6 cf       	rjmp	.-20     	; 0xd90 <__ultoa_invert+0x58>
 da4:	46 2f       	mov	r20, r22
 da6:	4f 70       	andi	r20, 0x0F	; 15
 da8:	40 5d       	subi	r20, 0xD0	; 208
 daa:	4a 33       	cpi	r20, 0x3A	; 58
 dac:	18 f0       	brcs	.+6      	; 0xdb4 <__ultoa_invert+0x7c>
 dae:	49 5d       	subi	r20, 0xD9	; 217
 db0:	31 fd       	sbrc	r19, 1
 db2:	40 52       	subi	r20, 0x20	; 32
 db4:	41 93       	st	Z+, r20
 db6:	02 d0       	rcall	.+4      	; 0xdbc <__ultoa_invert+0x84>
 db8:	a9 f7       	brne	.-22     	; 0xda4 <__ultoa_invert+0x6c>
 dba:	ea cf       	rjmp	.-44     	; 0xd90 <__ultoa_invert+0x58>
 dbc:	b4 e0       	ldi	r27, 0x04	; 4
 dbe:	a6 95       	lsr	r26
 dc0:	97 95       	ror	r25
 dc2:	87 95       	ror	r24
 dc4:	77 95       	ror	r23
 dc6:	67 95       	ror	r22
 dc8:	ba 95       	dec	r27
 dca:	c9 f7       	brne	.-14     	; 0xdbe <__ultoa_invert+0x86>
 dcc:	00 97       	sbiw	r24, 0x00	; 0
 dce:	61 05       	cpc	r22, r1
 dd0:	71 05       	cpc	r23, r1
 dd2:	08 95       	ret
 dd4:	9b 01       	movw	r18, r22
 dd6:	ac 01       	movw	r20, r24
 dd8:	0a 2e       	mov	r0, r26
 dda:	06 94       	lsr	r0
 ddc:	57 95       	ror	r21
 dde:	47 95       	ror	r20
 de0:	37 95       	ror	r19
 de2:	27 95       	ror	r18
 de4:	ba 95       	dec	r27
 de6:	c9 f7       	brne	.-14     	; 0xdda <__ultoa_invert+0xa2>
 de8:	62 0f       	add	r22, r18
 dea:	73 1f       	adc	r23, r19
 dec:	84 1f       	adc	r24, r20
 dee:	95 1f       	adc	r25, r21
 df0:	a0 1d       	adc	r26, r0
 df2:	08 95       	ret

00000df4 <eeprom_read_byte>:
 df4:	f9 99       	sbic	0x1f, 1	; 31
 df6:	fe cf       	rjmp	.-4      	; 0xdf4 <eeprom_read_byte>
 df8:	92 bd       	out	0x22, r25	; 34
 dfa:	81 bd       	out	0x21, r24	; 33
 dfc:	f8 9a       	sbi	0x1f, 0	; 31
 dfe:	99 27       	eor	r25, r25
 e00:	80 b5       	in	r24, 0x20	; 32
 e02:	08 95       	ret

00000e04 <eeprom_write_byte>:
 e04:	26 2f       	mov	r18, r22

00000e06 <eeprom_write_r18>:
 e06:	f9 99       	sbic	0x1f, 1	; 31
 e08:	fe cf       	rjmp	.-4      	; 0xe06 <eeprom_write_r18>
 e0a:	1f ba       	out	0x1f, r1	; 31
 e0c:	92 bd       	out	0x22, r25	; 34
 e0e:	81 bd       	out	0x21, r24	; 33
 e10:	20 bd       	out	0x20, r18	; 32
 e12:	0f b6       	in	r0, 0x3f	; 63
 e14:	f8 94       	cli
 e16:	fa 9a       	sbi	0x1f, 2	; 31
 e18:	f9 9a       	sbi	0x1f, 1	; 31
 e1a:	0f be       	out	0x3f, r0	; 63
 e1c:	01 96       	adiw	r24, 0x01	; 1
 e1e:	08 95       	ret

00000e20 <__prologue_saves__>:
 e20:	2f 92       	push	r2
 e22:	3f 92       	push	r3
 e24:	4f 92       	push	r4
 e26:	5f 92       	push	r5
 e28:	6f 92       	push	r6
 e2a:	7f 92       	push	r7
 e2c:	8f 92       	push	r8
 e2e:	9f 92       	push	r9
 e30:	af 92       	push	r10
 e32:	bf 92       	push	r11
 e34:	cf 92       	push	r12
 e36:	df 92       	push	r13
 e38:	ef 92       	push	r14
 e3a:	ff 92       	push	r15
 e3c:	0f 93       	push	r16
 e3e:	1f 93       	push	r17
 e40:	cf 93       	push	r28
 e42:	df 93       	push	r29
 e44:	cd b7       	in	r28, 0x3d	; 61
 e46:	de b7       	in	r29, 0x3e	; 62
 e48:	ca 1b       	sub	r28, r26
 e4a:	db 0b       	sbc	r29, r27
 e4c:	0f b6       	in	r0, 0x3f	; 63
 e4e:	f8 94       	cli
 e50:	de bf       	out	0x3e, r29	; 62
 e52:	0f be       	out	0x3f, r0	; 63
 e54:	cd bf       	out	0x3d, r28	; 61
 e56:	09 94       	ijmp

00000e58 <__epilogue_restores__>:
 e58:	2a 88       	ldd	r2, Y+18	; 0x12
 e5a:	39 88       	ldd	r3, Y+17	; 0x11
 e5c:	48 88       	ldd	r4, Y+16	; 0x10
 e5e:	5f 84       	ldd	r5, Y+15	; 0x0f
 e60:	6e 84       	ldd	r6, Y+14	; 0x0e
 e62:	7d 84       	ldd	r7, Y+13	; 0x0d
 e64:	8c 84       	ldd	r8, Y+12	; 0x0c
 e66:	9b 84       	ldd	r9, Y+11	; 0x0b
 e68:	aa 84       	ldd	r10, Y+10	; 0x0a
 e6a:	b9 84       	ldd	r11, Y+9	; 0x09
 e6c:	c8 84       	ldd	r12, Y+8	; 0x08
 e6e:	df 80       	ldd	r13, Y+7	; 0x07
 e70:	ee 80       	ldd	r14, Y+6	; 0x06
 e72:	fd 80       	ldd	r15, Y+5	; 0x05
 e74:	0c 81       	ldd	r16, Y+4	; 0x04
 e76:	1b 81       	ldd	r17, Y+3	; 0x03
 e78:	aa 81       	ldd	r26, Y+2	; 0x02
 e7a:	b9 81       	ldd	r27, Y+1	; 0x01
 e7c:	ce 0f       	add	r28, r30
 e7e:	d1 1d       	adc	r29, r1
 e80:	0f b6       	in	r0, 0x3f	; 63
 e82:	f8 94       	cli
 e84:	de bf       	out	0x3e, r29	; 62
 e86:	0f be       	out	0x3f, r0	; 63
 e88:	cd bf       	out	0x3d, r28	; 61
 e8a:	ed 01       	movw	r28, r26
 e8c:	08 95       	ret

00000e8e <_exit>:
 e8e:	f8 94       	cli

00000e90 <__stop_program>:
 e90:	ff cf       	rjmp	.-2      	; 0xe90 <__stop_program>
