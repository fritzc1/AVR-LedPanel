
WS2812LED_SAMPLE1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000420  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003ac  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  00000420  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000420  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000450  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  00000490  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000677  00000000  00000000  000004b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005b6  00000000  00000000  00000b27  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000030a  00000000  00000000  000010dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  000013e7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3b 00 	jmp	0x76	; 0x76 <__ctors_end>
   4:	0c 94 60 01 	jmp	0x2c0	; 0x2c0 <__vector_1>
   8:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
   c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  10:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  14:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  18:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  1c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  20:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  24:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  28:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  2c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  30:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  34:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  38:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  3c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  40:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  44:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  48:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  4c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  50:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  54:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  58:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  5c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  60:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  64:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  68:	c0 00       	.word	0x00c0	; ????
  6a:	c8 00       	.word	0x00c8	; ????
  6c:	d6 00       	.word	0x00d6	; ????
  6e:	e6 00       	.word	0x00e6	; ????
  70:	f7 00       	.word	0x00f7	; ????
  72:	09 01       	movw	r0, r18
  74:	19 01       	movw	r2, r18

00000076 <__ctors_end>:
  76:	11 24       	eor	r1, r1
  78:	1f be       	out	0x3f, r1	; 63
  7a:	cf ef       	ldi	r28, 0xFF	; 255
  7c:	d8 e0       	ldi	r29, 0x08	; 8
  7e:	de bf       	out	0x3e, r29	; 62
  80:	cd bf       	out	0x3d, r28	; 61

00000082 <__do_clear_bss>:
  82:	21 e0       	ldi	r18, 0x01	; 1
  84:	a0 e0       	ldi	r26, 0x00	; 0
  86:	b1 e0       	ldi	r27, 0x01	; 1
  88:	01 c0       	rjmp	.+2      	; 0x8c <.do_clear_bss_start>

0000008a <.do_clear_bss_loop>:
  8a:	1d 92       	st	X+, r1

0000008c <.do_clear_bss_start>:
  8c:	a1 30       	cpi	r26, 0x01	; 1
  8e:	b2 07       	cpc	r27, r18
  90:	e1 f7       	brne	.-8      	; 0x8a <.do_clear_bss_loop>
  92:	0e 94 6f 01 	call	0x2de	; 0x2de <main>
  96:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <_exit>

0000009a <__bad_interrupt>:
  9a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009e <output_grb>:
 .equ      OUTBIT,   3


 .global output_grb
 output_grb:
 movw   r26, r24      ;r26:27 = X = p_buf
  9e:	dc 01       	movw	r26, r24
 movw   r24, r22      ;r24:25 = count
  a0:	cb 01       	movw	r24, r22
 in     r22, SREG     ;save SREG (global int state)
  a2:	6f b7       	in	r22, 0x3f	; 63
 cli                  ;no interrupts from here on, we're cycle-counting
  a4:	f8 94       	cli
 in     r20, PORTD
  a6:	4b b1       	in	r20, 0x0b	; 11
 ori    r20, (1<<OUTBIT)         ;our '1' output
  a8:	48 60       	ori	r20, 0x08	; 8
 in     r21, PORTD
  aa:	5b b1       	in	r21, 0x0b	; 11
 andi   r21, ~(1<<OUTBIT)        ;our '0' output
  ac:	57 7f       	andi	r21, 0xF7	; 247
 ldi    r19, 7        ;7 bit counter (8th bit is different)
  ae:	37 e0       	ldi	r19, 0x07	; 7
 ld     r18,X+        ;get first data byte
  b0:	2d 91       	ld	r18, X+

000000b2 <loop1>:
 loop1:
 out    PORTD, r20    ; 1   +0 start of a bit pulse
  b2:	4b b9       	out	0x0b, r20	; 11
 nop
  b4:	00 00       	nop
 lsl    r18           ; 1   +1 next bit into C, MSB first
  b6:	22 0f       	add	r18, r18
 nop
  b8:	00 00       	nop
 brcs   L1            ; 1/2 +2 branch if 1
  ba:	68 f0       	brcs	.+26     	; 0xd6 <L1>
 nop
  bc:	00 00       	nop
 out    PORTD, r21    ; 1   +3 end hi for '0' bit (3 clocks hi)
  be:	5b b9       	out	0x0b, r21	; 11
 nop
  c0:	00 00       	nop
 nop                  ; 1   +4
  c2:	00 00       	nop
 nop
  c4:	00 00       	nop
 bst    r18, 7        ; 1   +5 save last bit of data for fast branching
  c6:	27 fb       	bst	r18, 7
 nop
  c8:	00 00       	nop
 subi   r19, 1        ; 1   +6 how many more bits for this byte?
  ca:	31 50       	subi	r19, 0x01	; 1
 nop
  cc:	00 00       	nop
 breq   bit8          ; 1/2 +7 last bit, do differently
  ce:	69 f0       	breq	.+26     	; 0xea <bit8>
 nop
  d0:	00 00       	nop
 rjmp   loop1         ; 2   +8, 10 total for 0 bit
  d2:	ef cf       	rjmp	.-34     	; 0xb2 <loop1>
	...

000000d6 <L1>:
 nop
 L1:
 nop                  ; 1   +4
  d6:	00 00       	nop
 nop
  d8:	00 00       	nop
 bst    r18, 7        ; 1   +5 save last bit of data for fast branching
  da:	27 fb       	bst	r18, 7
 nop
  dc:	00 00       	nop
 subi   r19, 1        ; 1   +6 how many more bits for this byte
  de:	31 50       	subi	r19, 0x01	; 1
 nop
  e0:	00 00       	nop
 out    PORTD, r21    ; 1   +7 end hi for '1' bit (7 clocks hi)
  e2:	5b b9       	out	0x0b, r21	; 11
 nop
  e4:	00 00       	nop
 brne   loop1         ; 2/1 +8 10 total for 1 bit (fall thru if last bit)
  e6:	29 f7       	brne	.-54     	; 0xb2 <loop1>
	...

000000ea <bit8>:
 nop
 bit8:
 ldi    r19, 7        ; 1   +9 bit count for next byte
  ea:	37 e0       	ldi	r19, 0x07	; 7
 nop
  ec:	00 00       	nop
 out    PORTD, r20    ; 1   +0 start of a bit pulse
  ee:	4b b9       	out	0x0b, r20	; 11
 nop
  f0:	00 00       	nop
 brts   L2            ; 1/2 +1 branch if last bit is a 1
  f2:	7e f0       	brts	.+30     	; 0x112 <L2>
 nop
  f4:	00 00       	nop
 nop                  ; 1   +2
  f6:	00 00       	nop
 nop
  f8:	00 00       	nop
 out    PORTD, r21    ; 1   +3 end hi for '0' bit (3 clocks hi)
  fa:	5b b9       	out	0x0b, r21	; 11
 nop
  fc:	00 00       	nop
 ld     r18, X+       ; 2   +4 fetch next byte
  fe:	2d 91       	ld	r18, X+
 nop
 100:	00 00       	nop
 sbiw   r24, 1        ; 2   +6 dec byte counter
 102:	01 97       	sbiw	r24, 0x01	; 1
 nop
 104:	00 00       	nop
 brne   loop1         ; 2   +8 loop back or return
 106:	a9 f6       	brne	.-86     	; 0xb2 <loop1>
 nop
 108:	00 00       	nop
 out    SREG, r22     ; restore global int flag
 10a:	6f bf       	out	0x3f, r22	; 63
 sei                  ; re-enable interrupts CF ADD
 10c:	78 94       	sei
 nop
 10e:	00 00       	nop
 ret
 110:	08 95       	ret

00000112 <L2>:
 L2:
 ld     r18, X+       ; 2   +3 fetch next byte
 112:	2d 91       	ld	r18, X+
 nop
 114:	00 00       	nop
 sbiw   r24, 1        ; 2   +5 dec byte counter
 116:	01 97       	sbiw	r24, 0x01	; 1
 nop
 118:	00 00       	nop
 out    PORTD, r21    ; 1   +7 end hi for '1' bit (7 clocks hi)
 11a:	5b b9       	out	0x0b, r21	; 11
 nop
 11c:	00 00       	nop
 brne   loop1         ; 2   +8 loop back or return
 11e:	49 f6       	brne	.-110    	; 0xb2 <loop1>
 nop
 120:	00 00       	nop
 out    SREG, r22     ; restore global int flag
 122:	6f bf       	out	0x3f, r22	; 63
 sei                  ; re-enable interrupts CF ADD
 124:	78 94       	sei
 ret
 126:	08 95       	ret

00000128 <Function2>:
 128:	cf 92       	push	r12
 12a:	df 92       	push	r13
 12c:	ef 92       	push	r14
 12e:	ff 92       	push	r15
 130:	0f 93       	push	r16
 132:	1f 93       	push	r17
 134:	cf 93       	push	r28
 136:	df 93       	push	r29
 138:	cd b7       	in	r28, 0x3d	; 61
 13a:	de b7       	in	r29, 0x3e	; 62
 13c:	6e 97       	sbiw	r28, 0x1e	; 30
 13e:	0f b6       	in	r0, 0x3f	; 63
 140:	f8 94       	cli
 142:	de bf       	out	0x3e, r29	; 62
 144:	0f be       	out	0x3f, r0	; 63
 146:	cd bf       	out	0x3d, r28	; 61
 148:	10 e0       	ldi	r17, 0x00	; 0
 14a:	d1 2c       	mov	r13, r1
 14c:	e1 2c       	mov	r14, r1
 14e:	f1 2c       	mov	r15, r1
 150:	42 e3       	ldi	r20, 0x32	; 50
 152:	c4 2e       	mov	r12, r20
 154:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 158:	81 11       	cpse	r24, r1
 15a:	a3 c0       	rjmp	.+326    	; 0x2a2 <Function2+0x17a>
 15c:	6e e1       	ldi	r22, 0x1E	; 30
 15e:	70 e0       	ldi	r23, 0x00	; 0
 160:	ce 01       	movw	r24, r28
 162:	01 96       	adiw	r24, 0x01	; 1
 164:	0e 94 4f 00 	call	0x9e	; 0x9e <output_grb>
 168:	8d 2d       	mov	r24, r13
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	87 30       	cpi	r24, 0x07	; 7
 16e:	91 05       	cpc	r25, r1
 170:	08 f0       	brcs	.+2      	; 0x174 <Function2+0x4c>
 172:	8f c0       	rjmp	.+286    	; 0x292 <Function2+0x16a>
 174:	fc 01       	movw	r30, r24
 176:	ec 5c       	subi	r30, 0xCC	; 204
 178:	ff 4f       	sbci	r31, 0xFF	; 255
 17a:	1f 5f       	subi	r17, 0xFF	; 255
 17c:	0c 94 ce 01 	jmp	0x39c	; 0x39c <__tablejump2__>
 180:	13 33       	cpi	r17, 0x33	; 51
 182:	08 f0       	brcs	.+2      	; 0x186 <Function2+0x5e>
 184:	6c c0       	rjmp	.+216    	; 0x25e <Function2+0x136>
 186:	01 2f       	mov	r16, r17
 188:	21 2f       	mov	r18, r17
 18a:	41 2f       	mov	r20, r17
 18c:	6e 2d       	mov	r22, r14
 18e:	62 c0       	rjmp	.+196    	; 0x254 <Function2+0x12c>
 190:	13 33       	cpi	r17, 0x33	; 51
 192:	18 f4       	brcc	.+6      	; 0x19a <Function2+0x72>
 194:	00 e0       	ldi	r16, 0x00	; 0
 196:	20 e0       	ldi	r18, 0x00	; 0
 198:	16 c0       	rjmp	.+44     	; 0x1c6 <Function2+0x9e>
 19a:	8d e1       	ldi	r24, 0x1D	; 29
 19c:	e8 16       	cp	r14, r24
 19e:	f1 04       	cpc	r15, r1
 1a0:	0c f0       	brlt	.+2      	; 0x1a4 <Function2+0x7c>
 1a2:	61 c0       	rjmp	.+194    	; 0x266 <Function2+0x13e>
 1a4:	93 e0       	ldi	r25, 0x03	; 3
 1a6:	e9 0e       	add	r14, r25
 1a8:	f1 1c       	adc	r15, r1
 1aa:	72 c0       	rjmp	.+228    	; 0x290 <Function2+0x168>
 1ac:	13 33       	cpi	r17, 0x33	; 51
 1ae:	08 f0       	brcs	.+2      	; 0x1b2 <Function2+0x8a>
 1b0:	5f c0       	rjmp	.+190    	; 0x270 <Function2+0x148>
 1b2:	00 e0       	ldi	r16, 0x00	; 0
 1b4:	21 2f       	mov	r18, r17
 1b6:	4c 2d       	mov	r20, r12
 1b8:	41 1b       	sub	r20, r17
 1ba:	6e 2d       	mov	r22, r14
 1bc:	ce 01       	movw	r24, r28
 1be:	01 96       	adiw	r24, 0x01	; 1
 1c0:	0e 94 c2 01 	call	0x384	; 0x384 <set_color>
 1c4:	21 2f       	mov	r18, r17
 1c6:	40 e0       	ldi	r20, 0x00	; 0
 1c8:	61 e0       	ldi	r22, 0x01	; 1
 1ca:	43 c0       	rjmp	.+134    	; 0x252 <Function2+0x12a>
 1cc:	13 33       	cpi	r17, 0x33	; 51
 1ce:	08 f0       	brcs	.+2      	; 0x1d2 <Function2+0xaa>
 1d0:	53 c0       	rjmp	.+166    	; 0x278 <Function2+0x150>
 1d2:	01 2f       	mov	r16, r17
 1d4:	2c 2d       	mov	r18, r12
 1d6:	21 1b       	sub	r18, r17
 1d8:	40 e0       	ldi	r20, 0x00	; 0
 1da:	61 e0       	ldi	r22, 0x01	; 1
 1dc:	6e 0d       	add	r22, r14
 1de:	ce 01       	movw	r24, r28
 1e0:	01 96       	adiw	r24, 0x01	; 1
 1e2:	0e 94 c2 01 	call	0x384	; 0x384 <set_color>
 1e6:	20 e0       	ldi	r18, 0x00	; 0
 1e8:	40 e0       	ldi	r20, 0x00	; 0
 1ea:	62 e0       	ldi	r22, 0x02	; 2
 1ec:	32 c0       	rjmp	.+100    	; 0x252 <Function2+0x12a>
 1ee:	13 33       	cpi	r17, 0x33	; 51
 1f0:	08 f0       	brcs	.+2      	; 0x1f4 <Function2+0xcc>
 1f2:	46 c0       	rjmp	.+140    	; 0x280 <Function2+0x158>
 1f4:	0c 2d       	mov	r16, r12
 1f6:	01 1b       	sub	r16, r17
 1f8:	20 e0       	ldi	r18, 0x00	; 0
 1fa:	41 2f       	mov	r20, r17
 1fc:	62 e0       	ldi	r22, 0x02	; 2
 1fe:	6e 0d       	add	r22, r14
 200:	ce 01       	movw	r24, r28
 202:	01 96       	adiw	r24, 0x01	; 1
 204:	0e 94 c2 01 	call	0x384	; 0x384 <set_color>
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	21 2f       	mov	r18, r17
 20c:	41 2f       	mov	r20, r17
 20e:	63 e0       	ldi	r22, 0x03	; 3
 210:	20 c0       	rjmp	.+64     	; 0x252 <Function2+0x12a>
 212:	13 33       	cpi	r17, 0x33	; 51
 214:	c8 f5       	brcc	.+114    	; 0x288 <Function2+0x160>
 216:	01 2f       	mov	r16, r17
 218:	4c 2d       	mov	r20, r12
 21a:	41 1b       	sub	r20, r17
 21c:	24 2f       	mov	r18, r20
 21e:	63 e0       	ldi	r22, 0x03	; 3
 220:	6e 0d       	add	r22, r14
 222:	ce 01       	movw	r24, r28
 224:	01 96       	adiw	r24, 0x01	; 1
 226:	0e 94 c2 01 	call	0x384	; 0x384 <set_color>
 22a:	20 e0       	ldi	r18, 0x00	; 0
 22c:	41 2f       	mov	r20, r17
 22e:	64 e0       	ldi	r22, 0x04	; 4
 230:	10 c0       	rjmp	.+32     	; 0x252 <Function2+0x12a>
 232:	13 33       	cpi	r17, 0x33	; 51
 234:	68 f5       	brcc	.+90     	; 0x290 <Function2+0x168>
 236:	4c 2d       	mov	r20, r12
 238:	41 1b       	sub	r20, r17
 23a:	04 2f       	mov	r16, r20
 23c:	21 2f       	mov	r18, r17
 23e:	64 e0       	ldi	r22, 0x04	; 4
 240:	6e 0d       	add	r22, r14
 242:	ce 01       	movw	r24, r28
 244:	01 96       	adiw	r24, 0x01	; 1
 246:	0e 94 c2 01 	call	0x384	; 0x384 <set_color>
 24a:	01 2f       	mov	r16, r17
 24c:	21 2f       	mov	r18, r17
 24e:	40 e0       	ldi	r20, 0x00	; 0
 250:	65 e0       	ldi	r22, 0x05	; 5
 252:	6e 0d       	add	r22, r14
 254:	ce 01       	movw	r24, r28
 256:	01 96       	adiw	r24, 0x01	; 1
 258:	0e 94 c2 01 	call	0x384	; 0x384 <set_color>
 25c:	1b c0       	rjmp	.+54     	; 0x294 <Function2+0x16c>
 25e:	10 e0       	ldi	r17, 0x00	; 0
 260:	dd 24       	eor	r13, r13
 262:	d3 94       	inc	r13
 264:	17 c0       	rjmp	.+46     	; 0x294 <Function2+0x16c>
 266:	10 e0       	ldi	r17, 0x00	; 0
 268:	d1 2c       	mov	r13, r1
 26a:	e1 2c       	mov	r14, r1
 26c:	f1 2c       	mov	r15, r1
 26e:	12 c0       	rjmp	.+36     	; 0x294 <Function2+0x16c>
 270:	10 e0       	ldi	r17, 0x00	; 0
 272:	33 e0       	ldi	r19, 0x03	; 3
 274:	d3 2e       	mov	r13, r19
 276:	0e c0       	rjmp	.+28     	; 0x294 <Function2+0x16c>
 278:	10 e0       	ldi	r17, 0x00	; 0
 27a:	24 e0       	ldi	r18, 0x04	; 4
 27c:	d2 2e       	mov	r13, r18
 27e:	0a c0       	rjmp	.+20     	; 0x294 <Function2+0x16c>
 280:	10 e0       	ldi	r17, 0x00	; 0
 282:	95 e0       	ldi	r25, 0x05	; 5
 284:	d9 2e       	mov	r13, r25
 286:	06 c0       	rjmp	.+12     	; 0x294 <Function2+0x16c>
 288:	10 e0       	ldi	r17, 0x00	; 0
 28a:	86 e0       	ldi	r24, 0x06	; 6
 28c:	d8 2e       	mov	r13, r24
 28e:	02 c0       	rjmp	.+4      	; 0x294 <Function2+0x16c>
 290:	10 e0       	ldi	r17, 0x00	; 0
 292:	d1 2c       	mov	r13, r1
 294:	8f e9       	ldi	r24, 0x9F	; 159
 296:	9f e0       	ldi	r25, 0x0F	; 15
 298:	01 97       	sbiw	r24, 0x01	; 1
 29a:	f1 f7       	brne	.-4      	; 0x298 <Function2+0x170>
 29c:	00 c0       	rjmp	.+0      	; 0x29e <Function2+0x176>
 29e:	00 00       	nop
 2a0:	59 cf       	rjmp	.-334    	; 0x154 <Function2+0x2c>
 2a2:	6e 96       	adiw	r28, 0x1e	; 30
 2a4:	0f b6       	in	r0, 0x3f	; 63
 2a6:	f8 94       	cli
 2a8:	de bf       	out	0x3e, r29	; 62
 2aa:	0f be       	out	0x3f, r0	; 63
 2ac:	cd bf       	out	0x3d, r28	; 61
 2ae:	df 91       	pop	r29
 2b0:	cf 91       	pop	r28
 2b2:	1f 91       	pop	r17
 2b4:	0f 91       	pop	r16
 2b6:	ff 90       	pop	r15
 2b8:	ef 90       	pop	r14
 2ba:	df 90       	pop	r13
 2bc:	cf 90       	pop	r12
 2be:	08 95       	ret

000002c0 <__vector_1>:
 2c0:	1f 92       	push	r1
 2c2:	0f 92       	push	r0
 2c4:	0f b6       	in	r0, 0x3f	; 63
 2c6:	0f 92       	push	r0
 2c8:	11 24       	eor	r1, r1
 2ca:	8f 93       	push	r24
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 2d2:	8f 91       	pop	r24
 2d4:	0f 90       	pop	r0
 2d6:	0f be       	out	0x3f, r0	; 63
 2d8:	0f 90       	pop	r0
 2da:	1f 90       	pop	r1
 2dc:	18 95       	reti

000002de <main>:
 2de:	cf 93       	push	r28
 2e0:	df 93       	push	r29
 2e2:	cd b7       	in	r28, 0x3d	; 61
 2e4:	de b7       	in	r29, 0x3e	; 62
 2e6:	6e 97       	sbiw	r28, 0x1e	; 30
 2e8:	0f b6       	in	r0, 0x3f	; 63
 2ea:	f8 94       	cli
 2ec:	de bf       	out	0x3e, r29	; 62
 2ee:	0f be       	out	0x3f, r0	; 63
 2f0:	cd bf       	out	0x3d, r28	; 61
 2f2:	52 98       	cbi	0x0a, 2	; 10
 2f4:	5a 9a       	sbi	0x0b, 2	; 11
 2f6:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
 2fa:	81 60       	ori	r24, 0x01	; 1
 2fc:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7e0069>
 300:	e8 9a       	sbi	0x1d, 0	; 29
 302:	78 94       	sei
 304:	53 9a       	sbi	0x0a, 3	; 10
 306:	ce 01       	movw	r24, r28
 308:	01 96       	adiw	r24, 0x01	; 1
 30a:	7c 01       	movw	r14, r24
 30c:	8e e1       	ldi	r24, 0x1E	; 30
 30e:	f7 01       	movw	r30, r14
 310:	11 92       	st	Z+, r1
 312:	8a 95       	dec	r24
 314:	e9 f7       	brne	.-6      	; 0x310 <main+0x32>
 316:	6e e1       	ldi	r22, 0x1E	; 30
 318:	70 e0       	ldi	r23, 0x00	; 0
 31a:	c7 01       	movw	r24, r14
 31c:	0e 94 4f 00 	call	0x9e	; 0x9e <output_grb>
 320:	01 e0       	ldi	r16, 0x01	; 1
 322:	10 e0       	ldi	r17, 0x00	; 0
 324:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 328:	6e e1       	ldi	r22, 0x1E	; 30
 32a:	70 e0       	ldi	r23, 0x00	; 0
 32c:	c7 01       	movw	r24, r14
 32e:	0e 94 4f 00 	call	0x9e	; 0x9e <output_grb>
 332:	02 30       	cpi	r16, 0x02	; 2
 334:	11 05       	cpc	r17, r1
 336:	d1 f0       	breq	.+52     	; 0x36c <main+0x8e>
 338:	03 30       	cpi	r16, 0x03	; 3
 33a:	11 05       	cpc	r17, r1
 33c:	e1 f0       	breq	.+56     	; 0x376 <main+0x98>
 33e:	01 30       	cpi	r16, 0x01	; 1
 340:	11 05       	cpc	r17, r1
 342:	81 f7       	brne	.-32     	; 0x324 <main+0x46>
 344:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 348:	81 11       	cpse	r24, r1
 34a:	0d c0       	rjmp	.+26     	; 0x366 <main+0x88>
 34c:	00 e0       	ldi	r16, 0x00	; 0
 34e:	20 e0       	ldi	r18, 0x00	; 0
 350:	44 e6       	ldi	r20, 0x64	; 100
 352:	61 e0       	ldi	r22, 0x01	; 1
 354:	c7 01       	movw	r24, r14
 356:	0e 94 c2 01 	call	0x384	; 0x384 <set_color>
 35a:	6e e1       	ldi	r22, 0x1E	; 30
 35c:	70 e0       	ldi	r23, 0x00	; 0
 35e:	c7 01       	movw	r24, r14
 360:	0e 94 4f 00 	call	0x9e	; 0x9e <output_grb>
 364:	ef cf       	rjmp	.-34     	; 0x344 <main+0x66>
 366:	02 e0       	ldi	r16, 0x02	; 2
 368:	10 e0       	ldi	r17, 0x00	; 0
 36a:	dc cf       	rjmp	.-72     	; 0x324 <main+0x46>
 36c:	0e 94 94 00 	call	0x128	; 0x128 <Function2>
 370:	03 e0       	ldi	r16, 0x03	; 3
 372:	10 e0       	ldi	r17, 0x00	; 0
 374:	d7 cf       	rjmp	.-82     	; 0x324 <main+0x46>
 376:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 37a:	88 23       	and	r24, r24
 37c:	e1 f3       	breq	.-8      	; 0x376 <main+0x98>
 37e:	00 e0       	ldi	r16, 0x00	; 0
 380:	10 e0       	ldi	r17, 0x00	; 0
 382:	d0 cf       	rjmp	.-96     	; 0x324 <main+0x46>

00000384 <set_color>:
 384:	0f 93       	push	r16
 386:	fc 01       	movw	r30, r24
 388:	33 e0       	ldi	r19, 0x03	; 3
 38a:	63 9f       	mul	r22, r19
 38c:	e0 0d       	add	r30, r0
 38e:	f1 1d       	adc	r31, r1
 390:	11 24       	eor	r1, r1
 392:	20 83       	st	Z, r18
 394:	41 83       	std	Z+1, r20	; 0x01
 396:	02 83       	std	Z+2, r16	; 0x02
 398:	0f 91       	pop	r16
 39a:	08 95       	ret

0000039c <__tablejump2__>:
 39c:	ee 0f       	add	r30, r30
 39e:	ff 1f       	adc	r31, r31
 3a0:	05 90       	lpm	r0, Z+
 3a2:	f4 91       	lpm	r31, Z
 3a4:	e0 2d       	mov	r30, r0
 3a6:	09 94       	ijmp

000003a8 <_exit>:
 3a8:	f8 94       	cli

000003aa <__stop_program>:
 3aa:	ff cf       	rjmp	.-2      	; 0x3aa <__stop_program>
